import { describe, expect, it } from "vitest";
import { TelegramFormatter, formatForTelegram } from "../src/utils/telegram-formatter";

describe("TelegramFormatter", () => {
  const formatter = new TelegramFormatter();

  describe("formatAgentResponse", () => {
    it("should handle empty response", () => {
      const result = formatter.formatAgentResponse("");
      expect(result.text).toBe("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
    });

    it("should add emojis for error messages", () => {
      const result = formatter.formatAgentResponse("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ");
      expect(result.text).toContain("‚ùå");
    });

    it("should add emojis for success messages", () => {
      const result = formatter.formatAgentResponse("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
      expect(result.text).toContain("‚úÖ");
    });

    it("should add emojis for warning messages", () => {
      const result = formatter.formatAgentResponse("–í–Ω–∏–º–∞–Ω–∏–µ: –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
      expect(result.text).toContain("‚ö†Ô∏è");
    });

    it("should add emojis for question messages", () => {
      const result = formatter.formatAgentResponse("–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å?");
      expect(result.text).toContain("‚ùì");
    });

    it("should add emojis for answer messages", () => {
      const result = formatter.formatAgentResponse("–í–æ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å");
      expect(result.text).toContain("üí°");
    });

    it("should add emojis for analysis messages", () => {
      const result = formatter.formatAgentResponse("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç");
      expect(result.text).toContain("üìä");
    });

    it("should add emojis for financial messages", () => {
      const result = formatter.formatAgentResponse("–í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ");
      expect(result.text).toContain("üí∞");
    });

    it("should not add emojis for regular messages", () => {
      const result = formatter.formatAgentResponse("–≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
      expect(result.text).toBe("–≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    });
  });

  describe("formatTextStructure", () => {
    it("should format simple headers", () => {
      const result = formatter.formatAgentResponse("–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ");
      expect(result.text).toContain("**–ó–∞–≥–æ–ª–æ–≤–æ–∫:**");
    });

    it("should format lists", () => {
      const result = formatter.formatAgentResponse("- –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç\n- –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç");
      expect(result.text).toContain("‚Ä¢ –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç");
      expect(result.text).toContain("‚Ä¢ –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç");
    });

    it("should format numbered lists", () => {
      const result = formatter.formatAgentResponse("1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç\n2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç");
      expect(result.text).toContain("1\\. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç");
      expect(result.text).toContain("2\\. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç");
    });
  });

  describe("parse mode detection", () => {
    it("should use MarkdownV2 when text contains markdown", () => {
      const result = formatter.formatAgentResponse("**–ó–∞–≥–æ–ª–æ–≤–æ–∫**\n–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç");
      expect(result.parse_mode).toBe("MarkdownV2");
    });

    it("should not use parse mode for plain text", () => {
      const result = formatter.formatAgentResponse("–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏");
      expect(result.parse_mode).toBeUndefined();
    });
  });

  describe("line wrapping", () => {
    it("should wrap long lines", () => {
      const longText = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –≤ Telegram";
      const result = formatter.formatAgentResponse(longText, { maxLineLength: 30 });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–∑–±–∏—Ç—ã
      const lines = result.text.split("\n");
      lines.forEach(line => {
        expect(line.length).toBeLessThanOrEqual(30);
      });
    });
  });

  describe("utility functions", () => {
    it("should format using formatForTelegram", () => {
      const result = formatForTelegram("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
      expect(result.text).toBe("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    });

    it("should respect options", () => {
      const result = formatForTelegram("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", { useEmojis: false });
      expect(result.text).toBe("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
    });
  });

  describe("agent-specific formatting", () => {
    it("should format QA responses", () => {
      const result = formatter.formatAgentSpecificResponse("–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å", "qa");
      expect(result.text).toBe("üí° –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å");
    });

    it("should format financial responses", () => {
      const result = formatter.formatAgentSpecificResponse("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "financial");
      expect(result.text).toBe("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è");
    });

    it("should format analytics responses", () => {
      const result = formatter.formatAgentSpecificResponse("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "analytics");
      expect(result.text).toBe("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö");
    });
  });
});
