#!/usr/bin/env bun

/**
 * üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * –æ—Ç Telegram –±–æ—Ç–∞ –∫ –∞–≥–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ API
 */

// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é createMessageContext –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function createMessageContextMock(ctx: any) {
  const chatId = String(ctx.chat?.id ?? "unknown");
  const userId = ctx.from?.id ? String(ctx.from.id) : "unknown";
  const messageId =
    ctx.message && "message_id" in ctx.message
      ? String(ctx.message.message_id)
      : undefined;

  return {
    chatId,
    userId,
    messageId,
    metadata: {
      user: ctx.from?.username ?? ctx.from?.id,
      chatType: ctx.chat?.type,
      messageType: "text",
    },
  };
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
const mockTelegramContext = {
  chat: {
    id: 123456789,
    type: "private" as const,
  },
  from: {
    id: 987654321,
    username: "testuser",
    first_name: "Test",
    last_name: "User",
  },
  message: {
    message_id: 42,
    text: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
    date: Math.floor(Date.now() / 1000),
  },
};

console.log("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n");

// 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
console.log("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:");
const messageContext = createMessageContextMock(mockTelegramContext);
console.log("   üì± Chat ID:", messageContext.chatId);
console.log("   üë§ User ID:", messageContext.userId);
console.log("   üìù Message ID:", messageContext.messageId);
console.log("   üè∑Ô∏è  Metadata:", messageContext.metadata);
console.log();

// 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API –≤—ã–∑–æ–≤–∞
console.log("2Ô∏è‚É£ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API –≤—ã–∑–æ–≤–∞:");
const apiCallStructure = {
  text: mockTelegramContext.message.text,
  channel: "telegram" as const,
  chatId: messageContext.chatId,
  messageId: messageContext.messageId,
  telegramUserId: messageContext.userId,
  agentOptions: {
    useQualityControl: true,
    maxQualityIterations: 2,
    targetQuality: 0.8,
  },
  metadata: {
    smartMode: true,
    timestamp: new Date().toISOString(),
  },
};

console.log("   üì§ API Call Structure:");
console.log("   ", JSON.stringify(apiCallStructure, null, 2));
console.log();

// 3. –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ API
console.log("3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ API:");
const apiProcessingSteps = [
  "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram –±–æ—Ç–∞",
  "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
  "üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ TelegramUserService",
  "üí¨ –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–∏—Å–∫ conversation –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
  "üìö –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã (–¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)",
  "‚úÇÔ∏è  –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º",
  "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
  "ü§ñ –ü–µ—Ä–µ–¥–∞—á–∞ –∫ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ",
];

apiProcessingSteps.forEach((step, index) => {
  console.log(`   ${index + 1}. ${step}`);
});
console.log();

// 4. –ö–æ–Ω—Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∫ –∞–≥–µ–Ω—Ç–∞–º
console.log("4Ô∏è‚É£ –ö–æ–Ω—Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∫ –∞–≥–µ–Ω—Ç–∞–º:");
const agentContext = {
  userId: messageContext.userId,
  chatId: messageContext.chatId,
  messageId: messageContext.messageId,
  channel: "telegram",
  metadata: {
    telegramUserId: messageContext.userId,
    telegramChatId: messageContext.chatId,
    conversationId: "conv_" + Date.now(),
    contextMessageCount: 5,
    agentMode: true,
    smartMode: true,
    timestamp: new Date().toISOString(),
  },
};

console.log("   ü§ñ Agent Context:");
console.log("   ", JSON.stringify(agentContext, null, 2));
console.log();

// 5. –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã
console.log("5Ô∏è‚É£ –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã (—Å–∏–º—É–ª—è—Ü–∏—è):");
const conversationHistory = [
  {
    id: "msg_1",
    role: "user" as const,
    content: { text: "–ü—Ä–∏–≤–µ—Ç!" },
    createdAt: new Date(Date.now() - 60000),
  },
  {
    id: "msg_2",
    role: "assistant" as const,
    content: { text: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?" },
    createdAt: new Date(Date.now() - 30000),
  },
  {
    id: "msg_3",
    role: "user" as const,
    content: { text: "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!" },
    createdAt: new Date(Date.now() - 15000),
  },
  {
    id: "msg_4",
    role: "assistant" as const,
    content: { text: "–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?" },
    createdAt: new Date(Date.now() - 10000),
  },
  {
    id: "msg_5",
    role: "user" as const,
    content: { text: mockTelegramContext.message.text },
    createdAt: new Date(),
  },
];

console.log("   üìö Conversation History:");
conversationHistory.forEach((msg, index) => {
  const time = msg.createdAt.toLocaleTimeString();
  const role = msg.role === "user" ? "üë§" : "ü§ñ";
  console.log(`   ${index + 1}. ${role} [${time}]: ${msg.content.text}`);
});
console.log();

// 6. –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
console.log("6Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:");
const processingResult = {
  success: true,
  response:
    "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª! üòä –ö–∞–∫ –¥–µ–ª–∞ —É —Ç–µ–±—è?",
  messageType: {
    type: "question",
    subtype: "greeting",
    confidence: 0.95,
    need_logging: false,
  },
  relevance: {
    relevant: true,
    score: 0.95,
    category: "conversation",
  },
  agentMetadata: {
    agentsUsed: ["Router Agent", "Q&A Specialist"],
    totalSteps: 2,
    qualityScore: 0.95,
    processingTime: 1250,
    processingMode: "agents",
    shouldLogEvent: false,
  },
};

console.log("   ‚úÖ Processing Result:");
console.log("   ", JSON.stringify(processingResult, null, 2));
console.log();

// 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
console.log("7Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:");
const contextStats = {
  totalMessagesInContext: conversationHistory.length,
  userMessages: conversationHistory.filter((m) => m.role === "user").length,
  assistantMessages: conversationHistory.filter((m) => m.role === "assistant")
    .length,
  contextAge: "5 –º–∏–Ω—É—Ç",
  conversationId: agentContext.metadata.conversationId,
  contextPreserved: true,
  agentAccess: true,
};

console.log("   üìä Context Statistics:");
Object.entries(contextStats).forEach(([key, value]) => {
  console.log(`   ${key}: ${value}`);
});
console.log();

console.log("üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:");
console.log("   ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫ –±–æ—Ç–∞–º");
console.log("   ‚úÖ –ê–≥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã");
console.log("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç–≤–µ—Ç—ã");
console.log("   ‚úÖ –í—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è");
console.log();
console.log("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
