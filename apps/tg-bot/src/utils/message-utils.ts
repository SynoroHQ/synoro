import type { Context } from "grammy";

/**
 * –≠—Ç–∞–ø—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
const PROCESSING_STAGES = [
  { emoji: "üîç", text: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å..." },
  { emoji: "üß†", text: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ò–ò..." },
  { emoji: "‚ö°", text: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç..." },
  { emoji: "‚ú®", text: "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..." },
  { emoji: "üéØ", text: "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ..." },
];

/**
 * –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export class ProcessingAnimation {
  private messageId: number | undefined;
  private ctx: Context;
  private intervalId: NodeJS.Timeout | undefined;
  private currentStage = 0;
  private messageType: string;

  constructor(ctx: Context, messageType = "—Å–æ–æ–±—â–µ–Ω–∏–µ") {
    this.ctx = ctx;
    this.messageType = messageType;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async start(): Promise<void> {
    try {
      const processingMsg = await this.ctx.reply(
        `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ ${this.messageType}...`,
        {
          parse_mode: "HTML",
        },
      );
      this.messageId = processingMsg.message_id;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2 —Å–µ–∫—É–Ω–¥—ã
      this.intervalId = setInterval(() => {
        this.updateAnimation();
      }, 2000);
    } catch (error) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
   */
  private async updateAnimation(): Promise<void> {
    if (!this.messageId) return;

    this.currentStage = (this.currentStage + 1) % PROCESSING_STAGES.length;
    const stage = PROCESSING_STAGES[this.currentStage];

    if (!stage) return;

    try {
      await this.ctx.api.editMessageText(
        this.ctx.chat!.id,
        this.messageId,
        `${stage.emoji} ${stage.text}`,
        {
          parse_mode: "HTML",
        },
      );
    } catch (error) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é:", error);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async stop(): Promise<void> {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = undefined;
    }

    if (this.messageId) {
      try {
        await this.ctx.api.deleteMessage(this.ctx.chat!.id, this.messageId);
      } catch (error) {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏:", error);
      }
      this.messageId = undefined;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  getMessageId(): number | undefined {
    return this.messageId;
  }
}

/**
 * –ü–ª–∞–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞—Ç—É—Ö–∞–Ω–∏—è
 * –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–µ–ª–∞—è –µ–≥–æ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç
 */
export async function smoothDeleteMessage(
  ctx: Context,
  messageId: number,
): Promise<void> {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    await ctx.api.editMessageText(
      ctx.chat!.id,
      messageId,
      "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...",
      {
        parse_mode: "HTML",
      },
    );

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
    await new Promise((resolve) => setTimeout(resolve, 300));

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.api.deleteMessage(ctx.chat!.id, messageId);
  } catch (error) {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–ª–∞–≤–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", error);

    // Fallback: –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    try {
      await ctx.api.deleteMessage(ctx.chat!.id, messageId);
    } catch (deleteError) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –Ω–∞–ø—Ä—è–º—É—é:", deleteError);
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..." —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
export async function sendProcessingMessage(
  ctx: Context,
  messageType = "—Å–æ–æ–±—â–µ–Ω–∏–µ",
): Promise<number | undefined> {
  try {
    const processingMsg = await ctx.reply(
      `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ ${messageType}...`,
      {
        parse_mode: "HTML",
      },
    );
    return processingMsg.message_id;
  } catch (error) {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º':", error);
    return undefined;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..." —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export async function removeProcessingMessage(
  ctx: Context,
  messageId: number | undefined,
): Promise<void> {
  if (!messageId) return;

  try {
    await ctx.api.deleteMessage(ctx.chat!.id, messageId);
  } catch (error) {
    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º':", error);
  }
}
