/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö HTML —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 */

export interface HTMLMessageOptions {
  title?: string;
  subtitle?: string;
  content: string;
  footer?: string;
  useEmojis?: boolean;
  useColors?: boolean;
  compact?: boolean;
}

export interface HTMLTableOptions {
  headers: string[];
  rows: string[][];
  title?: string;
  compact?: boolean;
}

export interface HTMLListOptions {
  items: string[];
  title?: string;
  type?: "bullet" | "numbered";
  compact?: boolean;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è HTML —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export class HTMLMessageBuilder {
  /**
   * –°–æ–∑–¥–∞—ë—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static createHeader(
    title: string,
    subtitle?: string,
    useEmojis = true,
  ): string {
    const emoji = useEmojis ? "üìã " : "";
    let header = `<b>${emoji}${title}</b>`;

    if (subtitle) {
      header += `\n<i>${subtitle}</i>`;
    }

    return header;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
   */
  static createSeparator(length = 40, char = "‚îÅ"): string {
    return char.repeat(length);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  static createInfoBlock(
    content: string,
    icon = "‚ÑπÔ∏è",
    useEmojis = true,
  ): string {
    const emoji = useEmojis ? `${icon} ` : "";
    return `${emoji}${content}`;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
   */
  static createWarningBlock(content: string, useEmojis = true): string {
    return this.createInfoBlock(content, "‚ö†Ô∏è", useEmojis);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ —Å –æ—à–∏–±–∫–æ–π
   */
  static createErrorBlock(content: string, useEmojis = true): string {
    return this.createInfoBlock(content, "‚ùå", useEmojis);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ —Å —É—Å–ø–µ—Ö–æ–º
   */
  static createSuccessBlock(content: string, useEmojis = true): string {
    return this.createInfoBlock(content, "‚úÖ", useEmojis);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º
   */
  static createQuestionBlock(content: string, useEmojis = true): string {
    return this.createInfoBlock(content, "‚ùì", useEmojis);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ —Å –æ—Ç–≤–µ—Ç–æ–º
   */
  static createAnswerBlock(content: string, useEmojis = true): string {
    return this.createInfoBlock(content, "üí°", useEmojis);
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É
   */
  static createTable(options: HTMLTableOptions): string {
    const { headers, rows, title, compact = false } = options;

    let table = "";

    if (title) {
      table += `<b>${title}</b>\n`;
    }

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    const headerRow = headers
      .map((header) => `<code>${header}</code>`)
      .join(" | ");
    table += `${headerRow}\n`;

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const separator = compact ? "‚îÄ" : "‚îÅ";
    table += `${separator.repeat(headers.join(" | ").length)}\n`;

    // –°—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    rows.forEach((row) => {
      const formattedRow = row
        .map((cell) => `<code>${cell}</code>`)
        .join(" | ");
      table += `${formattedRow}\n`;
    });

    return table;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å–ø–∏—Å–æ–∫
   */
  static createList(options: HTMLListOptions): string {
    const { items, title, type = "bullet", compact = false } = options;

    let list = "";

    if (title) {
      list += `<b>${title}</b>\n`;
    }

    const bullet = type === "bullet" ? "‚Ä¢" : "";

    items.forEach((item, index) => {
      const prefix = type === "numbered" ? `${index + 1}.` : bullet;
      const spacing = compact ? " " : "  ";
      list += `${prefix}${spacing}${item}\n`;
    });

    return list;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ –∫–æ–¥–∞
   */
  static createCodeBlock(
    code: string,
    language?: string,
    title?: string,
  ): string {
    let block = "";

    if (title) {
      block += `<b>${title}</b>\n`;
    }

    if (language) {
      block += `<i>${language}</i>\n`;
    }

    block += `<pre><code>${code}</code></pre>`;

    return block;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É
   */
  static createLink(url: string, text?: string): string {
    const linkText = text || url;
    return `<a href="${url}">${linkText}</a>`;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static createMessage(options: HTMLMessageOptions): string {
    const {
      title,
      subtitle,
      content,
      footer,
      useEmojis = true,
      useColors = true,
      compact = false,
    } = options;

    let message = "";

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if (title) {
      message += this.createHeader(title, subtitle, useEmojis);
      message += "\n\n";
    }

    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
    message += content;

    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ —Ñ—É—Ç–µ—Ä–æ–º
    if (footer) {
      const separator = compact ? "‚îÄ" : "‚îÅ";
      message += `\n\n${separator.repeat(30)}\n`;
      message += footer;
    }

    return message;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞
   */
  static createAnalysisResult(
    title: string,
    summary: string,
    details: string[],
    recommendations?: string[],
  ): string {
    let message = this.createHeader(title);
    message += "\n\n";

    // –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    message += this.createInfoBlock(summary, "üìä");
    message += "\n\n";

    // –î–µ—Ç–∞–ª–∏
    if (details.length > 0) {
      message += this.createList({
        items: details,
        title: "üìã –î–µ—Ç–∞–ª–∏:",
        type: "bullet",
      });
      message += "\n";
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendations && recommendations.length > 0) {
      message += this.createList({
        items: recommendations,
        title: "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        type: "bullet",
      });
    }

    return message;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  static createFinancialInfo(
    title: string,
    amount: string,
    currency: string,
    details: Record<string, string>,
    trend?: "up" | "down" | "stable",
  ): string {
    let message = this.createHeader(title);
    message += "\n\n";

    // –°—É–º–º–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
    const trendEmoji = trend === "up" ? "üìà" : trend === "down" ? "üìâ" : "‚û°Ô∏è";
    message += `${trendEmoji} <b>${amount} ${currency}</b>\n\n`;

    // –î–µ—Ç–∞–ª–∏
    Object.entries(details).forEach(([key, value]) => {
      message += `<b>${key}:</b> ${value}\n`;
    });

    return message;
  }

  /**
   * –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
   */
  static createTaskInfo(
    title: string,
    description: string,
    priority: "high" | "medium" | "low",
    deadline?: string,
    assignee?: string,
  ): string {
    const priorityEmojis = {
      high: "üî¥",
      medium: "üü°",
      low: "üü¢",
    };

    let message = this.createHeader(title);
    message += "\n\n";

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    message += `${priorityEmojis[priority]} <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priority}\n`;

    // –û–ø–∏—Å–∞–Ω–∏–µ
    message += `üìù ${description}\n\n`;

    // –î–µ–¥–ª–∞–π–Ω
    if (deadline) {
      message += `‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> ${deadline}\n`;
    }

    // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    if (assignee) {
      message += `üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${assignee}\n`;
    }

    return message;
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export function createSimpleMessage(content: string, title?: string): string {
  return HTMLMessageBuilder.createMessage({ content, title });
}

export function createInfoMessage(content: string, title?: string): string {
  return HTMLMessageBuilder.createMessage({
    content: HTMLMessageBuilder.createInfoBlock(content),
    title,
  });
}

export function createErrorMessage(content: string, title?: string): string {
  return HTMLMessageBuilder.createMessage({
    content: HTMLMessageBuilder.createErrorBlock(content),
    title,
  });
}

export function createSuccessMessage(content: string, title?: string): string {
  return HTMLMessageBuilder.createMessage({
    content: HTMLMessageBuilder.createSuccessBlock(content),
    title,
  });
}
