import type { Context } from "grammy";

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–µ
 */

export interface AnimationOptions {
  /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  updateInterval?: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  maxDuration?: number;
  /** –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ */
  finalText?: string;
}

/**
 * –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
 */
export class MessageAnimation {
  private messageId: number | null = null;
  private chatId: number | null = null;
  private animationInterval: NodeJS.Timeout | null = null;
  private startTime: number = 0;
  private isActive: boolean = false;

  // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏ - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public readonly animations = {
    processing: ["ü§î –î—É–º–∞—é...", "ü§î –î—É–º–∞—é.", "ü§î –î—É–º–∞—é..", "ü§î –î—É–º–∞—é..."],
    thinking: [
      "üí≠ –†–∞–∑–º—ã—à–ª—è—é...",
      "üí≠ –†–∞–∑–º—ã—à–ª—è—é.",
      "üí≠ –†–∞–∑–º—ã—à–ª—è—é..",
      "üí≠ –†–∞–∑–º—ã—à–ª—è—é...",
    ],
    working: ["‚ö° –†–∞–±–æ—Ç–∞—é...", "‚ö° –†–∞–±–æ—Ç–∞—é.", "‚ö° –†–∞–±–æ—Ç–∞—é..", "‚ö° –†–∞–±–æ—Ç–∞—é..."],
    agents: [
      "‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
      "‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é.",
      "‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..",
      "‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...",
    ],
    fast: [
      "‚ö° –°–µ–∫—É–Ω–¥–æ—á–∫—É...",
      "‚ö° –°–µ–∫—É–Ω–¥–æ—á–∫—É.",
      "‚ö° –°–µ–∫—É–Ω–¥–æ—á–∫—É..",
      "‚ö° –°–µ–∫—É–Ω–¥–æ—á–∫—É...",
    ],
  };

  /**
   * –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async start(
    ctx: Context,
    type: keyof typeof MessageAnimation.prototype.animations = "processing",
    options: AnimationOptions = {},
  ): Promise<void> {
    if (this.isActive) {
      await this.stop();
    }

    const {
      updateInterval = 1000,
      maxDuration = 30000, // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
    } = options;

    this.chatId = ctx.chat?.id || null;
    this.startTime = Date.now();
    this.isActive = true;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const initialText = this.animations[type][0];
      if (!initialText) {
        throw new Error(`Invalid animation type: ${type}`);
      }
      const initialMessage = await ctx.reply(initialText);
      this.messageId = initialMessage.message_id;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      let frameIndex = 0;
      this.animationInterval = setInterval(async () => {
        if (!this.isActive || !this.messageId || !this.chatId) {
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if (Date.now() - this.startTime > maxDuration) {
          await this.stop();
          return;
        }

        try {
          frameIndex = (frameIndex + 1) % this.animations[type].length;
          const frameText = this.animations[type][frameIndex];
          if (frameText) {
            await ctx.api.editMessageText(
              this.chatId,
              this.messageId,
              frameText,
            );
          }
        } catch (error) {
          console.warn("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏:", error);
          // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      }, updateInterval);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏:", error);
      this.isActive = false;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –∑–∞–º–µ–Ω–∞ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  async stop(finalText?: string): Promise<void> {
    if (!this.isActive) {
      return;
    }

    this.isActive = false;

    if (this.animationInterval) {
      clearInterval(this.animationInterval);
      this.animationInterval = null;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (finalText && this.messageId && this.chatId) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        console.log(`üéØ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${finalText}`);
      } catch (error) {
        console.warn("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:", error);
      }
    }

    this.messageId = null;
    this.chatId = null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  getMessageId(): number | null {
    return this.messageId;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  getChatId(): number | null {
    return this.chatId;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  isRunning(): boolean {
    return this.isActive;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
 */
export function createMessageAnimation(): MessageAnimation {
  return new MessageAnimation();
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function quickAnimation(
  ctx: Context,
  type: keyof MessageAnimation["animations"] = "fast",
  duration: number = 2000,
): Promise<MessageAnimation> {
  const animation = createMessageAnimation();
  await animation.start(ctx, type, {
    updateInterval: 500,
    maxDuration: duration,
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
  setTimeout(() => {
    animation.stop();
  }, duration);

  return animation;
}

/**
 * –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function agentsAnimation(
  ctx: Context,
  maxDuration: number = 30000,
): Promise<MessageAnimation> {
  const animation = createMessageAnimation();
  await animation.start(ctx, "agents", {
    updateInterval: 1200,
    maxDuration,
  });
  return animation;
}
