/**
 * üöÄ Fast Response System - –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
 *
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */

export interface FastResponse {
  shouldSendFast: boolean;
  fastResponse: string;
  needsFullProcessing: boolean;
  processingType?: "agents" | "simple" | "none";
}

export interface FastResponseRule {
  pattern: string | RegExp;
  response: string;
  confidence: number;
  needsFullProcessing: boolean;
}

export class FastResponseSystem {
  private rules: FastResponseRule[] = [];

  constructor() {
    this.initializeDefaultRules();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  private initializeDefaultRules() {
    this.rules = [
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      {
        pattern:
          /^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|hi|hello|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä)/i,
        response: "üëã –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        confidence: 0.9,
        needsFullProcessing: false,
      },
      // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
      {
        pattern: /^(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|thanks|thank you|—Å–µ–Ω–∫—Å)/i,
        response: "üôè –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å!",
        confidence: 0.95,
        needsFullProcessing: false,
      },
      // –ü—Ä–æ—â–∞–Ω–∏—è
      {
        pattern: /^(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–¥–æ –≤—Å—Ç—Ä–µ—á–∏|bye|goodbye|—É–≤–∏–¥–∏–º—Å—è)/i,
        response: "üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞!",
        confidence: 0.9,
        needsFullProcessing: false,
      },
      // –°—Ç–∞—Ç—É—Å/—Å–æ—Å—Ç–æ—è–Ω–∏–µ
      {
        pattern: /^(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –∂–∏–∑–Ω—å|how are you|how is it going)/i,
        response: "üòä –°–ø–∞—Å–∏–±–æ, —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º!",
        confidence: 0.8,
        needsFullProcessing: false,
      },
      // –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
      {
        pattern: /^(—á—Ç–æ —É–º–µ–µ—à—å|—á—Ç–æ –º–æ–∂–µ—à—å|–ø–æ–º–æ—â—å|help|–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)/i,
        response:
          "ü§ñ –Ø —É–º–µ—é:\n‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!",
        confidence: 0.85,
        needsFullProcessing: false,
      },
      // –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      {
        pattern: /^(–¥–∞|–Ω–µ—Ç|–æ–∫|—Ö–æ—Ä–æ—à–æ|–ø–æ–Ω—è—Ç–Ω–æ|—è—Å–Ω–æ|—Å–æ–≥–ª–∞—Å–µ–Ω|–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω)/i,
        response: "üëç –ü–æ–Ω—è–ª!",
        confidence: 0.7,
        needsFullProcessing: false,
      },
      // –í–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏
      {
        pattern: /^(–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å|–≤—Ä–µ–º—è|what time|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏)/i,
        response: `üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleTimeString("ru-RU")}`,
        confidence: 0.9,
        needsFullProcessing: false,
      },
      // –í–æ–ø—Ä–æ—Å—ã –æ –¥–∞—Ç–µ
      {
        pattern: /(–∫–∞–∫–∞—è –¥–∞—Ç–∞|—Å–µ–≥–æ–¥–Ω—è|–∫–∞–∫–æ–µ —á–∏—Å–ª–æ|what date|today)/i,
        response: `üìÖ –°–µ–≥–æ–¥–Ω—è: ${new Date().toLocaleDateString("ru-RU", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
        })}`,
        confidence: 0.9,
        needsFullProcessing: false,
      },
    ];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  analyzeMessage(message: string): FastResponse {
    const normalizedMessage = message.trim().toLowerCase();

    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
    for (const rule of this.rules) {
      if (typeof rule.pattern === "string") {
        if (normalizedMessage.includes(rule.pattern.toLowerCase())) {
          return {
            shouldSendFast: true,
            fastResponse: rule.response,
            needsFullProcessing: rule.needsFullProcessing,
            processingType: rule.needsFullProcessing ? "agents" : "simple",
          };
        }
      } else {
        if (rule.pattern.test(normalizedMessage)) {
          return {
            shouldSendFast: true,
            fastResponse: rule.response,
            needsFullProcessing: rule.needsFullProcessing,
            processingType: rule.needsFullProcessing ? "agents" : "simple",
          };
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∞–≤–∏–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    return {
      shouldSendFast: false,
      fastResponse: "",
      needsFullProcessing: true,
      processingType: "agents",
    };
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
   */
  addRule(rule: FastResponseRule) {
    this.rules.push(rule);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
   */
  removeRule(pattern: string | RegExp) {
    this.rules = this.rules.filter((rule) => {
      if (typeof rule.pattern === "string" && typeof pattern === "string") {
        return rule.pattern !== pattern;
      }
      if (typeof rule.pattern === "object" && typeof pattern === "object") {
        return rule.pattern.source !== pattern.source;
      }
      return true;
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∞–≤–∏–ª
   */
  getStats() {
    return {
      totalRules: this.rules.length,
      rules: this.rules.map((rule) => ({
        pattern:
          typeof rule.pattern === "string" ? rule.pattern : rule.pattern.source,
        confidence: rule.confidence,
        needsFullProcessing: rule.needsFullProcessing,
      })),
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const fastResponseSystem = new FastResponseSystem();
