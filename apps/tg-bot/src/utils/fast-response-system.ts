/**
 * üöÄ Fast Response System - –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ AI
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
 * –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ AI, –Ω–∏–∫–∞–∫–∏—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
 */

export interface FastResponse {
  shouldSendFast: boolean;
  fastResponse: string;
  needsFullProcessing: boolean;
  processingType?: "agents" | "simple" | "none";
}

export interface AIAnalysisResult {
  shouldSendFast: boolean;
  fastResponse: string;
  needsFullProcessing: boolean;
  confidence: number;
  reasoning: string;
}

export class FastResponseSystem {
  private apiClient: any;

  constructor(apiClient: any) {
    this.apiClient = apiClient;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async analyzeMessage(message: string): Promise<FastResponse> {
    try {
      console.log(`ü§ñ AI analyzing message for fast response: "${message}"`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const aiResult = await this.analyzeMessageWithAI(message);

      if (aiResult.shouldSendFast) {
        console.log(`‚ö° AI decided to send fast response: ${aiResult.reasoning}`);
        
        return {
          shouldSendFast: true,
          fastResponse: aiResult.fastResponse,
          needsFullProcessing: aiResult.needsFullProcessing,
          processingType: aiResult.needsFullProcessing ? "agents" : "simple",
        };
      }

      // –ï—Å–ª–∏ AI —Ä–µ—à–∏–ª –Ω–µ –¥–∞–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
      console.log(`ü§î AI decided not to send fast response: ${aiResult.reasoning}`);
      
      return {
        shouldSendFast: false,
        fastResponse: "",
        needsFullProcessing: true,
        processingType: "agents",
      };

    } catch (error) {
      console.error("Error in AI analysis for fast response:", error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ AI, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      return {
        shouldSendFast: false,
        fastResponse: "",
        needsFullProcessing: true,
        processingType: "agents",
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
   */
  private async analyzeMessageWithAI(message: string): Promise<AIAnalysisResult> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ AI
      const result = await this.apiClient.messages.analyzeMessageForFastResponse.mutate({
        text: message,
        context: "telegram_bot_fast_response"
      });

      if (result.success) {
        return {
          shouldSendFast: result.shouldSendFast,
          fastResponse: result.fastResponse || "",
          needsFullProcessing: result.needsFullProcessing,
          confidence: result.confidence || 0.8,
          reasoning: result.reasoning || "AI analysis completed"
        };
      }

      // Fallback –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      throw new Error("AI analysis API returned unsuccessful result");

    } catch (error) {
      console.error("Error calling AI analysis API:", error);
      
      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      return {
        shouldSendFast: false,
        fastResponse: "",
        needsFullProcessing: true,
        confidence: 0.0,
        reasoning: "AI analysis failed, falling back to full processing"
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
   */
  async getStats() {
    try {
      const result = await this.apiClient.analytics.getFastResponseStats.mutate();
      
      if (result.success) {
        return {
          aiAnalysisCount: result.totalAnalyses,
          fastResponseCount: result.fastResponsesSent,
          fullProcessingCount: result.fullProcessingCount,
          averageConfidence: result.averageConfidence,
          lastUpdated: result.lastUpdated
        };
      }

      return {
        aiAnalysisCount: 0,
        fastResponseCount: 0,
        fullProcessingCount: 0,
        averageConfidence: 0,
        lastUpdated: new Date().toISOString()
      };

    } catch (error) {
      console.error("Error getting AI stats:", error);
      return {
        aiAnalysisCount: 0,
        fastResponseCount: 0,
        fullProcessingCount: 0,
        averageConfidence: 0,
        lastUpdated: new Date().toISOString()
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å API –∫–ª–∏–µ–Ω—Ç–æ–º
