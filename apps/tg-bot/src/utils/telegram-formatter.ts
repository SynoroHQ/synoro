/**
 * –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

export interface TelegramFormattingOptions {
  useEmojis?: boolean;
  useHTML?: boolean;
  addSeparators?: boolean;
  maxLineLength?: number;
  addContextInfo?: boolean;
  useColors?: boolean;
}

/**
 * –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram
 */
export const OPTIMAL_TELEGRAM_FORMATTING: Required<TelegramFormattingOptions> =
  {
    useEmojis: true,
    useHTML: true,
    addSeparators: false,
    maxLineLength: 100,
    addContextInfo: false,
    useColors: false,
  };

export interface FormattedMessage {
  text: string;
  parse_mode?: "HTML";
  disable_web_page_preview?: boolean;
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ Telegram
 */
export class TelegramFormatter {
  private defaultOptions: Required<TelegramFormattingOptions> = {
    useEmojis: true,
    useHTML: true,
    addSeparators: false, // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤–∏–¥–∞
    maxLineLength: 100, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    addContextInfo: false,
    useColors: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  };


  constructor(options?: Partial<TelegramFormattingOptions>) {
    this.defaultOptions = { ...this.defaultOptions, ...options };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
   */
  private getRegex(pattern: string, flags?: string): RegExp {
    return new RegExp(pattern, flags);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è Telegram
   */
  formatAgentResponse(
    response: string,
    options?: Partial<TelegramFormattingOptions>,
  ): FormattedMessage {
    const opts = { ...this.defaultOptions, ...options };

    if (!response || response.trim().length === 0) {
      return { text: "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç" };
    }

    let formattedText = response.trim();

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (opts.useEmojis) {
      formattedText = this.addSimpleEmojis(formattedText);
    }

    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞)
    if (opts.useHTML) {
      formattedText = this.applyHTMLFormatting(formattedText, opts);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫
    formattedText = this.wrapLongLines(formattedText, opts.maxLineLength);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º HTML –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML —Ä–µ–∂–∏–º
    if (opts.useHTML && !this.validateHTMLTags(formattedText)) {
      console.warn(
        "HTML validation failed in TelegramFormatter, falling back to plain text",
      );
      formattedText = formattedText.replace(/<[^>]*>/g, ""); // –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
    }

    return {
      text: formattedText,
      parse_mode: opts.useHTML ? "HTML" : undefined,
      disable_web_page_preview: true,
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç HTML —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ
   */
  private validateHTMLTags(text: string): boolean {
    const tagStack: string[] = [];
    const tagRegex = /<\/?([a-zA-Z][a-zA-Z0-9]*)[^>]*>/g;
    let match;

    while ((match = tagRegex.exec(text)) !== null) {
      const fullTag = match[0];
      const tagName = match[1].toLowerCase();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏
      if (fullTag.endsWith("/>")) {
        continue;
      }

      if (fullTag.startsWith("</")) {
        // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
        if (
          tagStack.length === 0 ||
          tagStack[tagStack.length - 1] !== tagName
        ) {
          console.warn(
            `HTML validation failed: unmatched closing tag </${tagName}>`,
          );
          return false;
        }
        tagStack.pop();
      } else {
        // –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
        tagStack.push(tagName);
      }
    }

    if (tagStack.length > 0) {
      console.warn(
        `HTML validation failed: unclosed tags: ${tagStack.join(", ")}`,
      );
      return false;
    }

    return true;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private addSimpleEmojis(text: string): string {
    const lowerText = text.toLowerCase();

    // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —ç–º–æ–¥–∑–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if (lowerText.includes("–æ—à–∏–±–∫–∞") || lowerText.includes("error")) {
      return `‚ùå ${text}`;
    }

    if (lowerText.includes("—É—Å–ø–µ—à–Ω–æ") || lowerText.includes("–≥–æ—Ç–æ–≤–æ")) {
      return `‚úÖ ${text}`;
    }

    if (lowerText.includes("–≤–Ω–∏–º–∞–Ω–∏–µ") || lowerText.includes("–≤–∞–∂–Ω–æ")) {
      return `‚ö†Ô∏è ${text}`;
    }

    if (lowerText.includes("–∞–Ω–∞–ª–∏–∑") || lowerText.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")) {
      return `üìä ${text}`;
    }

    if (lowerText.includes("—Ñ–∏–Ω–∞–Ω—Å") || lowerText.includes("–¥–µ–Ω—å–≥–∏")) {
      return `üí∞ ${text}`;
    }

    if (lowerText.includes("–æ—Ç–≤–µ—Ç") || lowerText.includes("—Ä–µ—à–µ–Ω–∏–µ")) {
      return `üí° ${text}`;
    }

    if (lowerText.includes("–≤–æ–ø—Ä–æ—Å") || lowerText.includes("question")) {
      return `‚ùì ${text}`;
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
   */
  private formatTextStructure(
    text: string,
    options: Required<TelegramFormattingOptions>,
  ): string {
    let formatted = text;

    // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ)
    formatted = this.formatHeaders(formatted);

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    formatted = this.formatSimpleLists(formatted);

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted = this.addLineBreaks(formatted);

    return formatted;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ HTML
   */
  private formatHeaders(text: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å # (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML)
    const headerRegex = this.getRegex("^#{1,6}\\s+(.+)$", "gm");
    text = text.replace(headerRegex, (match, content) => {
      const level = match.match(/^#+/)?.[0].length || 1;
      return `<b>${content.trim()}</b>`;
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å ** (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
    const boldRegex = this.getRegex("^\\*\\*(.+)\\*\\*$", "gm");
    text = text.replace(boldRegex, "<b>$1</b>");

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–∫–æ—Ä–æ—Ç–∫–∏–µ, –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ)
    const shortLineRegex = this.getRegex("^(.{3,50})$", "gm");
    const punctuationRegex = this.getRegex("[.!?]");
    text = text.replace(shortLineRegex, (match) => {
      const trimmed = match.trim();
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      if (
        trimmed.length < 50 &&
        (trimmed.endsWith(":") || !punctuationRegex.test(trimmed))
      ) {
        return `<b>${trimmed}</b>`;
      }
      return match;
    });

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∫–∏ –≤ HTML
   */
  private formatSimpleLists(text: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^[-*‚Ä¢]\s+(.+)$/gm, "‚Ä¢ $1");

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^(\d+)\.\s+(.+)$/gm, "$1. $2");

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^(\s+)[-*‚Ä¢]\s+(.+)$/gm, "$1  ‚Ä¢ $2");

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –±–ª–æ–∫–∏ –≤ HTML
   */
  private formatCodeBlocks(text: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ —Å ```
    const codeBlockRegex = this.getRegex("```(\\w+)?\\n([\\s\\S]*?)```", "g");
    text = text.replace(codeBlockRegex, (match, lang, code) => {
      const trimmedCode = code.trim();
      return `<pre><code>${trimmedCode}</code></pre>`;
    });

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–æ–¥ —Å `
    const inlineCodeRegex = this.getRegex("`([^`]+)`", "g");
    text = text.replace(inlineCodeRegex, "<code>$1</code>");

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–æ–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ç–µ–≥–∞—Ö)
    const codePatterns = [
      this.getRegex("\\b([A-Z_]{3,})\\b", "g"), // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
      this.getRegex("\\b([a-z]+\\([^)]*\\))", "g"), // –§—É–Ω–∫—Ü–∏–∏
      this.getRegex("\\b(\\d+\\.\\d+\\.\\d+)\\b", "g"), // –í–µ—Ä—Å–∏–∏
      this.getRegex("\\b([A-Z][a-z]+[A-Z][a-z]+)\\b", "g"), // CamelCase
    ];

    const openTagRegex = this.getRegex("<[^>]*>", "g");
    const closeTagRegex = this.getRegex("</[^>]*>", "g");

    codePatterns.forEach((pattern) => {
      text = text.replace(pattern, (match, group) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ HTML —Ç–µ–≥–æ–≤
        const beforeMatch = text.substring(0, text.indexOf(match));
        const openTags = (beforeMatch.match(openTagRegex) || []).length;
        const closeTags = (beforeMatch.match(closeTagRegex) || []).length;

        // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞, –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        if (openTags > closeTags) {
          return match;
        }

        return `<code>${group}</code>`;
      });
    });

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—ã –≤ HTML
   */
  private formatQuotes(text: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Ü–∏—Ç–∞—Ç —Å >
    text = text.replace(/^>\s*(.+)$/gm, "<i>$1</i>");

    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    text = text.replace(/"([^"]+)"/g, '<i>"$1"</i>');

    return text;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
   */
  private addLineBreaks(text: string): string {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    text = text.replace(/(<b>[^<]+<\/b>)/g, "$1\n");

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = text.replace(/\n\n\n+/g, "\n\n");

    return text;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
   */
  private addSeparators(text: string): string {
    const lines = text.split("\n");
    const formattedLines: string[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line) {
        formattedLines.push(line);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      if (line && line.includes("<b>") && line.length < 50) {
        formattedLines.push("‚îÄ".repeat(Math.min(line.length, 30)));
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
      if (
        i < lines.length - 1 &&
        line &&
        (line.includes("üí°") ||
          line.includes("üìä") ||
          line.includes("üìÖ") ||
          line.includes("üí∞"))
      ) {
        formattedLines.push("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
      }
    }

    return formattedLines.join("\n");
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  private addContextInfo(text: string): string {
    const timestamp = new Date().toLocaleString("ru-RU", {
      timeZone: "Europe/Moscow",
      hour12: false,
    });

    return `${text}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìÖ ${timestamp}`;
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
   */
  private wrapLongLines(text: string, maxLength: number): string {
    const lines = text.split("\n");
    const wrappedLines: string[] = [];

    for (const line of lines) {
      if (line.length <= maxLength) {
        wrappedLines.push(line);
      } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        const words = line.split(" ");
        let currentLine = "";

        for (const word of words) {
          if ((currentLine + word).length <= maxLength) {
            currentLine += (currentLine ? " " : "") + word;
          } else {
            if (currentLine) wrappedLines.push(currentLine);
            currentLine = word;
          }
        }

        if (currentLine) wrappedLines.push(currentLine);
      }
    }

    return wrappedLines.join("\n");
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private applyHTMLFormatting(
    text: string,
    options: Required<TelegramFormattingOptions>,
  ): string {
    let formatted = text;

    // 1. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
    formatted = this.escapeHtmlCharacters(formatted);

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –±–ª–æ–∫–∏ (–¥–æ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–π)
    formatted = this.formatCodeBlocks(formatted);

    // 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
    formatted = this.formatTextStructure(formatted, options);

    // 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    formatted = this.formatImportantParts(formatted);

    // 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    formatted = this.formatTechnicalTerms(formatted);

    // 6. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—ã
    formatted = this.formatQuotes(formatted);

    // 7. –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (options.useColors) {
      formatted = this.addColorHighlighting(formatted);
    }

    // 8. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    formatted = this.formatLinks(formatted);

    // 9. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    formatted = this.formatTables(formatted);

    // 10. –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (options.addSeparators) {
      formatted = this.addSeparators(formatted);
    }

    // 11. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (options.addContextInfo) {
      formatted = this.addContextInfo(formatted);
    }

    return formatted;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private escapeHtmlCharacters(text: string): string {
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ HTML —Ç–µ–≥–æ–≤
    const parts = text.split(/(<[^>]+>)/g);
    return parts
      .map((part, index) => {
        // –ï—Å–ª–∏ —ç—Ç–æ HTML —Ç–µ–≥ (–Ω–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã), –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        if (index % 2 === 1) {
          return part;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
        return part
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;");
      })
      .join("");
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
   */
  private formatImportantParts(text: string): string {
    // –í—ã–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∂–∏—Ä–Ω—ã–º
    const importantWords = [
      "–≤–∞–∂–Ω–æ",
      "–≤–Ω–∏–º–∞–Ω–∏–µ",
      "—Å—Ä–æ—á–Ω–æ",
      "–∫—Ä–∏—Ç–∏—á–Ω–æ",
      "—É—Å–ø–µ—à–Ω–æ",
      "–æ—à–∏–±–∫–∞",
      "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
    ];

    importantWords.forEach((word) => {
      const regex = new RegExp(`\\b${word}\\b`, "gi");
      text = text.replace(regex, `<b>${word}</b>`);
    });

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
   */
  private formatTechnicalTerms(text: string): string {
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    const techTerms = [
      "API",
      "HTTP",
      "JSON",
      "XML",
      "SQL",
      "HTML",
      "CSS",
      "JavaScript",
      "TypeScript",
      "React",
      "Node.js",
      "Python",
      "Java",
      "C++",
      "Git",
      "Docker",
      "Kubernetes",
    ];

    techTerms.forEach((term) => {
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ—Ä–º–∏–Ω–µ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      const escapedTerm = term.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      const regex = new RegExp(`\\b${escapedTerm}\\b`, "g");

      // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω –µ—â—ë –Ω–µ –æ–±—ë—Ä–Ω—É—Ç –≤ <code> —Ç–µ–≥
      text = text.replace(regex, (match) => {
        if (text.includes(`<code>${match}</code>`)) {
          return match;
        }
        return `<code>${match}</code>`;
      });
    });

    return text;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
   */
  private addColorHighlighting(text: string): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Telegram)
    // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
    text = text.replace(/‚úÖ/g, "üü¢");
    // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
    text = text.replace(/‚ùå/g, "üî¥");
    // –ñ—ë–ª—Ç—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    text = text.replace(/‚ö†Ô∏è/g, "üü°");
    // –°–∏–Ω–∏–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    text = text.replace(/‚ÑπÔ∏è/g, "üîµ");

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏
   */
  private formatLinks(text: string): string {
    // –ò—â–µ–º URL –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö –≤ HTML —Å—Å—ã–ª–∫–∏
    const urlRegex = /(https?:\/\/[^\s<>]+)/g;
    return text.replace(urlRegex, (url) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ URL —É–∂–µ –≤–Ω—É—Ç—Ä–∏ HTML —Ç–µ–≥–æ–≤
      const beforeUrl = text.substring(0, text.indexOf(url));
      const openTags = (beforeUrl.match(/<[^>]*>/g) || []).length;
      const closeTags = (beforeUrl.match(/<\/[^>]*>/g) || []).length;

      // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–∞, –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
      if (openTags > closeTags) {
        return url;
      }

      return `<a href="${url}">${url}</a>`;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
   */
  private formatTables(text: string): string {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const lines = text.split("\n");
    const formattedLines: string[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
      if (line && line.includes("|")) {
        const cells = line.split("|").map((cell) => cell.trim());
        const formattedCells = cells.map((cell) => `<code>${cell}</code>`);
        formattedLines.push(formattedCells.join(" | "));
      } else {
        formattedLines.push(line ?? "");
      }
    }

    return formattedLines.join("\n");
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
   */
  formatAgentSpecificResponse(
    response: string,
    agentType: string,
    options?: Partial<TelegramFormattingOptions>,
  ): FormattedMessage {
    const agentOptions = this.getAgentSpecificOptions(agentType);
    const mergedOptions = {
      ...this.defaultOptions,
      ...agentOptions,
      ...options,
    };

    return this.formatAgentResponse(response, mergedOptions);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
   */
  private getAgentSpecificOptions(
    agentType: string,
  ): Partial<TelegramFormattingOptions> {
    switch (agentType.toLowerCase()) {
      case "qa":
      case "qa-specialist":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: false,
          useColors: true,
        };

      case "financial":
      case "financial-advisor":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: true,
          useColors: true,
        };

      case "analytics":
      case "data-analyst":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: true,
          useColors: true,
        };

      case "event":
      case "event-processor":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: true,
          useColors: true,
        };

      case "task":
      case "task-manager":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: false,
          useColors: true,
        };

      default:
        return {};
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export const telegramFormatter = new TelegramFormatter();

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function formatForTelegram(
  response: string,
  options?: Partial<TelegramFormattingOptions>,
): FormattedMessage {
  return telegramFormatter.formatAgentResponse(response, options);
}

export function formatAgentResponse(
  response: string,
  agentType: string,
  options?: Partial<TelegramFormattingOptions>,
): FormattedMessage {
  return telegramFormatter.formatAgentSpecificResponse(
    response,
    agentType,
    options,
  );
}
