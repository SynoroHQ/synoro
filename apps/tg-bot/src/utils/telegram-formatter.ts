/**
 * –°–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram
 * –î–µ–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∏ —É–¥–æ–±–Ω—ã–º–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */

export interface TelegramFormattingOptions {
  useEmojis?: boolean;
  useHTML?: boolean;
  addSeparators?: boolean;
  maxLineLength?: number;
  addContextInfo?: boolean;
  useColors?: boolean;
}

export interface FormattedMessage {
  text: string;
  parse_mode?: "HTML";
  disable_web_page_preview?: boolean;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ Telegram
 */
export class TelegramFormatter {
  private defaultOptions: Required<TelegramFormattingOptions> = {
    useEmojis: true,
    useHTML: true,
    addSeparators: true,
    maxLineLength: 80,
    addContextInfo: false,
    useColors: true,
  };

  constructor(options?: Partial<TelegramFormattingOptions>) {
    this.defaultOptions = { ...this.defaultOptions, ...options };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è Telegram
   */
  formatAgentResponse(
    response: string,
    options?: Partial<TelegramFormattingOptions>,
  ): FormattedMessage {
    const opts = { ...this.defaultOptions, ...options };

    if (!response || response.trim().length === 0) {
      return { text: "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç" };
    }

    let formattedText = response.trim();

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (opts.useEmojis) {
      formattedText = this.addContentEmojis(formattedText);
    }

    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤–∫–ª—é—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞)
    if (opts.useHTML) {
      formattedText = this.applyHTMLFormatting(formattedText, opts);
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    if (opts.addSeparators) {
      formattedText = this.addSeparators(formattedText);
    }

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (opts.addContextInfo) {
      formattedText = this.addContextInfo(formattedText);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫
    formattedText = this.wrapLongLines(formattedText, opts.maxLineLength);

    return {
      text: formattedText,
      parse_mode: "HTML",
      disable_web_page_preview: true,
    };
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private addContentEmojis(text: string): string {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const lowerText = text.toLowerCase();

    if (
      lowerText.includes("–æ—à–∏–±–∫–∞") ||
      lowerText.includes("error") ||
      lowerText.includes("–Ω–µ —É–¥–∞–ª–æ—Å—å")
    ) {
      return `‚ùå ${text}`;
    }

    if (
      lowerText.includes("—É—Å–ø–µ—à–Ω–æ") ||
      lowerText.includes("–≥–æ—Ç–æ–≤–æ") ||
      lowerText.includes("–∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    ) {
      return `‚úÖ ${text}`;
    }

    if (
      lowerText.includes("–≤–Ω–∏–º–∞–Ω–∏–µ") ||
      lowerText.includes("warning") ||
      lowerText.includes("–≤–∞–∂–Ω–æ")
    ) {
      return `‚ö†Ô∏è ${text}`;
    }

    if (
      lowerText.includes("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") ||
      lowerText.includes("info") ||
      lowerText.includes("—Å–ø—Ä–∞–≤–∫–∞")
    ) {
      return `‚ÑπÔ∏è ${text}`;
    }

    if (lowerText.includes("–≤–æ–ø—Ä–æ—Å") || lowerText.includes("question")) {
      return `‚ùì ${text}`;
    }

    if (
      lowerText.includes("–æ—Ç–≤–µ—Ç") ||
      lowerText.includes("answer") ||
      lowerText.includes("—Ä–µ—à–µ–Ω–∏–µ")
    ) {
      return `üí° ${text}`;
    }

    if (
      lowerText.includes("–∞–Ω–∞–ª–∏–∑") ||
      lowerText.includes("analysis") ||
      lowerText.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ) {
      return `üìä ${text}`;
    }

    if (lowerText.includes("—Å–æ–±—ã—Ç–∏–µ") || lowerText.includes("event")) {
      return `üìÖ ${text}`;
    }

    if (
      lowerText.includes("—Ñ–∏–Ω–∞–Ω—Å") ||
      lowerText.includes("–¥–µ–Ω—å–≥–∏") ||
      lowerText.includes("–±—é–¥–∂–µ—Ç")
    ) {
      return `üí∞ ${text}`;
    }

    if (lowerText.includes("–∑–∞–¥–∞—á–∞") || lowerText.includes("task")) {
      return `üìã ${text}`;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    return `üí¨ ${text}`;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
   */
  private formatTextStructure(
    text: string,
    options: Required<TelegramFormattingOptions>,
  ): string {
    let formatted = text;

    // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    formatted = this.formatHeaders(formatted);

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    formatted = this.formatLists(formatted);

    // 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    formatted = this.formatCodeBlocks(formatted);

    // 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—ã
    formatted = this.formatQuotes(formatted);

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted = this.addLineBreaks(formatted);

    return formatted;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏
   */
  private formatHeaders(text: string): string {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    return text.replace(/^(.{3,50})$/gm, (match) => {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      if (match.length < 50 && (match.endsWith(":") || !/[.!?]/.test(match))) {
        return `<b>${match}</b>`;
      }
      return match;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∫–∏
   */
  private formatLists(text: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^[-*‚Ä¢]\s+/gm, "‚Ä¢ ");

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^(\d+)\.\s+/gm, "$1. ");

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞
   */
  private formatCodeBlocks(text: string): string {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∫–æ–¥ (—Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã)
    // –ù–æ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ–±—ë—Ä–Ω—É—Ç—ã –≤ <code> —Ç–µ–≥–∏
    const codePatterns = [
      /\b([A-Z_]{3,})\b/g, // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
      /\b([a-z]+\([^)]*\))/g, // –§—É–Ω–∫—Ü–∏–∏
      /\b(\d+\.\d+\.\d+)\b/g, // –í–µ—Ä—Å–∏–∏
      /\b([A-Z][a-z]+[A-Z][a-z]+)\b/g, // CamelCase
    ];

    codePatterns.forEach((pattern) => {
      text = text.replace(pattern, (match, group) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—ë—Ä–Ω—É—Ç –ª–∏ —É–∂–µ –≤ <code> —Ç–µ–≥
        if (text.includes(`<code>${group}</code>`)) {
          return match;
        }
        return `<code>${group}</code>`;
      });
    });

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—ã
   */
  private formatQuotes(text: string): string {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    return text.replace(/"([^"]+)"/g, '<i>"$1"</i>');
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
   */
  private addLineBreaks(text: string): string {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    text = text.replace(/(<b>[^<]+<\/b>)/g, "$1\n");

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
    text = text.replace(/\n\n+/g, "\n\n");

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–æ–≤
    text = text.replace(/(‚Ä¢ [^\n]+)\n/g, "$1\n\n");

    return text;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
   */
  private addSeparators(text: string): string {
    const lines = text.split("\n");
    const formattedLines: string[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line) {
        formattedLines.push(line);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      if (line && line.includes("<b>") && line.length < 50) {
        formattedLines.push("‚îÄ".repeat(Math.min(line.length, 30)));
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
      if (
        i < lines.length - 1 &&
        line &&
        (line.includes("üí°") ||
          line.includes("üìä") ||
          line.includes("üìÖ") ||
          line.includes("üí∞"))
      ) {
        formattedLines.push("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
      }
    }

    return formattedLines.join("\n");
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  private addContextInfo(text: string): string {
    const timestamp = new Date().toLocaleString("ru-RU", {
      timeZone: "Europe/Moscow",
      hour12: false,
    });

    return `${text}\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüìÖ ${timestamp}`;
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
   */
  private wrapLongLines(text: string, maxLength: number): string {
    const lines = text.split("\n");
    const wrappedLines: string[] = [];

    for (const line of lines) {
      if (line.length <= maxLength) {
        wrappedLines.push(line);
      } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        const words = line.split(" ");
        let currentLine = "";

        for (const word of words) {
          if ((currentLine + word).length <= maxLength) {
            currentLine += (currentLine ? " " : "") + word;
          } else {
            if (currentLine) wrappedLines.push(currentLine);
            currentLine = word;
          }
        }

        if (currentLine) wrappedLines.push(currentLine);
      }
    }

    return wrappedLines.join("\n");
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private applyHTMLFormatting(
    text: string,
    options: Required<TelegramFormattingOptions>,
  ): string {
    let formatted = text;

    // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
    formatted = this.formatTextStructure(formatted, options);

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
    formatted = this.formatImportantParts(formatted);

    // 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    formatted = this.formatTechnicalTerms(formatted);

    // 4. –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (options.useColors) {
      formatted = this.addColorHighlighting(formatted);
    }

    // 5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    formatted = this.formatLinks(formatted);

    // 6. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
    formatted = this.formatTables(formatted);

    return formatted;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
   */
  private formatImportantParts(text: string): string {
    // –í—ã–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∂–∏—Ä–Ω—ã–º
    const importantWords = [
      "–≤–∞–∂–Ω–æ",
      "–≤–Ω–∏–º–∞–Ω–∏–µ",
      "—Å—Ä–æ—á–Ω–æ",
      "–∫—Ä–∏—Ç–∏—á–Ω–æ",
      "—É—Å–ø–µ—à–Ω–æ",
      "–æ—à–∏–±–∫–∞",
      "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
    ];

    importantWords.forEach((word) => {
      const regex = new RegExp(`\\b${word}\\b`, "gi");
      text = text.replace(regex, `<b>${word}</b>`);
    });

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
   */
  private formatTechnicalTerms(text: string): string {
    // –í—ã–¥–µ–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
    const techTerms = [
      "API",
      "HTTP",
      "JSON",
      "XML",
      "SQL",
      "HTML",
      "CSS",
      "JavaScript",
      "TypeScript",
      "React",
      "Node.js",
      "Python",
      "Java",
      "C++",
      "Git",
      "Docker",
      "Kubernetes",
    ];

    techTerms.forEach((term) => {
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ—Ä–º–∏–Ω–µ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      const escapedTerm = term.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      const regex = new RegExp(`\\b${escapedTerm}\\b`, "g");

      // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω –µ—â—ë –Ω–µ –æ–±—ë—Ä–Ω—É—Ç –≤ <code> —Ç–µ–≥
      text = text.replace(regex, (match) => {
        if (text.includes(`<code>${match}</code>`)) {
          return match;
        }
        return `<code>${match}</code>`;
      });
    });

    return text;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
   */
  private addColorHighlighting(text: string): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Telegram)
    // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —É—Å–ø–µ—Ö–∞
    text = text.replace(/‚úÖ/g, "üü¢");
    // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—à–∏–±–æ–∫
    text = text.replace(/‚ùå/g, "üî¥");
    // –ñ—ë–ª—Ç—ã–π –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    text = text.replace(/‚ö†Ô∏è/g, "üü°");
    // –°–∏–Ω–∏–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    text = text.replace(/‚ÑπÔ∏è/g, "üîµ");

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏
   */
  private formatLinks(text: string): string {
    // –ò—â–µ–º URL –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö –≤ HTML —Å—Å—ã–ª–∫–∏
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    return text.replace(urlRegex, '<a href="$1">$1</a>');
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
   */
  private formatTables(text: string): string {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const lines = text.split("\n");
    const formattedLines: string[] = [];

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];

      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
      if (line.includes("|")) {
        const cells = line.split("|").map((cell) => cell.trim());
        const formattedCells = cells.map((cell) => `<code>${cell}</code>`);
        formattedLines.push(formattedCells.join(" | "));
      } else {
        formattedLines.push(line);
      }
    }

    return formattedLines.join("\n");
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
   */
  formatAgentSpecificResponse(
    response: string,
    agentType: string,
    options?: Partial<TelegramFormattingOptions>,
  ): FormattedMessage {
    const agentOptions = this.getAgentSpecificOptions(agentType);
    const mergedOptions = {
      ...this.defaultOptions,
      ...agentOptions,
      ...options,
    };

    return this.formatAgentResponse(response, mergedOptions);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
   */
  private getAgentSpecificOptions(
    agentType: string,
  ): Partial<TelegramFormattingOptions> {
    switch (agentType.toLowerCase()) {
      case "qa":
      case "qa-specialist":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: false,
          useColors: true,
        };

      case "financial":
      case "financial-advisor":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: true,
          useColors: true,
        };

      case "analytics":
      case "data-analyst":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: true,
          useColors: true,
        };

      case "event":
      case "event-processor":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: true,
          useColors: true,
        };

      case "task":
      case "task-manager":
        return {
          useEmojis: true,
          addSeparators: true,
          addContextInfo: false,
          useColors: true,
        };

      default:
        return {};
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export const telegramFormatter = new TelegramFormatter();

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function formatForTelegram(
  response: string,
  options?: Partial<TelegramFormattingOptions>,
): FormattedMessage {
  return telegramFormatter.formatAgentResponse(response, options);
}

export function formatAgentResponse(
  response: string,
  agentType: string,
  options?: Partial<TelegramFormattingOptions>,
): FormattedMessage {
  return telegramFormatter.formatAgentSpecificResponse(
    response,
    agentType,
    options,
  );
}
