/**
 * –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */

export interface TelegramFormattingOptions {
  useEmojis?: boolean;
  useHTML?: boolean;
  maxLineLength?: number;
}

export interface FormattedMessage {
  text: string;
  parse_mode?: "HTML";
  disable_web_page_preview?: boolean;
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ Telegram
 */
export class TelegramFormatter {
  private defaultOptions: Required<TelegramFormattingOptions> = {
    useEmojis: true,
    useHTML: true,
    maxLineLength: 80,
  };

  constructor(options?: Partial<TelegramFormattingOptions>) {
    this.defaultOptions = { ...this.defaultOptions, ...options };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è Telegram
   */
  formatAgentResponse(
    response: string,
    options?: Partial<TelegramFormattingOptions>,
  ): FormattedMessage {
    const opts = { ...this.defaultOptions, ...options };

    if (!response || response.trim().length === 0) {
      return { text: "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç" };
    }

    let formattedText = response.trim();

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (opts.useEmojis) {
      formattedText = this.addSimpleEmojis(formattedText);
    }

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
    formattedText = this.formatTextStructure(formattedText, opts);

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫
    formattedText = this.wrapLongLines(formattedText, opts.maxLineLength);

    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (opts.useHTML) {
      formattedText = this.applyHTMLFormatting(formattedText);
    }

    return {
      text: formattedText,
      parse_mode: opts.useHTML ? "HTML" : undefined,
      disable_web_page_preview: true,
    };
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private addSimpleEmojis(text: string): string {
    const lowerText = text.toLowerCase();

    // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —ç–º–æ–¥–∑–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if (lowerText.includes("–æ—à–∏–±–∫–∞") || lowerText.includes("error")) {
      return `‚ùå ${text}`;
    }

    if (lowerText.includes("—É—Å–ø–µ—à–Ω–æ") || lowerText.includes("–≥–æ—Ç–æ–≤–æ")) {
      return `‚úÖ ${text}`;
    }

    if (lowerText.includes("–≤–Ω–∏–º–∞–Ω–∏–µ") || lowerText.includes("–≤–∞–∂–Ω–æ")) {
      return `‚ö†Ô∏è ${text}`;
    }

    if (lowerText.includes("–∞–Ω–∞–ª–∏–∑") || lowerText.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")) {
      return `üìä ${text}`;
    }

    if (lowerText.includes("—Ñ–∏–Ω–∞–Ω—Å") || lowerText.includes("–¥–µ–Ω—å–≥–∏")) {
      return `üí∞ ${text}`;
    }

    if (lowerText.includes("–æ—Ç–≤–µ—Ç") || lowerText.includes("—Ä–µ—à–µ–Ω–∏–µ")) {
      return `üí° ${text}`;
    }

    if (lowerText.includes("–≤–æ–ø—Ä–æ—Å") || lowerText.includes("question")) {
      return `‚ùì ${text}`;
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
   */
  private formatTextStructure(
    text: string,
    options: Required<TelegramFormattingOptions>,
  ): string {
    let formatted = text;

    // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ)
    formatted = this.formatSimpleHeaders(formatted);

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    formatted = this.formatSimpleLists(formatted);

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    formatted = this.addSimpleLineBreaks(formatted);

    return formatted;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
   */
  private formatSimpleHeaders(text: string): string {
    // –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    return text.replace(/^(.{3,40})$/gm, (match) => {
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      if (
        match.length < 40 &&
        match.endsWith(":") &&
        !/[.!?]/.test(match) &&
        !match.includes("\n")
      ) {
        return `<b>${match}</b>`;
      }
      return match;
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–∫–∏
   */
  private formatSimpleLists(text: string): string {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^[-*‚Ä¢]\s+/gm, "‚Ä¢ ");

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = text.replace(/^(\d+)\.\s+/gm, "$1. ");

    return text;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
   */
  private addSimpleLineBreaks(text: string): string {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    text = text.replace(/(<b>[^<]+<\/b>)/g, "$1\n");

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = text.replace(/\n\n\n+/g, "\n\n");

    return text;
  }

  /**
   * –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
   */
  private wrapLongLines(text: string, maxLength: number): string {
    const lines = text.split("\n");
    const wrappedLines: string[] = [];

    for (const line of lines) {
      if (line.length <= maxLength) {
        wrappedLines.push(line);
      } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        const words = line.split(" ");
        let currentLine = "";

        for (const word of words) {
          if ((currentLine + word).length <= maxLength) {
            currentLine += (currentLine ? " " : "") + word;
          } else {
            if (currentLine) wrappedLines.push(currentLine);
            currentLine = word;
          }
        }

        if (currentLine) wrappedLines.push(currentLine);
      }
    }

    return wrappedLines.join("\n");
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
   */
  private applyHTMLFormatting(text: string): string {
    let formatted = text;

    // 1. –ó–∞–º–µ–Ω—è–µ–º Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ HTML (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    formatted = formatted.replace(/\*\*([^*]+)\*\*/g, "<b>$1</b>");

    // 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
    formatted = this.formatHTMLCode(formatted);

    // 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    formatted = this.formatHTMLLinks(formatted);

    // 4. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
    formatted = this.escapeHTML(formatted);

    return formatted;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ HTML
   */
  private formatHTMLCode(text: string): string {
    // –ò–Ω–ª–∞–π–Ω –∫–æ–¥
    text = text.replace(/`([^`]+)`/g, "<code>$1</code>");

    // –ë–ª–æ–∫–∏ –∫–æ–¥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    text = text.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
      return `<pre><code>${code.trim()}</code></pre>`;
    });

    return text;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ HTML
   */
  private formatHTMLLinks(text: string): string {
    // –ü—Ä–æ—Å—Ç—ã–µ URL —Å—Å—ã–ª–∫–∏
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    text = text.replace(urlRegex, '<a href="$1">$1</a>');

    return text;
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã
   */
  private escapeHTML(text: string): string {
    // –ó–∞—â–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const parts = text.split(/(<[^>]+>)/g);

    return parts
      .map((part, index) => {
        // –ï—Å–ª–∏ —ç—Ç–æ HTML —Ç–µ–≥ (—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã), –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        if (index % 2 === 1) {
          return part;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–º–ø–µ—Ä—Å–∞–Ω–¥
        return part.replace(/&/g, "&amp;");
      })
      .join("");
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
   */
  formatAgentSpecificResponse(
    response: string,
    agentType: string,
    options?: Partial<TelegramFormattingOptions>,
  ): FormattedMessage {
    const agentOptions = this.getAgentSpecificOptions(agentType);
    const mergedOptions = {
      ...this.defaultOptions,
      ...agentOptions,
      ...options,
    };

    return this.formatAgentResponse(response, mergedOptions);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
   */
  private getAgentSpecificOptions(
    agentType: string,
  ): Partial<TelegramFormattingOptions> {
    switch (agentType.toLowerCase()) {
      case "qa":
      case "qa-specialist":
        return {
          useEmojis: true,
          useHTML: true,
        };

      case "financial":
      case "financial-advisor":
        return {
          useEmojis: true,
          useHTML: true,
        };

      case "analytics":
      case "data-analyst":
        return {
          useEmojis: true,
          useHTML: true,
        };

      case "event":
      case "event-processor":
        return {
          useEmojis: true,
          useHTML: true,
        };

      case "task":
      case "task-manager":
        return {
          useEmojis: true,
          useHTML: true,
        };

      default:
        return {};
    }
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export const telegramFormatter = new TelegramFormatter();

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function formatForTelegram(
  response: string,
  options?: Partial<TelegramFormattingOptions>,
): FormattedMessage {
  return telegramFormatter.formatAgentResponse(response, options);
}

export function formatAgentResponse(
  response: string,
  agentType: string,
  options?: Partial<TelegramFormattingOptions>,
): FormattedMessage {
  return telegramFormatter.formatAgentSpecificResponse(
    response,
    agentType,
    options,
  );
}
