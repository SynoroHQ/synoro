import type { Context } from "grammy";

import { env } from "../env";
import {
  processTextMessage,
  transcribeAudio,
} from "../services/message-service";
import {
  createMessageContext,
  downloadTelegramFile,
  getUserIdentifier,
} from "../utils/telegram-utils";

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function handleAudio(ctx: Context): Promise<void> {
  const fileId = ctx.message?.voice?.file_id ?? ctx.message?.audio?.file_id;
  if (!fileId) {
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞—É–¥–∏–æ.");
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  await ctx.replyWithChatAction("typing");

  try {
    const messageContext = createMessageContext(ctx);

    console.log(
      `üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${messageContext.chatId}`,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const maxDurationSec = env.TG_AUDIO_MAX_DURATION_SEC ?? 120; // 2 min default
    const durationSec =
      (ctx.message?.voice as any)?.duration ??
      (ctx.message?.audio as any)?.duration;

    if (typeof durationSec === "number" && durationSec > maxDurationSec) {
      await ctx.reply(
        `–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∞—É–¥–∏–æ (${durationSec}s). –õ–∏–º–∏—Ç ‚Äî ${maxDurationSec}s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–æ—Ä–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å—å.`,
      );
      return;
    }

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const { buffer, filename } = await downloadTelegramFile(ctx, fileId);

    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ API
    const transcriptionResult = await transcribeAudio(
      buffer,
      filename,
      messageContext,
    );

    if (!transcriptionResult.success) {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.");
      return;
    }
    if (!transcriptionResult.text.trim()) {
      await ctx.reply("–ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
      return;
    }

    let text = transcriptionResult.text.trim();

    // Enforce max text length for downstream processing
    const maxTextLength = env.TG_MESSAGE_MAX_LENGTH ?? 3000;
    if (text.length > maxTextLength) {
      text = text.slice(0, maxTextLength);
    }

    console.log(
      `üéØ –ê—É–¥–∏–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: "${text.slice(0, 50)}${text.length > 50 ? "..." : ""}"`,
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ API
    const result = await processTextMessage(text, {
      ...messageContext,
      metadata: {
        ...messageContext.metadata,
        transcribedFrom: "audio",
        originalFilename: filename,
        duration: durationSec,
      },
    });

    if (!result.success) {
      const prefix = `–†–∞—Å–ø–æ–∑–Ω–∞–ª: "${text}"\n\n`;
      const MAX_TG_MESSAGE = 4096;
      const room = MAX_TG_MESSAGE - prefix.length;
      const body =
        result.response.length > room
          ? result.response.slice(0, room - 1) + "‚Ä¶"
          : result.response;
      await ctx.reply(prefix + body);
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    const prefix = `–†–∞—Å–ø–æ–∑–Ω–∞–ª: "${text}"\n\n`;
    const MAX_TG_MESSAGE = 4096;
    const room = MAX_TG_MESSAGE - prefix.length;
    const body =
      result.response.length > room
        ? result.response.slice(0, room - 1) + "‚Ä¶"
        : result.response;
    await ctx.reply(prefix + body);
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log(
      `‚úÖ –ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Ç–∏–ø=${result.messageType?.type}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=${result.relevance?.relevant}`,
    );
  } catch (error) {
    console.error("Audio handling error:", error);

    if (error instanceof Error && error.message.includes("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")) {
      await ctx.reply(error.message);
    } else {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.");
    }
  }
}
