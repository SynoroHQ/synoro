import type { Context } from "telegraf";
import { SmartReminderAgent } from "@synoro/api/lib/agents/smart-reminder-agent";
import { ReminderService } from "@synoro/api/lib/services/reminder-service";
import type { ReminderFilters } from "@synoro/db";

const reminderAgent = new SmartReminderAgent();
const reminderService = new ReminderService();

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
 */
export class ReminderHandler {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  static async handleCreateReminder(ctx: Context, text: string, userId: string) {
    try {
      const result = await reminderAgent.createReminderFromText({
        text,
        userId,
        timezone: "Europe/Moscow", // TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      });

      const reminder = result.reminder;
      const timeStr = reminder.reminderTime.toLocaleString("ru-RU", {
        timeZone: "Europe/Moscow",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });

      let message = "‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n\n";
      message += `üìù **${reminder.title}**\n`;
      if (reminder.description) {
        message += `üìÑ ${reminder.description}\n`;
      }
      message += `‚è∞ ${timeStr}\n`;
      message += `üè∑Ô∏è –¢–∏–ø: ${ReminderHandler.getTypeEmoji(reminder.type)} ${ReminderHandler.getTypeName(reminder.type)}\n`;
      message += `‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${ReminderHandler.getPriorityEmoji(reminder.priority)} ${ReminderHandler.getPriorityName(reminder.priority)}\n`;

      if (result.confidence < 0.8) {
        message += `\n‚ö†Ô∏è –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(result.confidence * 100)}%`;
      }

      if (result.suggestions.length > 0) {
        message += "\n\nüí° **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n";
        result.suggestions.slice(0, 3).forEach((suggestion, index) => {
          message += `${index + 1}. ${suggestion.suggestion}\n`;
        });
      }

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: `edit_reminder_${reminder.id}` },
              { text: "‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_reminder_${reminder.id}` },
            ],
            [
              { text: "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data: "list_reminders" },
            ],
          ],
        },
      });

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", error);
      await ctx.reply(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üí° –ü—Ä–∏–º–µ—Ä—ã", callback_data: "reminder_examples" }],
            ],
          },
        }
      );
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async handleListReminders(ctx: Context, userId: string, page = 0) {
    try {
      const limit = 5;
      const offset = page * limit;

      const filters: ReminderFilters = {
        status: ["pending", "active", "snoozed"],
      };

      const reminders = await reminderService.getUserReminders(
        userId,
        filters,
        { field: "reminderTime", direction: "asc" },
        limit,
        offset
      );

      if (reminders.length === 0) {
        await ctx.reply(
          page === 0 
            ? "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ:\n‚Ä¢ \"–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É\"\n‚Ä¢ \"–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\"\n‚Ä¢ \"–°–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã\""
            : "üì≠ –ë–æ–ª—å—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.",
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üí° –ü—Ä–∏–º–µ—Ä—ã", callback_data: "reminder_examples" }],
              ],
            },
          }
        );
        return;
      }

      let message = `üìã **–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** (—Å—Ç—Ä. ${page + 1}):\n\n`;

      reminders.forEach((reminder, index) => {
        const timeStr = reminder.reminderTime.toLocaleString("ru-RU", {
          timeZone: "Europe/Moscow",
          month: "short",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        });

        const statusEmoji = ReminderHandler.getStatusEmoji(reminder.status);
        const priorityEmoji = ReminderHandler.getPriorityEmoji(reminder.priority);

        message += `${offset + index + 1}. ${statusEmoji} **${reminder.title}**\n`;
        message += `   ‚è∞ ${timeStr} ${priorityEmoji}\n\n`;
      });

      const keyboard = [];
      
      // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const navRow = [];
      if (page > 0) {
        navRow.push({ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: `list_reminders_${page - 1}` });
      }
      if (reminders.length === limit) {
        navRow.push({ text: "‚û°Ô∏è –î–∞–ª–µ–µ", callback_data: `list_reminders_${page + 1}` });
      }
      if (navRow.length > 0) {
        keyboard.push(navRow);
      }

      // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      keyboard.push([
        { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "reminder_stats" },
        { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data: `list_reminders_${page}` },
      ]);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: { inline_keyboard: keyboard },
      });

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", error);
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.");
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   */
  static async handleReminderStats(ctx: Context, userId: string) {
    try {
      const stats = await reminderService.getUserReminderStats(userId);

      let message = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n\n";
      message += `üìù –í—Å–µ–≥–æ: ${stats.total}\n`;
      message += `‚è≥ –û–∂–∏–¥–∞—é—Ç: ${stats.pending}\n`;
      message += `üîî –ê–∫—Ç–∏–≤–Ω—ã–µ: ${stats.active}\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${stats.completed}\n`;
      
      if (stats.overdue > 0) {
        message += `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${stats.overdue}\n`;
      }

      await ctx.reply(message, {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data: "list_reminders" }],
          ],
        },
      });

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.");
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  static async handleReminderExamples(ctx: Context) {
    const message = "üí° **–ü—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n\n" +
      "üïê **–í—Ä–µ–º—è:**\n" +
      `‚Ä¢ "–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"\n` +
      `‚Ä¢ "–í—Å—Ç—Ä–µ—á–∞ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"\n` +
      `‚Ä¢ "–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9 —É—Ç—Ä–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ"\n\n` +
      
      "üìÖ **–°–æ–±—ã—Ç–∏—è:**\n" +
      `‚Ä¢ "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –º–∞–º—ã 15 –º–∞—Ä—Ç–∞"\n` +
      `‚Ä¢ "–û—Ç–ø—É—Å–∫ —Å 1 –ø–æ 10 –∏—é–ª—è"\n\n` +
      
      "üìã **–ó–∞–¥–∞—á–∏:**\n" +
      `‚Ä¢ "–°–¥–∞—Ç—å –æ—Ç—á–µ—Ç –¥–æ –ø—è—Ç–Ω–∏—Ü—ã"\n` +
      `‚Ä¢ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤–µ—á–µ—Ä–æ–º"\n` +
      `‚Ä¢ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"\n\n` +
      
      "üîÑ **–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è:**\n" +
      `‚Ä¢ "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –ø—Ä–∏–Ω—è—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã"\n` +
      `‚Ä¢ "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –ø–ª–∞–Ω–µ—Ä–∫–∞"\n\n` +
      
      "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å!";

    await ctx.reply(message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data: "list_reminders" }],
        ],
      },
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
   */
  static async handleCallback(ctx: Context, data: string, userId: string) {
    try {
      if (data === "list_reminders") {
        await ReminderHandler.handleListReminders(ctx, userId);
      } else if (data.startsWith("list_reminders_")) {
        const page = Number.parseInt(data.split("_")[2]) || 0;
        await ReminderHandler.handleListReminders(ctx, userId, page);
      } else if (data === "reminder_stats") {
        await ReminderHandler.handleReminderStats(ctx, userId);
      } else if (data === "reminder_examples") {
        await ReminderHandler.handleReminderExamples(ctx);
      } else if (data.startsWith("delete_reminder_")) {
        const reminderId = data.split("_")[2];
        await ReminderHandler.handleDeleteReminder(ctx, reminderId, userId);
      } else if (data.startsWith("edit_reminder_")) {
        const reminderId = data.split("_")[2];
        await ReminderHandler.handleEditReminder(ctx, reminderId, userId);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
   */
  private static async handleDeleteReminder(ctx: Context, reminderId: string, userId: string) {
    try {
      const success = await reminderService.deleteReminder(reminderId, userId);
      
      if (success) {
        await ctx.reply("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data: "list_reminders" }],
            ],
          },
        });
      } else {
        await ctx.reply("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", error);
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.");
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private static async handleEditReminder(ctx: Context, reminderId: string, userId: string) {
    await ctx.reply(
      "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n\n" +
      "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data: `delete_reminder_${reminderId}` },
              { text: "üìã –ö —Å–ø–∏—Å–∫—É", callback_data: "list_reminders" },
            ],
          ],
        },
      }
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π

  private static getTypeEmoji(type: string): string {
    const emojis: Record<string, string> = {
      task: "üìã",
      event: "üìÖ",
      deadline: "‚è∞",
      meeting: "ü§ù",
      call: "üìû",
      follow_up: "üîÑ",
      custom: "üìå",
    };
    return emojis[type] || "üìå";
  }

  private static getTypeName(type: string): string {
    const names: Record<string, string> = {
      task: "–ó–∞–¥–∞—á–∞",
      event: "–°–æ–±—ã—Ç–∏–µ",
      deadline: "–î–µ–¥–ª–∞–π–Ω",
      meeting: "–í—Å—Ç—Ä–µ—á–∞",
      call: "–ó–≤–æ–Ω–æ–∫",
      follow_up: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
      custom: "–î—Ä—É–≥–æ–µ",
    };
    return names[type] || "–î—Ä—É–≥–æ–µ";
  }

  private static getPriorityEmoji(priority: string): string {
    const emojis: Record<string, string> = {
      low: "üü¢",
      medium: "üü°",
      high: "üü†",
      urgent: "üî¥",
    };
    return emojis[priority] || "üü°";
  }

  private static getPriorityName(priority: string): string {
    const names: Record<string, string> = {
      low: "–ù–∏–∑–∫–∏–π",
      medium: "–°—Ä–µ–¥–Ω–∏–π",
      high: "–í—ã—Å–æ–∫–∏–π",
      urgent: "–°—Ä–æ—á–Ω—ã–π",
    };
    return names[priority] || "–°—Ä–µ–¥–Ω–∏–π";
  }

  private static getStatusEmoji(status: string): string {
    const emojis: Record<string, string> = {
      pending: "‚è≥",
      active: "üîî",
      completed: "‚úÖ",
      cancelled: "‚ùå",
      snoozed: "üò¥",
    };
    return emojis[status] || "‚è≥";
  }
}
