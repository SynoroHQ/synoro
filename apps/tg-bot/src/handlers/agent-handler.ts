import type { Context } from "grammy";

import { apiClient } from "../api/client";
import { DEFAULT_AGENT_OPTIONS } from "../config/agents";
import { telegramFastResponseService } from "../services/fast-response-service";
import { formatForTelegram } from "../utils/telegram-formatter";
import {
  createMessageContext,
  getUserIdentifier,
} from "../utils/telegram-utils";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /agents - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–≥–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º
 */
export async function handleAgentsCommand(ctx: Context): Promise<void> {
  try {
    await ctx.replyWithChatAction("typing");

    const messageContext = createMessageContext(ctx);
    console.log(
      `ü§ñ –ö–æ–º–∞–Ω–¥–∞ /agents –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${ctx.chat?.id}`,
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
    const agentStats =
      await apiClient.messages.processMessageAgents.getAgentStatsForBot.query();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const fastResponseStats = await telegramFastResponseService.getStats();

    const response = `ü§ñ *–ê–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Synoro AI –∞–∫—Ç–∏–≤–Ω–∞*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*
‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: ${agentStats.totalAgents}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: ${agentStats.agentList.join(", ")}
‚Ä¢ *–ê–≥–µ–Ω—Ç –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤* ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ *–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π* ‚Äî –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
‚Ä¢ *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º (Q&A)* ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏—Å—Ç–µ–º–µ –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö
‚Ä¢ *–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π* ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫–∏, –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏ –∏ –¥—Ä.
‚Ä¢ *–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞—á* ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ *–û—Ü–µ–Ω—â–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞* ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤

‚ö° *–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:*
‚Ä¢ –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤: ${fastResponseStats.agentStats.cacheSize}
‚Ä¢ –ò–ò-—à–∞–±–ª–æ–Ω—ã: ${fastResponseStats.agentStats.templatesCount}
‚Ä¢ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${fastResponseStats.agentStats.totalUsage}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${fastResponseStats.agentStats.averageResponseTime}–º—Å

‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ

üìù *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏!`;

    const formattedMessage = formatForTelegram(response, {
      useEmojis: true,
      useHTML: true,
      addSeparators: true,
    });

    await ctx.reply(formattedMessage.text, {
      parse_mode: formattedMessage.parse_mode,
    });
  } catch (error) {
    console.error("Error in agents command:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö.");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /agent_test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function handleAgentTestCommand(ctx: Context): Promise<void> {
  try {
    await ctx.replyWithChatAction("typing");

    const messageContext = createMessageContext(ctx);
    console.log(
      `üß™ –ö–æ–º–∞–Ω–¥–∞ /agent_test –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${ctx.chat?.id}`,
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const testMessage =
      "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏";

    const testMessageFormatted = formatForTelegram(
      'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "' +
        testMessage +
        '"',
      {
        useEmojis: true,
        useHTML: true,
        addSeparators: true,
      },
    );

    await ctx.reply(testMessageFormatted.text, {
      parse_mode: testMessageFormatted.parse_mode,
    });

    const result =
      await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
        {
          text: testMessage,
          channel: "telegram",
          messageId: messageContext.messageId,
          telegramUserId: messageContext.userId,
          agentOptions: {
            ...DEFAULT_AGENT_OPTIONS,
            forceAgentMode: true,
          },
          metadata: {
            testMode: true,
            timestamp: new Date().toISOString(),
          },
        },
      );

    let response = "üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:*\n\n";
    response += `üìù *–û—Ç–≤–µ—Ç:*\n${result.response}\n\n`;

    if (result.agentMetadata) {
      response += "ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:*\n";
      response += `‚Ä¢ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.agentMetadata.processingMode}\n`;
      response += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–≥–µ–Ω—Ç—ã: ${result.agentMetadata.agentsUsed.join(" ‚Üí ")}\n`;
      response += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: ${result.agentMetadata.totalSteps}\n`;
      response += `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: ${(result.agentMetadata.qualityScore * 100).toFixed(1)}%\n`;
      response += `‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.agentMetadata.processingTime}–º—Å\n\n`;
    }

    response += "üìä *–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:*\n";
    response += `‚Ä¢ –¢–∏–ø: ${result.messageType.type}\n`;
    response += `‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.messageType.confidence * 100).toFixed(1)}%\n`;
    response += `‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${result.relevance.relevant ? "–î–∞" : "–ù–µ—Ç"}\n`;

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const MAX_TG_MESSAGE = 4096;
    if (response.length > MAX_TG_MESSAGE) {
      const parts = [];
      let currentPart = "";
      const lines = response.split("\n");

      for (const line of lines) {
        if (currentPart.length + line.length + 1 > MAX_TG_MESSAGE) {
          parts.push(currentPart);
          currentPart = line;
        } else {
          currentPart += (currentPart ? "\n" : "") + line;
        }
      }
      if (currentPart) parts.push(currentPart);

      for (const part of parts) {
        const formattedPart = formatForTelegram(part, {
          useEmojis: true,
          useHTML: true,
          addSeparators: true,
        });
        await ctx.reply(formattedPart.text, {
          parse_mode: formattedPart.parse_mode,
        });
      }
    } else {
      const formattedResponse = formatForTelegram(response, {
        useEmojis: true,
        useHTML: true,
        addSeparators: true,
      });
      await ctx.reply(formattedResponse.text, {
        parse_mode: formattedResponse.parse_mode,
      });
    }
  } catch (error) {
    console.error("Error in agent test command:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: " +
        (error instanceof Error ? error.message : "Unknown error"),
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fast_test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
 */
export async function handleFastTestCommand(ctx: Context): Promise<void> {
  try {
    await ctx.replyWithChatAction("typing");

    const messageContext = createMessageContext(ctx);
    console.log(
      `‚ö° –ö–æ–º–∞–Ω–¥–∞ /fast_test –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${ctx.chat?.id}`,
    );

    const testMessages = [
      "–ü—Ä–∏–≤–µ—Ç!",
      "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å",
      "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
      "–ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?",
      "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞?",
      "–ü–æ–∫–∞!",
    ];

    let response = "‚ö° *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:*\n\n";

    for (const testMessage of testMessages) {
      const startTime = Date.now();
      const fastResponse = await telegramFastResponseService.analyzeMessage(
        testMessage,
        messageContext.userId,
        messageContext.messageId
      );
      const responseTime = Date.now() - startTime;

      response += `üìù *–ó–∞–ø—Ä–æ—Å:* "${testMessage}"\n`;
      response += `ü§ñ *–û—Ç–≤–µ—Ç:* ${fastResponse.fastResponse || "–ù–µ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"}\n`;
      response += `‚ö° *–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç:* ${fastResponse.shouldSendFast ? "–î–∞" : "–ù–µ—Ç"}\n`;
      response += `üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* ${(fastResponse.confidence * 100).toFixed(1)}%\n`;
      response += `‚è±Ô∏è *–í—Ä–µ–º—è:* ${responseTime}–º—Å\n`;
      response += `üîÑ *–ù—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:* ${fastResponse.needsFullProcessing ? "–î–∞" : "–ù–µ—Ç"}\n\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await telegramFastResponseService.getStats();
    response += "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞:*\n";
    response += `‚Ä¢ –ö—ç—à –æ—Ç–≤–µ—Ç–æ–≤: ${stats.agentStats.cacheSize}\n`;
    response += `‚Ä¢ –ò–ò-—à–∞–±–ª–æ–Ω—ã: ${stats.agentStats.templatesCount}\n`;
    response += `‚Ä¢ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${stats.agentStats.totalUsage}\n`;
    response += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${stats.agentStats.averageResponseTime}–º—Å\n`;

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const MAX_TG_MESSAGE = 4096;
    if (response.length > MAX_TG_MESSAGE) {
      const parts = [];
      let currentPart = "";
      const lines = response.split("\n");

      for (const line of lines) {
        if (currentPart.length + line.length + 1 > MAX_TG_MESSAGE) {
          parts.push(currentPart);
          currentPart = line;
        } else {
          currentPart += (currentPart ? "\n" : "") + line;
        }
      }
      if (currentPart) parts.push(currentPart);

      for (const part of parts) {
        const formattedPart = formatForTelegram(part, {
          useEmojis: true,
          useHTML: true,
          addSeparators: true,
        });
        await ctx.reply(formattedPart.text, {
          parse_mode: formattedPart.parse_mode,
        });
      }
    } else {
      const formattedResponse = formatForTelegram(response, {
        useEmojis: true,
        useHTML: true,
        addSeparators: true,
      });
      await ctx.reply(formattedResponse.text, {
        parse_mode: formattedResponse.parse_mode,
      });
    }
  } catch (error) {
    console.error("Error in fast test command:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: " +
        (error instanceof Error ? error.message : "Unknown error"),
    );
  }
}
