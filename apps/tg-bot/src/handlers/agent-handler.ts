import type { Context } from "grammy";

import { apiClient } from "../api/client";
import {
  createMessageContext,
  getUserIdentifier,
} from "../utils/telegram-utils";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /agents - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∞–≥–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º
 */
export async function handleAgentsCommand(ctx: Context): Promise<void> {
  try {
    await ctx.replyWithChatAction("typing");

    const messageContext = createMessageContext(ctx);
    console.log(`ü§ñ –ö–æ–º–∞–Ω–¥–∞ /agents –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${messageContext.chatId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
    const agentStats = await apiClient.messages.processMessageAgents.getAgentStatsForBot.query();

    const response = `ü§ñ *–ê–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Synoro AI –∞–∫—Ç–∏–≤–Ω–∞*

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*
‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: ${agentStats.totalAgents}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: ${agentStats.agentList.join(", ")}

üîç *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:

‚Ä¢ *Router Agent* - –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
‚Ä¢ *Q&A Specialist* - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏—Å—Ç–µ–º–µ –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö
‚Ä¢ *Event Processor* - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è (–ø–æ–∫—É–ø–∫–∏, –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏)
‚Ä¢ *Task Orchestrator* - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ *Quality Evaluator* - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤

‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ

üìù *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏!`;

    await ctx.reply(response, { parse_mode: "Markdown" });

  } catch (error) {
    console.error("Error in agents command:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö.");
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /agent_test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function handleAgentTestCommand(ctx: Context): Promise<void> {
  try {
    await ctx.replyWithChatAction("typing");
    
    const messageContext = createMessageContext(ctx);
    console.log(`üß™ –ö–æ–º–∞–Ω–¥–∞ /agent_test –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${messageContext.chatId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const testMessage = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏";
    
    await ctx.reply("üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...*\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: \"" + testMessage + "\"", 
      { parse_mode: "Markdown" });

    const result = await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate({
      text: testMessage,
      channel: "telegram",
      chatId: messageContext.chatId,
      messageId: messageContext.messageId,
      telegramUserId: messageContext.userId,
      agentOptions: {
        forceAgentMode: true,
        useQualityControl: true,
        maxQualityIterations: 2,
        targetQuality: 0.8,
      },
      metadata: {
        testMode: true,
        timestamp: new Date().toISOString(),
      },
    });

    let response = `üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:*\n\n`;
    response += `üìù *–û—Ç–≤–µ—Ç:*\n${result.response}\n\n`;
    
    if (result.agentMetadata) {
      response += `ü§ñ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ:*\n`;
      response += `‚Ä¢ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.agentMetadata.processingMode}\n`;
      response += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–≥–µ–Ω—Ç—ã: ${result.agentMetadata.agentsUsed.join(" ‚Üí ")}\n`;
      response += `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: ${result.agentMetadata.totalSteps}\n`;
      response += `‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞: ${(result.agentMetadata.qualityScore * 100).toFixed(1)}%\n`;
      response += `‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.agentMetadata.processingTime}–º—Å\n\n`;
    }
    
    response += `üìä *–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:*\n`;
    response += `‚Ä¢ –¢–∏–ø: ${result.messageType.type}\n`;
    response += `‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.messageType.confidence * 100).toFixed(1)}%\n`;
    response += `‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${result.relevance.relevant ? "–î–∞" : "–ù–µ—Ç"}\n`;

    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const MAX_TG_MESSAGE = 4096;
    if (response.length > MAX_TG_MESSAGE) {
      const parts = [];
      let currentPart = "";
      const lines = response.split("\n");
      
      for (const line of lines) {
        if (currentPart.length + line.length + 1 > MAX_TG_MESSAGE) {
          parts.push(currentPart);
          currentPart = line;
        } else {
          currentPart += (currentPart ? "\n" : "") + line;
        }
      }
      if (currentPart) parts.push(currentPart);
      
      for (const part of parts) {
        await ctx.reply(part, { parse_mode: "Markdown" });
      }
    } else {
      await ctx.reply(response, { parse_mode: "Markdown" });
    }

  } catch (error) {
    console.error("Error in agent test command:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: " + 
      (error instanceof Error ? error.message : "Unknown error"));
  }
}
