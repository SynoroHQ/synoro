import type { Context } from "grammy";

import { apiClient } from "../api/client";
import { telegramFastResponseService } from "../services/fast-response-service";
import {
  createErrorMessage,
  createSuccessMessage,
} from "../utils/html-message-builder";
import { formatForTelegram } from "../utils/telegram-formatter";
import { createMessageContext } from "../utils/telegram-utils";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FastResponseAgent
 */
export async function handleSmartText(ctx: Context) {
  try {
    const messageContext = createMessageContext(ctx);
    const text = ctx.message?.text || "";

    console.log(
      `ü§ñ Smart text handler: "${text}" from user ${messageContext.userId}`,
    );

    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FastResponseAgent
    const fastResponse = await telegramFastResponseService.analyzeMessage(
      text,
      messageContext.userId,
      messageContext.messageId
    );

    if (fastResponse.shouldSendFast) {
      console.log(`‚ö° Fast response triggered: ${fastResponse.processingType} (confidence: ${fastResponse.confidence})`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
      await ctx.reply(fastResponse.fastResponse);

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë –≤ —Ñ–æ–Ω–µ
      if (fastResponse.needsFullProcessing) {
        console.log(`üîÑ Starting background processing for: "${text}"`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        processMessageInBackground(text, messageContext, ctx);
      }

      return;
    }

    // 2. –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤
    console.log(`üîÑ Processing message through multi-agent system: "${text}"`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processingMsg = await ctx.reply("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...");

    try {
      const result =
        await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
          {
            text,
            channel: "telegram",
            userId: messageContext.userId,
            messageId: messageContext.messageId,
          },
        );

      if (result.success) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
        const formattedResponse = formatForTelegram(result.response, {
          useEmojis: true,
          useHTML: true,
          addSeparators: false,
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await ctx.api.editMessageText(
          ctx.chat!.id,
          processingMsg.message_id,
          formattedResponse.text,
          { parse_mode: "HTML" },
        );
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorMessage = createErrorMessage(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        );

        await ctx.api.editMessageText(
          ctx.chat!.id,
          processingMsg.message_id,
          errorMessage,
          { parse_mode: "HTML" },
        );
      }
    } catch (error) {
      console.error("Error in smart text processing:", error);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
      const errorMessage = createErrorMessage(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      );

              await ctx.api.editMessageText(
          ctx.chat!.id,
          processingMsg.message_id,
          errorMessage,
          { parse_mode: "HTML" },
        );
    }
  } catch (error) {
    console.error("Error in smart text handler:", error);
    const errorMessage = createErrorMessage(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
    );
    await ctx.reply(errorMessage, { parse_mode: "HTML" });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
 */
async function processMessageInBackground(
  text: string,
  messageContext: ReturnType<typeof createMessageContext>,
  ctx: Context,
) {
  try {
    console.log(`üîÑ Background processing started for: "${text}"`);

    const result =
      await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
        {
          text,
          channel: "telegram",
          userId: messageContext.userId,
          messageId: messageContext.messageId,
          telegramUserId: messageContext.userId,
        },
      );

    if (result.success && result.agentMetadata?.agentsUsed.length) {
      // –ï—Å–ª–∏ –≤ —Ñ–æ–Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const additionalInfo = `üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç ${result.agentMetadata.agentsUsed.join(", ")}:`;
      const formattedResponse = formatForTelegram(result.response, {
        useEmojis: true,
        useHTML: true,
        addSeparators: false,
      });

      await ctx.reply(`${additionalInfo}\n\n${formattedResponse.text}`, {
        parse_mode: "HTML",
      });
    }
  } catch (error) {
    console.error("Error in background processing:", error);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
  }
}
