import type { Context } from "grammy";

import { apiClient } from "../api/client";
import { DEFAULT_AGENT_OPTIONS } from "../config/agents";
import { env } from "../env";
import {
  ProcessingAnimation,
  removeProcessingMessage,
  sendProcessingMessage,
} from "../utils/message-utils";
import { formatForTelegram } from "../utils/telegram-formatter";
import {
  createMessageContext,
  getUserIdentifier,
  isObviousSpam,
} from "../utils/telegram-utils";

/**
 * –£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function handleSmartText(ctx: Context): Promise<void> {
  const text = ctx.message?.text ?? "";

  // Basic input constraints
  const maxLength = env.TG_MESSAGE_MAX_LENGTH ?? 3000;
  if (text.length > maxLength) {
    await ctx.reply(
      `–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ ${maxLength}.`,
    );
    return;
  }

  // Check for obvious spam
  if (isObviousSpam(text)) {
    await ctx.reply(
      "–ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º –∏–ª–∏ –±–µ—Å—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.",
    );
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
  await ctx.replyWithChatAction("typing");

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const processingAnimation = new ProcessingAnimation(ctx, "–∑–∞–ø—Ä–æ—Å");
  await processingAnimation.start();

  try {
    const messageContext = createMessageContext(ctx);
    console.log(
      `üìù [AGENTS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${messageContext.chatId}: "${text.slice(0, 50)}${text.length > 50 ? "..." : ""}"`,
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const result =
      await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
        {
          text,
          channel: "telegram",
          chatId: messageContext.chatId,
          messageId: messageContext.messageId,
          telegramUserId: messageContext.userId,
          agentOptions: DEFAULT_AGENT_OPTIONS,
          metadata: {
            smartMode: true,
            timestamp: new Date().toISOString(),
          },
        },
      );

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await processingAnimation.stop();

    if (!result.success) {
      await ctx.reply(result.response);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let reply = result.response;
    const MAX_TG_MESSAGE = 4096;

    if (reply.length > MAX_TG_MESSAGE) {
      reply = reply.slice(0, MAX_TG_MESSAGE - 1) + "‚Ä¶";
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (
      env.NODE_ENV === "development" &&
      "agentMetadata" in result &&
      result.agentMetadata
    ) {
      const agentInfo = result.agentMetadata;
      reply += `\n\nüî¨ Debug: ${agentInfo.processingMode} | ${agentInfo.agentsUsed.join("‚Üí")} | Q:${(agentInfo.qualityScore * 100).toFixed(0)}%`;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
    const formattedMessage = formatForTelegram(reply, {
      useEmojis: true,
      useMarkdown: true,
      maxLineLength: 80,
    });

    await ctx.reply(formattedMessage.text, {
      parse_mode: formattedMessage.parse_mode,
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if ("agentMetadata" in result && result.agentMetadata) {
      console.log(
        `‚úÖ [AGENTS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Ä–µ–∂–∏–º=${result.agentMetadata.processingMode}, –∞–≥–µ–Ω—Ç—ã=${result.agentMetadata.agentsUsed.join("‚Üí")}, –∫–∞—á–µ—Å—Ç–≤–æ=${result.agentMetadata.qualityScore.toFixed(2)}`,
      );
    }
  } catch (error) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await processingAnimation.stop();

    console.error("Smart text handling error:", error);
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
    );
  }
}
