import type { Context } from "grammy";

import { apiClient, createApiClientWithHeaders } from "../api/client";
import { runWithAnimation } from "../utils/animation-helpers";
import { createErrorMessage } from "../utils/html-message-builder";
import { deleteUserMessage } from "../utils/message-utils";
import {
  formatForTelegram,
  OPTIMAL_TELEGRAM_FORMATTING,
} from "../utils/telegram-formatter";
import { createMessageContext } from "../utils/telegram-utils";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function handleSmartText(ctx: Context) {
  try {
    const messageContext = createMessageContext(ctx);
    const text = ctx.message?.text || "";

    console.log(
      `ü§ñ Smart text handler: "${text}" from user ${messageContext.userId}`,
    );

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    console.log(`ü§ñ Processing through agent system: "${text}"`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await runWithAnimation(ctx, "agents", 30000, async () => {
      try {
        console.log("messageContext", messageContext);

        // –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ headers
        const clientWithHeaders = createApiClientWithHeaders({
          "X-Telegram-User-Id": messageContext.userId,
          "X-Telegram-Username": messageContext.username || "",
        });

        const result =
          await clientWithHeaders.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
            {
              text,
              channel: "telegram",
              telegramUserId: messageContext.userId,
              telegramUsername: messageContext.username,
              messageId: messageContext.messageId,
            },
          );

        if (result.success) {
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
          const formattedResponse = formatForTelegram(
            result.response,
            OPTIMAL_TELEGRAM_FORMATTING,
          );

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
          await ctx.reply(formattedResponse.text, { parse_mode: "HTML" });

          // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
          await deleteUserMessage(ctx, messageContext.messageId);
        } else {
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          const errorMessage = createErrorMessage(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
          );

          await ctx.reply(errorMessage, { parse_mode: "HTML" });
        }
      } catch (error) {
        console.error("Error in smart text processing:", error);

        const errorMessage = createErrorMessage(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        );

        await ctx.reply(errorMessage, { parse_mode: "HTML" });
      }
    });
  } catch (error) {
    console.error("Error in smart text handler:", error);
    const errorMessage = createErrorMessage(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
    );
    await ctx.reply(errorMessage, { parse_mode: "HTML" });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
 */
async function processMessageInBackground(
  text: string,
  messageContext: ReturnType<typeof createMessageContext>,
  ctx: Context,
) {
  try {
    console.log(`üîÑ Background processing started for: "${text}"`);

    const result =
      await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
        {
          text,
          channel: "telegram",
          telegramUserId: messageContext.userId,
          telegramUsername: messageContext.username,
          messageId: messageContext.messageId,
        },
      );

    if (result.success && result.agentMetadata?.agentsUsed.length) {
      // –ï—Å–ª–∏ –≤ —Ñ–æ–Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const additionalInfo = `üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç ${result.agentMetadata.agentsUsed.join(", ")}:`;
      const formattedResponse = formatForTelegram(
        result.response,
        OPTIMAL_TELEGRAM_FORMATTING,
      );

      await ctx.reply(`${additionalInfo}\n\n${formattedResponse.text}`, {
        parse_mode: "HTML",
      });
    }
  } catch (error) {
    console.error("Error in background processing:", error);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
  }
}
