import type { Context } from "grammy";

import { apiClient } from "../api/client";
import { env } from "../env";
import {
  removeProcessingMessage,
  sendProcessingMessage,
} from "../utils/message-utils";
import {
  createMessageContext,
  escapeTelegramMarkdownV2,
  getUserIdentifier,
  isObviousSpam,
} from "../utils/telegram-utils";

/**
 * –£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function handleSmartText(ctx: Context): Promise<void> {
  const text = ctx.message?.text ?? "";

  // Basic input constraints
  const maxLength = env.TG_MESSAGE_MAX_LENGTH ?? 3000;
  if (text.length > maxLength) {
    await ctx.reply(
      `–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ ${maxLength}.`,
    );
    return;
  }

  // Check for obvious spam
  if (isObviousSpam(text)) {
    await ctx.reply(
      "–ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º –∏–ª–∏ –±–µ—Å—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.",
    );
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
  await ctx.replyWithChatAction("typing");

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≥–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  const shouldUseAgents = shouldUseAgentProcessing(text);
  const messageType = shouldUseAgents ? "–∑–∞–ø—Ä–æ—Å" : "—Å–æ–æ–±—â–µ–Ω–∏–µ";
  const processingMessageId = await sendProcessingMessage(ctx, messageType);

  try {
    const messageContext = createMessageContext(ctx);
    console.log(
      `üìù ${shouldUseAgents ? "[AGENTS]" : "[LEGACY]"} –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${getUserIdentifier(ctx.from)} –≤ —á–∞—Ç–µ ${messageContext.chatId}: "${text.slice(0, 50)}${text.length > 50 ? "..." : ""}"`,
    );

    let result;

    if (shouldUseAgents) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
      result =
        await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
          {
            text,
            channel: "telegram",
            chatId: messageContext.chatId,
            messageId: messageContext.messageId,
            telegramUserId: messageContext.userId,
            agentOptions: {
              useQualityControl: true,
              maxQualityIterations: 2,
              targetQuality: 0.8,
            },
            metadata: {
              smartMode: true,
              timestamp: new Date().toISOString(),
            },
          },
        );
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      const { processTextMessage } = await import(
        "../services/message-service"
      );
      result = await processTextMessage(text, messageContext);
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..."
    await removeProcessingMessage(ctx, processingMessageId, ctx.chat!.id);

    if (!result.success) {
      await ctx.reply(result.response);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let reply = result.response;
    const MAX_TG_MESSAGE = 4096;

    if (reply.length > MAX_TG_MESSAGE) {
      reply = reply.slice(0, MAX_TG_MESSAGE - 1) + "‚Ä¶";
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (
      env.NODE_ENV === "development" &&
      shouldUseAgents &&
      "agentMetadata" in result &&
      result.agentMetadata
    ) {
      const agentInfo = result.agentMetadata;
      reply += `\n\nüî¨ _Debug: ${agentInfo.processingMode} | ${agentInfo.agentsUsed.join("‚Üí")} | Q:${(agentInfo.qualityScore * 100).toFixed(0)}%_`;
    }

    await ctx.reply(escapeTelegramMarkdownV2(reply), {
      parse_mode: "MarkdownV2",
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if ("agentMetadata" in result && result.agentMetadata) {
      console.log(
        `‚úÖ [AGENTS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Ä–µ–∂–∏–º=${result.agentMetadata.processingMode}, –∞–≥–µ–Ω—Ç—ã=${result.agentMetadata.agentsUsed.join("‚Üí")}, –∫–∞—á–µ—Å—Ç–≤–æ=${result.agentMetadata.qualityScore.toFixed(2)}`,
      );
    } else {
      console.log(
        `‚úÖ [LEGACY] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: —Ç–∏–ø=${result.messageType?.type}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=${result.relevance?.relevant}`,
      );
    }
  } catch (error) {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..." –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await removeProcessingMessage(ctx, processingMessageId, ctx.chat!.id);

    console.error("Smart text handling error:", error);
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
    );
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function shouldUseAgentProcessing(text: string): boolean {
  // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:

  // 1. –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (>100 —Å–∏–º–≤–æ–ª–æ–≤)
  if (text.length > 100) return true;

  // 2. –°–ª–æ–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const complexKeywords = [
    "–∞–Ω–∞–ª–∏–∑",
    "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π",
    "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "—Å—Ä–∞–≤–Ω–∏",
    "–Ω–∞–π–¥–∏ –ø–∞—Ç—Ç–µ—Ä–Ω",
    "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π",
    "—É–ª—É—á—à–∏",
    "–ø–ª–∞–Ω",
    "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
    "–¥–µ—Ç–∞–ª—å–Ω—ã–π",
    "–ø–æ–¥—Ä–æ–±–Ω—ã–π",
    "–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π",
    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
    "–≤–∞—Ä–∏–∞–Ω—Ç—ã",
    "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã",
  ];

  const textLower = text.toLowerCase();
  if (complexKeywords.some((keyword) => textLower.includes(keyword))) {
    return true;
  }

  // 3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤)
  const questionWords = [
    "—á—Ç–æ",
    "–∫–∞–∫",
    "–≥–¥–µ",
    "–∫–æ–≥–¥–∞",
    "–∑–∞—á–µ–º",
    "–ø–æ—á–µ–º—É",
    "–∫–∞–∫–æ–π",
    "–∫—Ç–æ",
  ];
  const questionWordCount = questionWords.filter((word) =>
    textLower.includes(word),
  ).length;
  const questionMarkCount = (text.match(/\?/g) || []).length;

  if (questionWordCount >= 2 || questionMarkCount >= 2) {
    return true;
  }

  // 4. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º
  const financialAnalysisKeywords = [
    "—Ä–∞—Å—Ö–æ–¥—ã",
    "–¥–æ—Ö–æ–¥—ã",
    "–±—é–¥–∂–µ—Ç",
    "—ç–∫–æ–Ω–æ–º–∏—è",
    "—Ç—Ä–∞—Ç–∞",
    "—Ñ–∏–Ω–∞–Ω—Å—ã",
    "—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª",
    "—Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª",
    "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞–Ω",
  ];

  if (
    financialAnalysisKeywords.some((keyword) => textLower.includes(keyword))
  ) {
    return true;
  }

  // 5. –ó–∞–ø—Ä–æ—Å—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç "–∏", "–∞ —Ç–∞–∫–∂–µ", "–µ—â–µ")
  const multiActionIndicators = [
    " –∏ ",
    " –∞ —Ç–∞–∫–∂–µ ",
    " –µ—â–µ ",
    " —Ç–∞–∫–∂–µ ",
    " –ø–ª—é—Å ",
  ];
  if (
    multiActionIndicators.some((indicator) => textLower.includes(indicator))
  ) {
    return true;
  }

  return false;
}
