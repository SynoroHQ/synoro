import type { Context } from "grammy";

import { apiClient } from "../api/client";
import { telegramFastResponseService } from "../services/fast-response-service";
import {
  createErrorMessage,
  createSuccessMessage,
} from "../utils/html-message-builder";
import {
  agentsAnimation,
  createMessageAnimation,
} from "../utils/message-animation";
import { formatForTelegram } from "../utils/telegram-formatter";
import { createMessageContext } from "../utils/telegram-utils";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FastResponseAgent
 */
export async function handleSmartText(ctx: Context) {
  try {
    const messageContext = createMessageContext(ctx);
    const text = ctx.message?.text || "";

    console.log(
      `ü§ñ Smart text handler: "${text}" from user ${messageContext.userId}`,
    );

    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FastResponseAgent
    const fastResponse = await telegramFastResponseService.analyzeMessage(
      text,
      messageContext.userId,
      messageContext.messageId,
    );

    if (fastResponse.shouldSendFast) {
      console.log(
        `‚ö° Fast response triggered: ${fastResponse.processingType} (confidence: ${fastResponse.confidence})`,
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
      const quickAnim = await createMessageAnimation();
      await quickAnim.start(ctx, "fast", { maxDuration: 1500 });

      // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      const messageId = quickAnim.getMessageId();
      const chatId = quickAnim.getChatId();

      if (messageId && chatId) {
        try {
          await ctx.api.deleteMessage(chatId, messageId);
        } catch (error) {
          console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏—é:", error);
        }
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      await quickAnim.stop();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
      await ctx.reply(fastResponse.fastResponse);

      // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ FastResponseAgent –¥–∞–ª –æ—Ç–≤–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      // –∏ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
      console.log(
        `‚úÖ Simple message handled by fast response, no further processing needed`,
      );
      return;
    }

    // 2. –ï—Å–ª–∏ –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
    console.log(
      `üîÑ Useful message detected, processing through system: "${text}"`,
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const agentsAnim = await agentsAnimation(ctx, 30000);

    try {
      const result =
        await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
          {
            text,
            channel: "telegram",
            telegramUserId: messageContext.userId,
            messageId: messageContext.messageId,
          },
        );

      // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      const messageId = agentsAnim.getMessageId();
      const chatId = agentsAnim.getChatId();

      if (messageId && chatId) {
        try {
          await ctx.api.deleteMessage(chatId, messageId);
        } catch (error) {
          console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é:", error);
        }
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      await agentsAnim.stop();

      if (result.success) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
        const formattedResponse = formatForTelegram(result.response, {
          useEmojis: true,
          useHTML: true,
          addSeparators: false,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        await ctx.reply(formattedResponse.text, { parse_mode: "HTML" });
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorMessage = createErrorMessage(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
          "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        );

        await ctx.reply(errorMessage, { parse_mode: "HTML" });
      }
    } catch (error) {
      console.error("Error in smart text processing:", error);

      // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      const messageId = agentsAnim.getMessageId();
      const chatId = agentsAnim.getChatId();

      if (messageId && chatId) {
        try {
          await ctx.api.deleteMessage(chatId, messageId);
        } catch (deleteError) {
          console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é:", deleteError);
        }
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      await agentsAnim.stop();

      const errorMessage = createErrorMessage(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      );

      await ctx.reply(errorMessage, { parse_mode: "HTML" });
    }
  } catch (error) {
    console.error("Error in smart text handler:", error);
    const errorMessage = createErrorMessage(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞",
    );
    await ctx.reply(errorMessage, { parse_mode: "HTML" });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
 */
async function processMessageInBackground(
  text: string,
  messageContext: ReturnType<typeof createMessageContext>,
  ctx: Context,
) {
  try {
    console.log(`üîÑ Background processing started for: "${text}"`);

    const result =
      await apiClient.messages.processMessageAgents.processMessageFromTelegramWithAgents.mutate(
        {
          text,
          channel: "telegram",
          telegramUserId: messageContext.userId,
          messageId: messageContext.messageId,
        },
      );

    if (result.success && result.agentMetadata?.agentsUsed.length) {
      // –ï—Å–ª–∏ –≤ —Ñ–æ–Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const additionalInfo = `üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç ${result.agentMetadata.agentsUsed.join(", ")}:`;
      const formattedResponse = formatForTelegram(result.response, {
        useEmojis: true,
        useHTML: true,
        addSeparators: false,
      });

      await ctx.reply(`${additionalInfo}\n\n${formattedResponse.text}`, {
        parse_mode: "HTML",
      });
    }
  } catch (error) {
    console.error("Error in background processing:", error);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
  }
}
