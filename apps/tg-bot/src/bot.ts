import type { Context } from "grammy";
import { Bot } from "grammy";

import { env } from "./env";
import { handleAudio } from "./handlers/audio";
import { handleOther } from "./handlers/other";
import { handleText } from "./handlers/text";

export function createBot(): Bot<Context> {
  const bot = new Bot<Context>(env.TELEGRAM_BOT_TOKEN);

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use(async (ctx, next) => {
    const user =
      ctx.from?.username || ctx.from?.first_name || ctx.from?.id || "unknown";
    const chatId = ctx.chat?.id || "unknown";
    const messageType = ctx.message
      ? ctx.message.text
        ? "text"
        : ctx.message.voice
          ? "voice"
          : ctx.message.audio
            ? "audio"
            : "other"
      : "unknown";

    console.log(
      `üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–∏–ø=${messageType}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${user}, —á–∞—Ç=${chatId}`,
    );
    await next();
  });

  bot.command("start", async (ctx) => {
    const user = ctx.from?.username || ctx.from?.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    console.log(`üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user}`);

    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–æ–∑–≥ –¥–ª—è –¥–æ–º–∞: –ª–æ–≥–∏—Ä—É—é —Å–æ–±—ã—Ç–∏—è, –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å, –ø–æ–º–æ–≥–∞—é —Å–æ–≤–µ—Ç–∞–º–∏.\n\n" +
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –≤—Å—ë –ø–æ–π–º—É.",
    );
  });

  bot.on("message:text", handleText);
  bot.on(["message:voice", "message:audio"], handleAudio);
  // Fallback for any other message types
  bot.on("message", handleOther);

  bot.catch((err: unknown) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
  });

  return bot;
}
