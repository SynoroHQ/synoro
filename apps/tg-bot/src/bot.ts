import type { Context } from "grammy";
import type { Message, User } from "grammy/types";
import { Bot } from "grammy";

import { env } from "./env";
import { handleAudio } from "./handlers/audio";
import { handleOther } from "./handlers/other";
import { handleText } from "./handlers/text";
import { buildRateLimitKey, checkRateLimit } from "./lib/rate-limit";

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 * @param message - –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
 * @returns —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function getMessageType(message?: Message): string {
  if (!message) {
    return "unknown";
  }

  // –ö–∞—Ä—Ç–∞ —Å–≤–æ–π—Å—Ç–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∏—Ö —Ç–∏–ø–∞–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const messageTypeMap: Array<[keyof Message, string]> = [
    ["text", "text"],
    ["voice", "voice"],
    ["audio", "audio"],
    ["photo", "photo"],
    ["video", "video"],
    ["document", "document"],
    ["sticker", "sticker"],
    ["contact", "contact"],
    ["location", "location"],
  ];

  // –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–∞—Ä—Ç–µ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  for (const [property, type] of messageTypeMap) {
    if (message[property]) {
      return type;
    }
  }

  return "other";
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback –ª–æ–≥–∏–∫–æ–π
 * @param from - –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
 * @returns —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getUserIdentifier(from?: User): string {
  return (
    from?.username || from?.first_name || from?.id?.toString() || "unknown"
  );
}

export function createBot(): Bot<Context> {
  const bot = new Bot<Context>(env.TELEGRAM_BOT_TOKEN);

  // Parse allowlist of chat IDs (optional)
  const allowedChats = new Set<string>(
    (env.TG_ALLOWED_CHAT_IDS ?? "")
      .split(",")
      .map((s) => s.trim())
      .filter((s) => s.length > 0),
  );

  const rlWindow = env.TG_RATE_LIMIT_WINDOW_MS ?? 60_000; // 1 min
  const rlLimit = env.TG_RATE_LIMIT_LIMIT ?? 30; // 30 updates per window per user/chat

  // Middleware: allowlist check (if configured)
  bot.use(async (ctx, next) => {
    const chatId = ctx.chat?.id ? String(ctx.chat.id) : null;
    if (allowedChats.size > 0) {
      if (!chatId || !allowedChats.has(chatId)) {
        // –ü–æ–ª–∏—Ç–∏–∫–∞: –æ—Ç–≤–µ—á–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        try {
          if (chatId) {
            await ctx.reply(
              "–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
            );
          }
        } catch {}
        return; // stop processing
      }
    }
    await next();
  });

  // Middleware: basic rate limiting per chat+user
  bot.use(async (ctx, next) => {
    const chatId = ctx.chat?.id ? String(ctx.chat.id) : "unknown";
    const userId = ctx.from?.id ? String(ctx.from.id) : "anon";
    const key = buildRateLimitKey(["tg", chatId, userId]);
    const { allowed, remaining, resetMs } = checkRateLimit(key, {
      windowMs: rlWindow,
      limit: rlLimit,
    });
    if (!allowed) {
      try {
        await ctx.reply(
          `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ ${Math.ceil(resetMs / 1000)} —Å).`,
        );
      } catch {}
      return;
    }
    await next();
  });

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use(async (ctx, next) => {
    const user = getUserIdentifier(ctx.from);
    const chatId = ctx.chat?.id || "unknown";
    const messageType = getMessageType(ctx.message);

    console.log(
      `üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–∏–ø=${messageType}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${user}, —á–∞—Ç=${chatId}`,
    );
    await next();
  });

  bot.command("start", async (ctx) => {
    const user = getUserIdentifier(ctx.from);
    console.log(`üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user}`);

    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–æ–∑–≥ –¥–ª—è –¥–æ–º–∞: –ª–æ–≥–∏—Ä—É—é —Å–æ–±—ã—Ç–∏—è, –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å, –ø–æ–º–æ–≥–∞—é —Å–æ–≤–µ—Ç–∞–º–∏.\n\n" +
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –≤—Å—ë –ø–æ–π–º—É.",
    );
  });

  bot.on("message:text", handleText);
  bot.on(["message:voice", "message:audio"], handleAudio);
  // Fallback for any other message types
  bot.on("message", handleOther);

  bot.catch((err: unknown) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
  });

  return bot;
}
