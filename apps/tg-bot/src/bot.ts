import type { Context } from "grammy";
import { Bot } from "grammy";

import { env } from "./env";
import { handleAudio } from "./handlers/audio-handler";
import { handleOther } from "./handlers/other-handler";
import { handleSmartText } from "./handlers/smart-text-handler";
import { handleText } from "./handlers/text-handler";
import { buildRateLimitKey, checkRateLimit } from "./lib/rate-limit";
import { getMessageType, getUserIdentifier } from "./utils/telegram-utils";

export function createBot(): Bot<Context> {
  const bot = new Bot(env.TELEGRAM_BOT_TOKEN);

  // Parse allowlist of chat IDs (optional)
  const allowedChats = new Set<string>(
    (env.TG_ALLOWED_CHAT_IDS ?? "")
      .split(",")
      .map((s) => s.trim())
      .filter((s) => s.length > 0),
  );

  const rlWindow = env.TG_RATE_LIMIT_WINDOW_MS ?? 60_000; // 1 min
  const rlLimit = env.TG_RATE_LIMIT_LIMIT ?? 30; // 30 updates per window per user/chat

  // Middleware: allowlist check (if configured)
  bot.use(async (ctx, next) => {
    if (allowedChats.size > 0) {
      const chatId = ctx.chat?.id ? String(ctx.chat.id) : null;
      if (!chatId || !allowedChats.has(chatId)) {
        // –ü–æ–ª–∏—Ç–∏–∫–∞: –æ—Ç–≤–µ—á–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        try {
          if (chatId) {
            await ctx.reply(
              "–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
            );
          }
        } catch {}
        return; // stop processing
      }
    }
    await next();
  });

  // Middleware: basic rate limiting per user
  bot.use(async (ctx, next) => {
    const userId = ctx.from?.id ? String(ctx.from.id) : "anon";
    const key = buildRateLimitKey(["tg", userId]);
    const { allowed, remaining, resetMs } = checkRateLimit(key, {
      windowMs: rlWindow,
      limit: rlLimit,
    });
    if (!allowed) {
      try {
        await ctx.reply(
          `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ (—á–µ—Ä–µ–∑ ${Math.ceil(resetMs / 1000)} —Å).`,
        );
      } catch {}
      return;
    }
    await next();
  });

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.use(async (ctx, next) => {
    const user = getUserIdentifier(ctx.from);
    const messageType = getMessageType(ctx.message);

    console.log(
      `üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–∏–ø=${messageType}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=${user}`,
    );
    await next();
  });

  bot.command("start", async (ctx) => {
    const user = getUserIdentifier(ctx.from);
    console.log(`üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user}`);

    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –¥–æ–º–∞.\n\n" +
        "üí¨ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –µ–≥–æ —Ä–∞–∑–±–µ—Ä—É –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é\n" +
        "üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –ø–µ—Ä–µ–≤–µ–¥—É –≤ —Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∞—é\n" +
        "üìã –ü–æ–º–æ–≥—É —Å –¥–µ–ª–∞–º–∏, –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –¥–∞–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n" +
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä!",
      {
        parse_mode: "HTML",
      },
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
  const textHandler = env.TG_USE_AGENT_SYSTEM ? handleSmartText : handleText;
  bot.on("message:text", textHandler);
  bot.on(["message:voice", "message:audio"], handleAudio);
  // Fallback –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("message", handleOther);

  bot.catch((err: unknown) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
  });

  return bot;
}
