#!/usr/bin/env bun
import { eq, isNull, sql } from "drizzle-orm";

import { db } from "../client";
import { messageAttachments } from "../schemas/chat/schema";
import { fileRelations } from "../schemas/core/file-relations";
import { files } from "../schemas/core/files";
import { attachments } from "../schemas/events/attachment";

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–∞–π–ª–æ–≤
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ attachments –≤ files + fileRelations
 * 2. –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ messageAttachments –≤ files + fileRelations
 * 3. –û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
 */

async function migrateAttachments() {
  console.log("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è attachments...");

  const allAttachments = await db
    .select()
    .from(attachments)
    .where(eq(attachments.migratedToFiles, "false"));

  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${allAttachments.length} attachments –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

  let migrated = 0;
  let errors = 0;

  for (const attachment of allAttachments) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ files
      const [file] = await db
        .insert(files)
        .values({
          name: attachment.filename || `attachment_${attachment.id}`,
          type: attachment.type,
          mime: attachment.mime,
          size: attachment.size,
          extension: attachment.filename?.split(".").pop() || null,
          storageKey: attachment.storageUrl, // –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –∫–∞–∫ –∫–ª—é—á
          storageUrl: attachment.storageUrl,
          thumbnailUrl: attachment.thumbnailUrl,
          uploadedBy: attachment.householdId, // –≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å
          householdId: attachment.householdId,
          meta: {
            ...attachment.meta,
            originalAttachmentId: attachment.id,
            migrationSource: "attachments",
          },
        })
        .returning();

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å —Å–æ–±—ã—Ç–∏–µ–º
      if (attachment.eventId && file) {
        await db.insert(fileRelations).values({
          fileId: file.id,
          entityType: "event",
          entityId: attachment.eventId,
          role: "attachment",
          meta: JSON.stringify({
            originalAttachmentId: attachment.id,
            migrationSource: "attachments",
          }),
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –º–∏–≥—Ä–∞—Ü–∏–∏
      if (file) {
        await db
          .update(attachments)
          .set({
            fileId: file.id,
            migratedToFiles: "true",
            updatedAt: new Date(),
          })
          .where(eq(attachments.id, attachment.id));
      }

      migrated++;

      if (migrated % 100 === 0) {
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migrated} attachments`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ attachment ${attachment.id}:`, error);
      errors++;
    }
  }

  console.log(
    `‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è attachments –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${migrated} —É—Å–ø–µ—à–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`,
  );
  return { migrated, errors };
}

async function migrateMessageAttachments() {
  console.log("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è messageAttachments...");

  const allMessageAttachments = await db
    .select()
    .from(messageAttachments)
    .where(eq(messageAttachments.migratedToFiles, "false"));

  console.log(
    `üìÅ –ù–∞–π–¥–µ–Ω–æ ${allMessageAttachments.length} messageAttachments –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`,
  );

  let migrated = 0;
  let errors = 0;

  for (const msgAttachment of allMessageAttachments) {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ files
      const [file] = await db
        .insert(files)
        .values({
          name: `message_attachment_${msgAttachment.id}`,
          type: "raw", // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          mime: msgAttachment.mime,
          size: msgAttachment.size ? BigInt(msgAttachment.size) : null,
          storageKey: msgAttachment.key,
          uploadedBy: "system", // –≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å
          meta: {
            originalMessageAttachmentId: msgAttachment.id,
            migrationSource: "messageAttachments",
          },
        })
        .returning();

      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      if (file) {
        await db.insert(fileRelations).values({
          fileId: file.id,
          entityType: "message",
          entityId: msgAttachment.messageId,
          role: "attachment",
          meta: JSON.stringify({
            originalMessageAttachmentId: msgAttachment.id,
            migrationSource: "messageAttachments",
          }),
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –º–∏–≥—Ä–∞—Ü–∏–∏
        await db
          .update(messageAttachments)
          .set({
            fileId: file.id,
            migratedToFiles: "true",
            updatedAt: new Date(),
          })
          .where(eq(messageAttachments.id, msgAttachment.id));
      }

      migrated++;

      if (migrated % 100 === 0) {
        console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migrated} messageAttachments`);
      }
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ messageAttachment ${msgAttachment.id}:`,
        error,
      );
      errors++;
    }
  }

  console.log(
    `‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è messageAttachments –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${migrated} —É—Å–ø–µ—à–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`,
  );
  return { migrated, errors };
}

async function validateMigration() {
  console.log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏...");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º attachments
  const notMigratedAttachments = await db
    .select({ count: sql<number>`count(*)` })
    .from(attachments)
    .where(eq(attachments.migratedToFiles, "false"));

  const migratedAttachments = await db
    .select({ count: sql<number>`count(*)` })
    .from(attachments)
    .where(eq(attachments.migratedToFiles, "true"));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º messageAttachments
  const notMigratedMsgAttachments = await db
    .select({ count: sql<number>`count(*)` })
    .from(messageAttachments)
    .where(eq(messageAttachments.migratedToFiles, "false"));

  const migratedMsgAttachments = await db
    .select({ count: sql<number>`count(*)` })
    .from(messageAttachments)
    .where(eq(messageAttachments.migratedToFiles, "true"));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
  const totalFiles = await db
    .select({ count: sql<number>`count(*)` })
    .from(files);

  const totalFileRelations = await db
    .select({ count: sql<number>`count(*)` })
    .from(fileRelations);

  console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:");
  console.log(
    `  Attachments: ${migratedAttachments[0]?.count || 0} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ, ${notMigratedAttachments[0]?.count || 0} –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ`,
  );
  console.log(
    `  MessageAttachments: ${migratedMsgAttachments[0]?.count || 0} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ, ${notMigratedMsgAttachments[0]?.count || 0} –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ`,
  );
  console.log(`  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles[0]?.count || 0}`);
  console.log(`  –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: ${totalFileRelations[0]?.count || 0}`);

  return {
    attachments: {
      migrated: migratedAttachments[0]?.count || 0,
      notMigrated: notMigratedAttachments[0]?.count || 0,
    },
    messageAttachments: {
      migrated: migratedMsgAttachments[0]?.count || 0,
      notMigrated: notMigratedMsgAttachments[0]?.count || 0,
    },
    files: totalFiles[0]?.count || 0,
    fileRelations: totalFileRelations[0]?.count || 0,
  };
}

async function main() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–∞–π–ª–æ–≤...");

  try {
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º attachments
    const attachmentsResult = await migrateAttachments();

    // –ú–∏–≥—Ä–∏—Ä—É–µ–º messageAttachments
    const messageAttachmentsResult = await migrateMessageAttachments();

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const validation = await validateMigration();

    console.log("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    console.log(
      `üìÅ –í—Å–µ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${attachmentsResult.migrated + messageAttachmentsResult.migrated}`,
    );

    if (attachmentsResult.errors > 0 || messageAttachmentsResult.errors > 0) {
      console.log(
        `‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: ${attachmentsResult.errors + messageAttachmentsResult.errors} –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏`,
      );
      console.log("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π");
    }
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    process.exit(1);
  }
}

if (import.meta.main) {
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}
