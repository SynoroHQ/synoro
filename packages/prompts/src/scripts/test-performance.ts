#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
 */
import { globalCache, globalFastRouter } from "../core";
import { performanceMonitor } from "../tools/performance-monitor";

// –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
const testQueries = [
  // Event Processor
  "–ü–æ—Ç—Ä–∞—Ç–∏–ª 1500 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã",
  "–ö—É–ø–∏–ª –Ω–æ–≤—É—é –∫—É—Ä—Ç–∫—É –∑–∞ 5000‚ÇΩ",
  "–ù—É–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É –∑–∞–≤—Ç—Ä–∞",
  "–ü–æ—á–∏–Ω–∏–ª –∫—Ä–∞–Ω –≤ –≤–∞–Ω–Ω–æ–π",
  "–ó–∞–ø–∏—Å–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",

  // Event Analyzer
  "–ü–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü",
  "–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã?",
  "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
  "–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≥–æ–¥",
  "–°—Ä–∞–≤–Ω–∏ —Ç—Ä–∞—Ç—ã —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º",

  // General Assistant
  "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ?",
  "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π?",
  "–ü–æ–º–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É",
  "–û–±—ä—è—Å–Ω–∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–∏–∑",
  "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
];

async function testRoutingPerformance() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–æ—É—Ç–∏–Ω–≥–∞...\n");

  const startTime = Date.now();
  const results: { query: string; agent: string; time: number }[] = [];

  for (const query of testQueries) {
    const queryStart = Date.now();
    const agent = globalFastRouter.route(query);
    const queryTime = Date.now() - queryStart;

    results.push({ query, agent, time: queryTime });
  }

  const totalTime = Date.now() - startTime;
  const avgTime = totalTime / testQueries.length;

  console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ—É—Ç–∏–Ω–≥–∞:");
  console.log(`–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${testQueries.length}`);
  console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
  console.log(`–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgTime.toFixed(2)}ms`);
  console.log(
    `–°–∫–æ—Ä–æ—Å—Ç—å: ${(testQueries.length / (totalTime / 1000)).toFixed(0)} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫\n`,
  );

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
  const agentGroups = results.reduce(
    (acc, result) => {
      if (!acc[result.agent]) acc[result.agent] = [];
      acc[result.agent].push(result);
      return acc;
    },
    {} as Record<string, typeof results>,
  );

  console.log("üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞–≥–µ–Ω—Ç–∞–º:");
  for (const [agent, queries] of Object.entries(agentGroups)) {
    console.log(`${agent}: ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
  }
  console.log();

  return results;
}

async function testCachePerformance() {
  console.log("üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞...\n");

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à
  for (let i = 0; i < 100; i++) {
    globalCache.set(`test-key-${i}`, `test-value-${i}`, 60000);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ
  const readStart = Date.now();
  let hits = 0;

  for (let i = 0; i < 1000; i++) {
    const key = `test-key-${i % 100}`;
    const value = globalCache.get(key);
    if (value) hits++;
  }

  const readTime = Date.now() - readStart;
  const stats = globalCache.getStats();

  console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:");
  console.log(`–û–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è: 1000`);
  console.log(`–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: ${readTime}ms`);
  console.log(
    `–°–∫–æ—Ä–æ—Å—Ç—å: ${(1000 / (readTime / 1000)).toFixed(0)} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫`,
  );
  console.log(`Hit rate: ${(stats.hitRate * 100).toFixed(1)}%`);
  console.log(`–†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n`);

  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  globalCache.clear();
}

async function generatePerformanceReport() {
  console.log("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n");

  const report = performanceMonitor.generateReport();

  console.log("üéØ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
  console.log(
    `–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date(report.timestamp).toLocaleString()}`,
  );
  console.log();

  console.log("üíæ –ö—ç—à:");
  console.log(`Hit rate: ${(report.cache.hitRate * 100).toFixed(1)}%`);
  console.log(`–†–∞–∑–º–µ—Ä: ${report.cache.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
  console.log();

  console.log("üö¶ –†–æ—É—Ç–∏–Ω–≥:");
  console.log(`–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: ${report.routing.totalRules}`);
  console.log("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª:");
  if (report.routing.distribution) {
    for (const [agent, count] of Object.entries(report.routing.distribution)) {
      console.log(`  ${agent}: ${count} –ø—Ä–∞–≤–∏–ª`);
    }
  }
  console.log();

  if (report.recommendations.length > 0) {
    console.log("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
    for (const recommendation of report.recommendations) {
      console.log(`  ‚Ä¢ ${recommendation}`);
    }
  } else {
    console.log("‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ!");
  }
  console.log();
}

async function main() {
  console.log("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤\n");
  console.log("=".repeat(60) + "\n");

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–∏–Ω–≥
    await testRoutingPerformance();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
    await testCachePerformance();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    await generatePerformanceReport();

    console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.main) {
  main();
}
