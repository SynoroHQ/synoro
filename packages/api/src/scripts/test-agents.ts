/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

import { DEFAULT_AGENT_OPTIONS } from "../config/agents";
import { AgentMessageProcessor, createAgentSystem } from "../lib/agents";

async function testAgentSystem() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Synoro AI\n");

  const agentManager = createAgentSystem();
  const processor = new AgentMessageProcessor();

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
  console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:");
  const agents = agentManager.getAvailableAgents();
  agents.forEach((agent) => {
    console.log(`- ${agent.name}: ${agent.description}`);
    agent.capabilities.forEach((cap) => {
      console.log(`  ‚Ä¢ ${cap.name} (${cap.confidence}): ${cap.description}`);
    });
  });

  console.log("\n" + "=".repeat(80) + "\n");

  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const testMessages = [
    {
      input: "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
      type: "question",
      description: "–í–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞",
    },
    {
      input: "–ö—É–ø–∏–ª —Ö–ª–µ–± –∑–∞ 45 —Ä—É–±–ª–µ–π",
      type: "event",
      description: "–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ-–ø–æ–∫—É–ø–∫–∞",
    },
    {
      input: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
      type: "chat",
      description: "–û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
    },
    {
      input:
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞",
      type: "complex_task",
      description: "–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞",
    },
    {
      input: "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã?",
      type: "question",
      description: "–í–æ–ø—Ä–æ—Å –æ –¥–∞–Ω–Ω—ã—Ö",
    },
  ];

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testContext = {
    userId: "test-user",
    chatId: "test-chat",
    channel: "telegram" as const,
    metadata: {
      testMode: true,
    },
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  for (const testMessage of testMessages) {
    console.log(`üîç –¢–µ—Å—Ç: ${testMessage.description}`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage.input}"`);

    try {
      const startTime = Date.now();

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
      const result = await agentManager.processMessage(
        testMessage.input,
        testContext,
        DEFAULT_AGENT_OPTIONS,
      );

      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (${processingTime}ms):`);
      console.log(`üì§ –û—Ç–≤–µ—Ç: "${result.finalResponse}"`);
      console.log(`ü§ñ –ê–≥–µ–Ω—Ç—ã: ${result.agentsUsed.join(" ‚Üí ")}`);
      console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${result.qualityScore.toFixed(2)}`);
      console.log(`üîÑ –®–∞–≥–æ–≤: ${result.totalSteps}`);

      if (result.metadata) {
        if (result.metadata.classification) {
          console.log(
            `üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${result.metadata.classification.messageType} (${result.metadata.classification.confidence.toFixed(2)})`,
          );
        }
        if (result.metadata.routing) {
          console.log(
            `üéØ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: ${result.metadata.routing.targetAgent} (${result.metadata.routing.confidence.toFixed(2)})`,
          );
        }
      }
    } catch (error) {
      console.log(
        `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "Unknown error"}`,
      );
    }

    console.log("\n" + "-".repeat(80) + "\n");
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
  console.log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n");

  const hybridTestMessage = "–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü";

  try {
    console.log(`üìù –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ç–µ—Å—Ç: "${hybridTestMessage}"`);

    // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π messageType –¥–ª—è —Ç–µ—Å—Ç–∞
    const fakeMessageType = {
      type: "complex_task" as const,
      subtype: null,
      confidence: 0.9,
      need_logging: false,
    };

    const hybridResult = await processor.processHybrid(
      hybridTestMessage,
      fakeMessageType,
      {
        ...testContext,
        conversationId: "test-conversation",
        context: [],
      },
      {
        ...DEFAULT_AGENT_OPTIONS,
        forceAgentMode: true,
      },
    );

    console.log(`‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`üì§ –û—Ç–≤–µ—Ç: "${hybridResult.response}"`);
    console.log(`üîß –†–µ–∂–∏–º: ${hybridResult.processingMode}`);

    if (hybridResult.agentMetadata) {
      console.log(
        `ü§ñ –ê–≥–µ–Ω—Ç—ã: ${hybridResult.agentMetadata.agentsUsed.join(" ‚Üí ")}`,
      );
      console.log(
        `üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${hybridResult.agentMetadata.qualityScore.toFixed(2)}`,
      );
    }
  } catch (error) {
    console.log(
      `‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error instanceof Error ? error.message : "Unknown error"}`,
    );
  }

  console.log("\n" + "=".repeat(80));
  console.log("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testAgentSystem().catch(console.error);
}

export { testAgentSystem };
