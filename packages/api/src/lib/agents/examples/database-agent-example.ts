/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DatabaseAgent –∏ DatabaseToolsHandler
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∞–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ª–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import type { AgentContext } from "../types";
import { DatabaseAgent } from "../database-agent";
import { DatabaseToolsHandler } from "../database-tools-handler";

// –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const exampleContext: AgentContext = {
  userId: "user_123",
  householdId: "household_456",
  channel: "telegram",
  conversationId: "conv_789",
  metadata: {
    telegramUserId: "123456789",
    username: "example_user",
  },
};

// –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const exampleQueries = [
  "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
  "–ù–∞–π–¥–∏ –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
  "–ö–∞–∫–∞—è —É –º–µ–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º?",
  "–ü–æ–∫–∞–∂–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–µ–ª–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é",
  "–ù–∞–π–¥–∏ —Å–æ–±—ã—Ç–∏—è —Å —Ç–µ–≥–æ–º '–≤–∞–∂–Ω–æ'",
  "–°–∫–æ–ª—å–∫–æ —è –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã?",
  "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
  "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –±—ã–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã –≤—á–µ—Ä–∞?",
];

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã DatabaseAgent
 */
async function demonstrateDatabaseAgent() {
  console.log("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DatabaseAgent\n");

  const agent = new DatabaseAgent();

  for (const query of exampleQueries) {
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${query}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å
    const canHandle = await agent.canHandle({
      id: "example_task",
      input: query,
      context: exampleContext,
    });

    if (canHandle) {
      console.log("‚úÖ –ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å");

      try {
        const result = await agent.process({
          id: "example_task",
          input: query,
          context: exampleContext,
        });

        if (result.success) {
          console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
          console.log(result.data?.response || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞");
        } else {
          console.log("‚ùå –û—à–∏–±–∫–∞:", result.error);
        }
      } catch (error) {
        console.log("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ:", error);
      }
    } else {
      console.log("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å");
    }

    console.log("‚îÄ".repeat(50));
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DatabaseToolsHandler
 */
async function demonstrateDatabaseToolsHandler() {
  console.log("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DatabaseToolsHandler\n");

  const handler = new DatabaseToolsHandler();

  // –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
  try {
    const events = await handler.executeTool("get_user_events", {
      userId: "user_123",
      householdId: "household_456",
      limit: 5,
    });
    console.log("–°–æ–±—ã—Ç–∏—è:", JSON.stringify(events, null, 2));
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞:", error);
  }

  console.log("\n" + "‚îÄ".repeat(50) + "\n");

  // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  console.log("2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:");
  try {
    const stats = await handler.executeTool("get_user_stats", {
      userId: "user_123",
      householdId: "household_456",
    });
    console.log("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", JSON.stringify(stats, null, 2));
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞:", error);
  }

  console.log("\n" + "‚îÄ".repeat(50) + "\n");

  // –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π
  console.log("3. –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π:");
  try {
    const searchResults = await handler.executeTool("search_events", {
      householdId: "household_456",
      userId: "user_123",
      query: "–ø–æ–∫—É–ø–∫–∞",
      limit: 3,
    });
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", JSON.stringify(searchResults, null, 2));
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞:", error);
  }

  console.log("\n" + "‚îÄ".repeat(50) + "\n");

  // –ü—Ä–∏–º–µ—Ä 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
  console.log("4. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:");
  try {
    const recentEvents = await handler.executeTool("get_recent_events", {
      householdId: "household_456",
      userId: "user_123",
      days: 7,
      limit: 3,
    });
    console.log("–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:", JSON.stringify(recentEvents, null, 2));
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞:", error);
  }

  console.log("\n" + "‚îÄ".repeat(50) + "\n");

  // –ü—Ä–∏–º–µ—Ä 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á
  console.log("5. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á:");
  try {
    const upcomingTasks = await handler.executeTool("get_upcoming_tasks", {
      householdId: "household_456",
      userId: "user_123",
      days: 7,
      limit: 3,
    });
    console.log("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏:", JSON.stringify(upcomingTasks, null, 2));
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞:", error);
  }

  console.log("\n" + "‚îÄ".repeat(50) + "\n");

  // –ü—Ä–∏–º–µ—Ä 6: –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤
  console.log("6. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤:");
  try {
    const expenseSummary = await handler.executeTool("get_expense_summary", {
      householdId: "household_456",
      userId: "user_123",
      currency: "RUB",
    });
    console.log("–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:", JSON.stringify(expenseSummary, null, 2));
  } catch (error) {
    console.log("–û—à–∏–±–∫–∞:", error);
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö tools
 */
function demonstrateAvailableTools() {
  console.log("üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ Database Tools:\n");

  const handler = new DatabaseToolsHandler();
  const tools = handler.getAvailableTools();

  tools.forEach((tool, index) => {
    console.log(`${index + 1}. ${tool}`);
  });

  console.log("\n" + "‚îÄ".repeat(50) + "\n");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ tools
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ tools:");
  const testTools = ["get_user_events", "unknown_tool", "get_user_stats"];

  testTools.forEach((tool) => {
    const isSupported = handler.isToolSupported(tool);
    console.log(
      `${tool}: ${isSupported ? "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}`,
    );
  });
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
async function main() {
  console.log("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Database Tools –¥–ª—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤\n");
  console.log("=".repeat(60));

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö tools
  demonstrateAvailableTools();

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DatabaseToolsHandler
  await demonstrateDatabaseToolsHandler();

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DatabaseAgent
  await demonstrateDatabaseAgent();

  console.log("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
  demonstrateDatabaseAgent,
  demonstrateDatabaseToolsHandler,
  demonstrateAvailableTools,
  main,
};

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}
