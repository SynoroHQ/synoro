import type {
  EventWithDetails,
  ExpenseSummary,
  SearchResult,
  UserStats,
} from "@synoro/prompts/tools/database-tools";

import type { AgentContext } from "./agent-context";
import type { AgentResult, AgentTask, AgentTelemetry } from "./types";
import { AbstractAgent } from "./base-agent";
import { DatabaseToolsHandler } from "./database-tools-handler";

/**
 * –ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ª–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class DatabaseAgent extends AbstractAgent {
  name = "Database Agent";
  description =
    "–ê–≥–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–ª–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö";

  capabilities = [
    {
      name: "User Events Retrieval",
      description: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π",
      category: "database",
      confidence: 0.95,
    },
    {
      name: "Event Details",
      description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö",
      category: "database",
      confidence: 0.95,
    },
    {
      name: "User Statistics",
      description: "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      category: "database",
      confidence: 0.9,
    },
    {
      name: "Event Search",
      description: "–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É",
      category: "database",
      confidence: 0.9,
    },
    {
      name: "Recent Events",
      description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π",
      category: "database",
      confidence: 0.95,
    },
    {
      name: "Upcoming Tasks",
      description: "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–¥–∞—á",
      category: "database",
      confidence: 0.9,
    },
    {
      name: "Expense Analysis",
      description: "–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      category: "database",
      confidence: 0.85,
    },
  ];

  private databaseToolsHandler: DatabaseToolsHandler;

  constructor() {
    super("gpt-4o-mini");
    this.databaseToolsHandler = new DatabaseToolsHandler();
  }

  async canHandle(task: AgentTask): Promise<boolean> {
    // –ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
    const keywords = [
      "—Å–æ–±—ã—Ç–∏—è",
      "–¥–µ–ª–∞",
      "–∑–∞–¥–∞—á–∏",
      "—Ä–∞—Å—Ö–æ–¥—ã",
      "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
      "–∏—Å—Ç–æ—Ä–∏—è",
      "events",
      "tasks",
      "expenses",
      "stats",
      "history",
      "recent",
      "–ø–æ–∫–∞–∑–∞—Ç—å",
      "–Ω–∞–π—Ç–∏",
      "–ø–æ–ª—É—á–∏—Ç—å",
      "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
      "–∞–Ω–∞–ª–∏–∑",
      "show",
      "find",
      "get",
      "view",
      "analyze",
    ];

    const input = task.input.toLowerCase();
    return keywords.some((keyword) => input.includes(keyword));
  }

  async process(
    task: AgentTask,
    telemetry?: AgentTelemetry,
  ): Promise<AgentResult> {
    try {
      console.log(`üóÑÔ∏è [DATABASE AGENT] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${task.input}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ tools –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      const toolCalls = await this.analyzeAndPlanTools(task, task.context);

      if (toolCalls.length === 0) {
        return {
          success: false,
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ tools –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞",
          data: null,
        };
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º tools
      const results = await this.executeTools(toolCalls);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const response = await this.formatResponse(
        task.input,
        results,
        task.context,
      );

      return {
        success: true,
        data: {
          response,
          toolResults: results,
        },
      };
    } catch (error) {
      console.error("Error in DatabaseAgent.process:", error);
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
        data: null,
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ tools
   */
  private async analyzeAndPlanTools(
    task: AgentTask,
    context: AgentContext,
  ): Promise<{ tool: string; parameters: Record<string, unknown> }[]> {
    const input = task.input.toLowerCase();
    const tools: { tool: string; parameters: Record<string, unknown> }[] = [];

    // –ò–∑–≤–ª–µ–∫–∞–µ–º householdId –∏ userId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const householdId = context.householdId || "default";
    const userId = context.userId;

    if (!userId) {
      throw new Error("User ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ");
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ tools
    if (input.includes("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") || input.includes("stats")) {
      tools.push({
        tool: "get_user_stats",
        parameters: {
          userId,
          householdId,
        },
      });
    }

    if (input.includes("–Ω–µ–¥–∞–≤–Ω") || input.includes("recent")) {
      const days = this.extractDays(input) || 7;
      tools.push({
        tool: "get_recent_events",
        parameters: {
          userId,
          householdId,
          days,
        },
      });
    }

    if (
      input.includes("–ø—Ä–µ–¥—Å—Ç–æ—è—â") ||
      input.includes("upcoming") ||
      input.includes("–∑–∞–¥–∞—á")
    ) {
      const days = this.extractDays(input) || 7;
      tools.push({
        tool: "get_upcoming_tasks",
        parameters: {
          userId,
          householdId,
          days,
        },
      });
    }

    if (input.includes("—Ä–∞—Å—Ö–æ–¥") || input.includes("expense")) {
      tools.push({
        tool: "get_expense_summary",
        parameters: {
          userId,
          householdId,
        },
      });
    }

    if (
      input.includes("–Ω–∞–π–¥–∏") ||
      input.includes("–ø–æ–∏—Å–∫") ||
      input.includes("search")
    ) {
      const searchQuery = this.extractSearchQuery(input);
      if (searchQuery) {
        tools.push({
          tool: "search_events",
          parameters: {
            userId,
            householdId,
            query: searchQuery,
          },
        });
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    if (tools.length === 0) {
      tools.push({
        tool: "get_user_events",
        parameters: {
          userId,
          householdId,
          limit: 10,
        },
      });
    }

    return tools;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç tools –∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  private async executeTools(
    toolCalls: { tool: string; parameters: Record<string, unknown> }[],
  ): Promise<{ tool: string; result: unknown }[]> {
    const results = [];

    for (const toolCall of toolCalls) {
      try {
        const result = await this.databaseToolsHandler.executeTool(
          toolCall.tool,
          toolCall.parameters,
        );
        results.push({
          tool: toolCall.tool,
          result,
        });
      } catch (error) {
        console.error(`Error executing tool ${toolCall.tool}:`, error);
        results.push({
          tool: toolCall.tool,
          result: { error: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è tool: ${error}` },
        });
      }
    }

    return results;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ tools
   */
  private async formatResponse(
    input: string,
    results: { tool: string; result: unknown }[],
    context: AgentContext,
  ): Promise<string> {
    let response = "";

    for (const { tool, result } of results) {
      switch (tool) {
        case "get_user_events":
          response += this.formatEventsResponse(
            result as EventWithDetails[],
            "–°–æ–±—ã—Ç–∏—è",
          );
          break;

        case "get_user_stats":
          response += this.formatStatsResponse(result as UserStats);
          break;

        case "get_recent_events":
          response += this.formatEventsResponse(
            result as EventWithDetails[],
            "–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
          );
          break;

        case "get_upcoming_tasks":
          response += this.formatEventsResponse(
            result as EventWithDetails[],
            "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–¥–∞—á–∏",
          );
          break;

        case "search_events":
          response += this.formatSearchResponse(result as SearchResult);
          break;

        case "get_expense_summary":
          response += this.formatExpenseResponse(result as ExpenseSummary);
          break;

        default:
          response += `–†–µ–∑—É–ª—å—Ç–∞—Ç ${tool}: ${JSON.stringify(result, null, 2)}\n\n`;
      }
    }

    return response.trim();
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π
   */
  private formatEventsResponse(
    events: EventWithDetails[],
    title: string,
  ): string {
    if (!events || events.length === 0) {
      return `${title}: –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n`;
    }

    let response = `## ${title}\n\n`;

    events.forEach((event, index) => {
      response += `${index + 1}. **${event.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}**\n`;
      response += `   - –¢–∏–ø: ${event.type}\n`;
      response += `   - –°—Ç–∞—Ç—É—Å: ${event.status}\n`;
      response += `   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${event.priority}\n`;
      response += `   - –î–∞—Ç–∞: ${new Date(event.occurredAt).toLocaleDateString("ru-RU")}\n`;

      if (event.amount) {
        response += `   - –°—É–º–º–∞: ${event.amount} ${event.currency}\n`;
      }

      if (event.notes) {
        response += `   - –ó–∞–º–µ—Ç–∫–∏: ${event.notes}\n`;
      }

      if (event.tags && Array.isArray(event.tags) && event.tags.length > 0) {
        const tagNames = event.tags
          .filter(
            (tag: any) =>
              tag && typeof tag === "object" && tag.name !== undefined,
          )
          .map((tag: any) => String(tag.name || "unknown"))
          .join(", ");

        if (tagNames) {
          response += `   - –¢–µ–≥–∏: ${tagNames}\n`;
        }
      }

      response += "\n";
    });

    return response;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
   */
  private safeFormatNumber(value: unknown, fallback: string = "N/A"): string {
    if (typeof value === "number" && isFinite(value)) {
      return value.toFixed(2);
    }
    return fallback;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
   */
  private formatStatsResponse(stats: UserStats): string {
    let response = "## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n";

    response += `- **–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π**: ${stats.total}\n`;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–ª—é—Ç–∞–º
    if (stats.byCurrency && Object.keys(stats.byCurrency).length > 0) {
      response += "**–ü–æ –≤–∞–ª—é—Ç–∞–º:**\n";
      Object.entries(stats.byCurrency).forEach(
        ([currency, data]: [string, any]) => {
          const totalAmount = this.safeFormatNumber(data?.totalAmount, "0.00");
          const averageAmount = this.safeFormatNumber(
            data?.averageAmount,
            "0.00",
          );
          const count = typeof data?.count === "number" ? data.count : "N/A";
          response += `- ${currency}: ${totalAmount} (—Å—Ä–µ–¥–Ω–µ–µ: ${averageAmount}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${count})\n`;
        },
      );
      response += "\n";
    }

    if (stats.byType && Object.keys(stats.byType).length > 0) {
      response += "**–ü–æ —Ç–∏–ø–∞–º:**\n";
      Object.entries(stats.byType).forEach(([type, count]) => {
        response += `- ${type}: ${count}\n`;
      });
      response += "\n";
    }

    if (stats.byStatus && Object.keys(stats.byStatus).length > 0) {
      response += "**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n";
      Object.entries(stats.byStatus).forEach(([status, count]) => {
        response += `- ${status}: ${count}\n`;
      });
      response += "\n";
    }

    return response;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞
   */
  private formatSearchResponse(searchResult: SearchResult): string {
    let response = `## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchResult.query}"\n\n`;
    response += `–ù–∞–π–¥–µ–Ω–æ: ${searchResult.total} —Å–æ–±—ã—Ç–∏–π\n\n`;

    if (searchResult.events && searchResult.events.length > 0) {
      response += this.formatEventsResponse(searchResult.events, "");
    } else {
      response += "–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n";
    }

    return response;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
   */
  private formatExpenseResponse(expense: ExpenseSummary): string {
    let response = "## –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n";

    const totalAmount = this.safeFormatNumber(expense?.totalAmount, "0.00");
    const currency = expense?.currency || "N/A";
    response += `- **–û–±—â–∞—è —Å—É–º–º–∞**: ${totalAmount} ${currency}\n\n`;

    if (expense.topCategories && expense.topCategories.length > 0) {
      response += "**–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n";
      expense.topCategories.forEach((category: any, index: number) => {
        const amount = this.safeFormatNumber(category?.amount, "0.00");
        const currency = expense?.currency || "N/A";
        const count =
          typeof category?.count === "number" ? category.count : "N/A";
        response += `${index + 1}. ${category?.category || "N/A"}: ${amount} ${currency} (${count} –æ–ø–µ—Ä–∞—Ü–∏–π)\n`;
      });
      response += "\n";
    }

    return response;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractDays(input: string): number | null {
    const match = /(\d+)\s*(–¥–Ω|–¥–µ–Ω—å|–¥–Ω–µ–π|days?)/i.exec(input);
    return match ? parseInt(match[1] ?? "0") : null;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractSearchQuery(input: string): string | null {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const searchPatterns = [/–Ω–∞–π–¥–∏\s+(.+)/i, /–ø–æ–∏—Å–∫\s+(.+)/i, /search\s+(.+)/i];

    for (const pattern of searchPatterns) {
      const match = pattern.exec(input);
      if (match) {
        return match[1]?.trim() ?? null;
      }
    }

    return null;
  }
}
