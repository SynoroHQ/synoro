import type { AgentContext, AgentTask } from "./types";
import { DataAnalystAgent } from "./data-analyst-agent";
import { EventProcessorAgent } from "./event-processor-agent";
import { QASpecialistAgent } from "./qa-specialist-agent";

/**
 * –¢–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∫–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ functionId
 */
export function demonstrateTelemetrySystem() {
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const testContext: AgentContext = {
    userId: "test-user-123",
    chatId: "test-chat-456",
    messageId: "test-message-789",
    channel: "telegram",
    metadata: {
      testMode: "true",
      timestamp: Date.now().toString(),
    },
  };

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
  const testTask: AgentTask = {
    id: "test-task-001",
    type: "question",
    input: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ Synoro?",
    context: testContext,
    priority: 1,
    createdAt: new Date(),
  };

  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤
  const qaAgent = new QASpecialistAgent();
  const eventAgent = new EventProcessorAgent();
  const dataAgent = new DataAnalystAgent();

  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤");
  console.log("=".repeat(50));

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç createTelemetry –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
  console.log("\nüìä QA Specialist Agent:");
  const qaTelemetry = qaAgent["createTelemetry"]("test-operation", testTask);
  console.log(`  functionId: ${qaTelemetry.functionId}`);
  console.log(`  agentName: ${qaTelemetry.metadata?.agentName}`);
  console.log(`  taskType: ${qaTelemetry.metadata?.taskType}`);

  console.log("\nüìä Event Processor Agent:");
  const eventTelemetry = eventAgent["createTelemetry"](
    "test-operation",
    testTask,
  );
  console.log(`  functionId: ${eventTelemetry.functionId}`);
  console.log(`  agentName: ${eventTelemetry.metadata?.agentName}`);
  console.log(`  taskType: ${eventTelemetry.metadata?.taskType}`);

  console.log("\nüìä Data Analyst Agent:");
  const dataTelemetry = dataAgent["createTelemetry"](
    "test-operation",
    testTask,
  );
  console.log(`  functionId: ${dataTelemetry.functionId}`);
  console.log(`  agentName: ${dataTelemetry.metadata?.agentName}`);
  console.log(`  taskType: ${dataTelemetry.metadata?.taskType}`);

  console.log("\nüîç –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è QA –∞–≥–µ–Ω—Ç–∞:");
  const operations = [
    "question-detection",
    "answer-generation",
    "system-search",
  ];
  operations.forEach((operation) => {
    const telemetry = qaAgent["createTelemetry"](operation, testTask);
    console.log(`  ${operation}: ${telemetry.functionId}`);
  });

  console.log("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
  console.log("   –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π functionId");
  console.log("   –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–∞—Å—Å–∏—Ä—É—é—Ç—Å—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∞–≥–µ–Ω—Ç–∞");
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export default demonstrateTelemetrySystem;
