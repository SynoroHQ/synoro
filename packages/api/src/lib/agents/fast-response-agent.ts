import { generateText, generateObject } from "ai";
import { z } from "zod";

import type {
  AgentCapability,
  AgentResult,
  AgentTask,
  AgentTelemetry,
} from "./types";
import { AbstractAgent } from "./base-agent";

// –°—Ö–µ–º–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞
const fastAnalysisSchema = z.object({
  isSimpleQuery: z.boolean(),
  responseType: z.enum(["direct", "template", "ai_generated"]),
  confidence: z.number().min(0).max(1),
  suggestedResponse: z.string().optional(),
  needsFullProcessing: z.boolean(),
  reasoning: z.string(),
});

// –°—Ö–µ–º–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
const fastResponseSchema = z.object({
  response: z.string(),
  confidence: z.number().min(0).max(1),
  responseTime: z.number(),
  usedTemplate: z.boolean(),
});

/**
 * –ê–≥–µ–Ω—Ç –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 */
export class FastResponseAgent extends AbstractAgent {
  name = "Fast Response Agent";
  description = "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –ò–ò –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤";

  capabilities: AgentCapability[] = [
    {
      name: "Fast AI Analysis",
      description: "–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò",
      category: "analysis",
      confidence: 0.95,
    },
    {
      name: "Instant Response Generation",
      description: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ò–ò",
      category: "response",
      confidence: 0.9,
    },
    {
      name: "Template-based Responses",
      description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò-—à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
      category: "templates",
      confidence: 0.85,
    },
  ];

  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ò–ò-–æ—Ç–≤–µ—Ç–æ–≤
  private aiResponseCache = new Map<string, {
    response: string;
    confidence: number;
    timestamp: number;
    usageCount: number;
  }>();

  // –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ò–ò
  private aiTemplates = new Map<string, {
    template: string;
    confidence: number;
    lastUpdated: number;
  }>();

  constructor() {
    super("gpt-5-mini", 0.1); // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    void this.initializeAITemplates();
  }

  async canHandle(_task: AgentTask): Promise<boolean> {
    return Promise.resolve(true); // –ú–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-—à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  private async initializeAITemplates(): Promise<void> {
    const commonQueries = [
      "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
      "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", 
      "–≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
      "–ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏",
      "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
      "–ø—Ä–æ—â–∞–Ω–∏–µ"
    ];

    for (const queryType of commonQueries) {
      try {
        const templateData: Record<string, unknown> = await this.generateTemplateData(queryType);
        this.aiTemplates.set(queryType, {
          template: JSON.stringify(templateData),
          confidence: 0.9,
          lastUpdated: Date.now(),
        });
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ò–ò-—à–∞–±–ª–æ–Ω –¥–ª—è ${queryType}:`, error);
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–ò-—à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
   */
  private async generateTemplateData(input: string): Promise<Record<string, unknown>> {
    const { text } = await generateText({
      model: this.getModel(),
      system: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞. 
      –°–æ–∑–¥–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–ª–µ–∑–Ω—ã–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞: "${input}".
      –®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º, –Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
      –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {variable} –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.`,
      prompt: `–°–æ–∑–¥–∞–π —à–∞–±–ª–æ–Ω –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: ${input}`,
      temperature: 0.3,
    });

    try {
      return JSON.parse(text.trim()) as Record<string, unknown>;
    } catch {
      return { template: text.trim() };
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
   */
  private async fastAnalyzeQuery(task: AgentTask): Promise<{
    isSimpleQuery: boolean;
    responseType: "direct" | "template" | "ai_generated";
    confidence: number;
    suggestedResponse?: string;
    needsFullProcessing: boolean;
    reasoning: string;
  }> {
    const cacheKey = `analysis-${this.createInputHash(task.input)}`;
    const cached = this.getCachedResult<{
      isSimpleQuery: boolean;
      responseType: "direct" | "template" | "ai_generated";
      confidence: number;
      suggestedResponse?: string;
      needsFullProcessing: boolean;
      reasoning: string;
    }>(cacheKey);
    if (cached) return cached;

    try {
      const { object } = await generateObject({
        model: this.getModel(),
        schema: fastAnalysisSchema,
        system: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±—ã—Å—Ç—Ä–æ–º—É –∞–Ω–∞–ª–∏–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
        –û–ø—Ä–µ–¥–µ–ª–∏, –º–æ–∂–Ω–æ –ª–∏ –¥–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.
        
        –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –ë–´–°–¢–†–û–ì–û –û–¢–í–ï–¢–ê:
        - –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        - –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞
        - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–∞/–Ω–µ—Ç/–æ–∫)
        - –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏
        - –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        
        –¢–ò–ü–´ –û–¢–í–ï–¢–û–í:
        - direct: –ü—Ä—è–º–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        - template: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
        - ai_generated: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò`,
        prompt: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å: "${task.input}"`,
        temperature: 0.1,
        experimental_telemetry: {
          isEnabled: true,
          ...this.createTelemetry("fast-analysis", task),
        },
      });

      const result = object as {
        isSimpleQuery: boolean;
        responseType: "direct" | "template" | "ai_generated";
        confidence: number;
        suggestedResponse?: string;
        needsFullProcessing: boolean;
        reasoning: string;
      };
      this.setCachedResult(cacheKey, result);
      return result;
    } catch (error: unknown) {
      console.warn("–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", error);
      return {
        isSimpleQuery: false,
        responseType: "ai_generated",
        confidence: 0.3,
        needsFullProcessing: true,
        reasoning: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò
   */
  private async generateFastAIResponse(
    input: string,
    task: AgentTask,
  ): Promise<string> {
    const cacheKey = `response-${this.createInputHash(input)}`;
    const cached = this.aiResponseCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      cached.usageCount++;
      console.log("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò-–æ—Ç–≤–µ—Ç");
      return cached.response;
    }

    const startTime = Date.now();

    try {
      const { object } = await generateObject({
        model: this.getModel(),
        schema: fastResponseSchema,
        system: `–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∏—Å—Ç–µ–º–µ Synoro.
        –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ü–†–ò–ù–¶–ò–ü–´ –ë–´–°–¢–†–´–• –û–¢–í–ï–¢–û–í:
        - –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        - –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
        - –ü—Ä–µ–¥–ª–∞–≥–∞–π –¥–∞–ª—å–Ω–µ–π—à—É—é –ø–æ–º–æ—â—å –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
        - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏ (—É–º–µ—Ä–µ–Ω–Ω–æ)
        - –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ`,
        prompt: `–î–∞–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞: "${input}"`,
        temperature: 0.2,
        experimental_telemetry: {
          isEnabled: true,
          ...this.createTelemetry("fast-ai-response", task),
        },
      });

      const responseTime = Date.now() - startTime;
      const response = object.response;

      // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      this.aiResponseCache.set(cacheKey, {
        response,
        confidence: object.confidence,
        timestamp: Date.now(),
        usageCount: 1,
      });

      console.log(`ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±—ã—Å—Ç—Ä—ã–π –ò–ò-–æ—Ç–≤–µ—Ç –∑–∞ ${responseTime}ms`);
      return response;
    } catch (error: unknown) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ò–ò-–æ—Ç–≤–µ—Ç–∞:", error);
      return "–ü–æ–Ω—è–ª –≤–∞—Å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä";
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async process(
    task: AgentTask,
    _telemetry?: AgentTelemetry,
  ): Promise<AgentResult<string>> {
    const startTime = Date.now();

    try {
      // 1. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –ò–ò
      const analysis = await this.fastAnalyzeQuery(task);

      if (!analysis.isSimpleQuery || analysis.needsFullProcessing) {
        return this.createErrorResult(
          "–ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
          analysis.confidence,
        );
      }

      let response: string;

      // 2. –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
      switch (analysis.responseType) {
        case "direct":
          response = analysis.suggestedResponse ?? "–ü–æ–Ω—è–ª! üëç";
          break;

        case "template": {
          const templateType = this.detectTemplateType(task.input);
          const template = this.aiTemplates.get(templateType);
          if (template) {
            const templateData = JSON.parse(template.template) as Record<string, unknown>;
            response = this.fillTemplate(templateData, task);
          } else {
            response = await this.generateFastAIResponse(task.input, task);
          }
          break;
        }

        case "ai_generated":
        default: {
          response = await this.generateFastAIResponse(task.input, task);
          break;
        }
      }

      const processingTime = Date.now() - startTime;

      return this.createSuccessResult(
        response,
        analysis.confidence,
        `–ë—ã—Å—Ç—Ä—ã–π –ò–ò-–æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ ${processingTime}ms (${analysis.responseType})`,
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ FastResponseAgent:", error);
      return this.createErrorResult(
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç",
        0.3,
      );
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   */
  private detectTemplateType(input: string): string {
    const lowerInput = input.toLowerCase();
    
    if (/–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π/.test(lowerInput)) return "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ";
    if (/—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é/.test(lowerInput)) return "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å";
    if (/—á—Ç–æ.*–º–æ–∂–µ—à—å|—á—Ç–æ.*—É–º–µ–µ—à—å|–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏/.test(lowerInput)) return "–≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö";
    if (/–ø–æ–º–æ–≥–∏|–ø–æ–º–æ—â—å/.test(lowerInput)) return "–ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏";
    if (/–¥–∞|–Ω–µ—Ç|–æ–∫|—Ö–æ—Ä–æ—à–æ|—Å–æ–≥–ª–∞—Å–µ–Ω/.test(lowerInput)) return "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ";
    if (/–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|—É–≤–∏–¥–∏–º—Å—è/.test(lowerInput)) return "–ø—Ä–æ—â–∞–Ω–∏–µ";
    
    return "–æ–±—â–∏–π";
  }

  /**
   * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
   */
  private fillTemplate(template: Record<string, unknown>, task: AgentTask): string {
    return JSON.stringify(template)
      .replace(/{user}/g, task.context.userId ?? "–¥—Ä—É–≥")
      .replace(/{time}/g, new Date().toLocaleTimeString("ru-RU"))
      .replace(/{date}/g, new Date().toLocaleDateString("ru-RU"));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  getStats(): {
    cacheSize: number;
    templatesCount: number;
    totalUsage: number;
    averageResponseTime: number;
  } {
    const totalUsage = Array.from(this.aiResponseCache.values())
      .reduce((sum, item) => sum + item.usageCount, 0);

    return {
      cacheSize: this.aiResponseCache.size,
      templatesCount: this.aiTemplates.size,
      totalUsage,
      averageResponseTime: 50, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
   */
  clearCache(): void {
    this.aiResponseCache.clear();
    console.log("üßπ –ö—ç—à –±—ã—Å—Ç—Ä—ã—Ö –ò–ò-–æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω");
  }
}
