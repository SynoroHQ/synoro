import { generateText } from "ai";

import type { AgentCapability, AgentResult, AgentTask } from "./types";
import { AbstractAgent } from "./base-agent";

export class GeneralAssistantAgent extends AbstractAgent {
  name = "General Assistant";
  description =
    "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã";
  capabilities: AgentCapability[] = [
    {
      name: "General Help",
      description: "–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏",
      category: "general",
      confidence: 0.85,
    },
    {
      name: "Conversation",
      description: "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –±–µ—Å–µ–¥–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—â–µ–Ω–∏—è",
      category: "chat",
      confidence: 0.8,
    },
    {
      name: "Basic Q&A",
      description: "–ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ —Å–ø–µ—Ü. —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã",
      category: "question",
      confidence: 0.75,
    },
  ];

  constructor() {
    super("gpt-5-mini");
  }

  async canHandle(task: AgentTask): Promise<boolean> {
    return true; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ AI
  }

  async process(task: AgentTask): Promise<AgentResult<string>> {
    try {
      const systemPrompt = `–¢—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Synoro AI.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –±–µ—Å–µ–¥—É
3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã
4. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

–¢–í–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
- üí¨ –û–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- ‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
- üí° –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
- üß† –ü–æ–º–æ—â—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –º—ã—Å–ª–µ–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- üìä –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- üìù –ü–æ–º–æ—â—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
- üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
- üîç –ü–æ–∏—Å–∫ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í:
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–∏ –∏ –±–ª–æ–∫–∏
- –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ —Ä–µ—à–µ–Ω–∏—è
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º

–ö–û–ù–¢–ï–ö–°–¢:
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.context?.userId || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
- –î–æ–º–∞—à–Ω–µ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ: ${task.context?.householdId || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
- –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString("ru-RU")}

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.`;

      const { text } = await generateText({
        model: this.getModel(),
        system: systemPrompt,
        prompt: task.input,
        experimental_telemetry: {
          isEnabled: true,
          ...this.createTelemetry("general-assistant", task),
        },
      });

      return this.createSuccessResult(text, 0.8);
    } catch (error) {
      console.error("Error in GeneralAssistantAgent:", error);
      return this.createErrorResult(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
      );
    }
  }

  shouldLog(task: AgentTask): Promise<boolean> {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    return Promise.resolve(
      task.input.length > 50 || task.context.channel === "telegram",
    );
  }
}
