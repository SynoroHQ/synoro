import type {
  BaseAgent,
  AgentTask,
  AgentResult,
  AgentTelemetry,
  OrchestrationResult,
  AgentContext,
} from "./types";

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
import { RouterAgent } from "./router-agent";
import { QASpecialistAgent } from "./qa-specialist-agent";
import { EventProcessorAgent } from "./event-processor-agent";
import { TaskOrchestratorAgent } from "./task-orchestrator-agent";
import { QualityEvaluatorAgent } from "./quality-evaluator-agent";

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã orchestration –∏ routing –∏–∑ AI SDK
 */
export class AgentManager {
  private agents: Map<string, BaseAgent> = new Map();
  private router: RouterAgent;
  private qualityEvaluator: QualityEvaluatorAgent;

  constructor() {
    this.initializeAgents();
    this.router = new RouterAgent();
    this.qualityEvaluator = new QualityEvaluatorAgent();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
   */
  private initializeAgents() {
    const agentInstances = [
      new QASpecialistAgent(),
      new EventProcessorAgent(),
      new TaskOrchestratorAgent(),
    ];

    agentInstances.forEach(agent => {
      this.agents.set(this.getAgentKey(agent.name), agent);
    });

    console.log(`Initialized ${this.agents.size} agents:`, Array.from(this.agents.keys()));
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–∞ –∞–≥–µ–Ω—Ç–∞
   */
  private getAgentKey(agentName: string): string {
    return agentName.toLowerCase().replace(/\s+/g, "-");
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É
   */
  private getAgent(agentKey: string): BaseAgent | undefined {
    return this.agents.get(agentKey);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
   */
  private createAgentTask(
    input: string,
    type: string,
    context: AgentContext,
    priority: number = 1
  ): AgentTask {
    return {
      id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      input,
      context,
      priority,
      createdAt: new Date(),
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async processMessage(
    input: string,
    context: AgentContext,
    options: {
      useQualityControl?: boolean;
      maxQualityIterations?: number;
      targetQuality?: number;
    } = {},
    telemetry?: AgentTelemetry
  ): Promise<OrchestrationResult> {
    const startTime = Date.now();
    const agentsUsed: string[] = [];
    let totalSteps = 0;

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
      const routingTask = this.createAgentTask(input, "routing", context);
      
      // 2. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log("ü§ñ Starting message routing...");
      const routingResult = await this.router.process(routingTask, telemetry);
      agentsUsed.push(this.router.name);
      totalSteps++;

      if (!routingResult.success || !routingResult.data) {
        throw new Error("Failed to route message");
      }

      const { classification, routing } = routingResult.data;
      console.log(`üìã Classification: ${classification.messageType} (${classification.complexity})`);
      console.log(`üéØ Routed to: ${routing.targetAgent}`);

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const targetAgent = this.getAgent(routing.targetAgent);
      if (!targetAgent) {
        throw new Error(`Target agent not found: ${routing.targetAgent}`);
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
      const processingTask = this.createAgentTask(
        input,
        classification.messageType,
        context
      );

      const canHandle = await targetAgent.canHandle(processingTask);
      if (!canHandle) {
        console.warn(`‚ö†Ô∏è Agent ${routing.targetAgent} cannot handle task, using fallback`);
        // Fallback –∫ QA –∞–≥–µ–Ω—Ç—É
        const fallbackAgent = this.getAgent("qa-specialist");
        if (fallbackAgent) {
          const fallbackResult = await fallbackAgent.process(processingTask, telemetry);
          agentsUsed.push(fallbackAgent.name);
          totalSteps++;
          
          return {
            finalResponse: fallbackResult.data || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            agentsUsed,
            totalSteps,
            qualityScore: fallbackResult.confidence || 0.5,
            metadata: {
              classification,
              routing,
              fallbackUsed: true,
              processingTime: Date.now() - startTime,
            },
          };
        }
      }

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—Å–Ω–æ–≤–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
      console.log(`‚öôÔ∏è Processing with ${targetAgent.name}...`);
      const processingResult = await targetAgent.process(processingTask, telemetry);
      agentsUsed.push(targetAgent.name);
      totalSteps++;

      if (!processingResult.success) {
        throw new Error(`Agent processing failed: ${processingResult.error}`);
      }

      let finalResponse = "";
      let qualityScore = processingResult.confidence || 0.7;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
      if (typeof processingResult.data === "string") {
        finalResponse = processingResult.data;
      } else if (processingResult.data?.response) {
        finalResponse = processingResult.data.response;
      } else if (processingResult.data?.finalSummary) {
        finalResponse = processingResult.data.finalSummary;
      } else {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        finalResponse = this.formatAgentResponse(classification.messageType, processingResult.data);
      }

      // 6. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
      if (options.useQualityControl && finalResponse) {
        console.log("üîç Running quality control...");
        
        const qualityResult = await this.qualityEvaluator.evaluateAndImprove(
          input,
          finalResponse,
          options.maxQualityIterations || 2,
          options.targetQuality || 0.8,
          { classification, routing, agentData: processingResult.data },
          telemetry
        );

        agentsUsed.push(this.qualityEvaluator.name);
        totalSteps += qualityResult.iterationsUsed;
        finalResponse = qualityResult.finalResponse;
        qualityScore = qualityResult.finalQuality;

        console.log(`‚ú® Quality improved: ${qualityScore.toFixed(2)} (${qualityResult.iterationsUsed} iterations)`);
      }

      // 7. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result: OrchestrationResult = {
        finalResponse,
        agentsUsed,
        totalSteps,
        qualityScore,
        metadata: {
          classification,
          routing,
          processingTime: Date.now() - startTime,
          agentData: processingResult.data,
          qualityControlUsed: options.useQualityControl || false,
        },
      };

      console.log(`‚úÖ Processing completed in ${result.metadata.processingTime}ms`);
      console.log(`üìä Agents used: ${agentsUsed.join(" ‚Üí ")}`);
      console.log(`‚≠ê Quality score: ${qualityScore.toFixed(2)}`);

      return result;
    } catch (error) {
      console.error("‚ùå Error in agent orchestration:", error);
      
      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É
      return {
        finalResponse: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        agentsUsed: agentsUsed.length > 0 ? agentsUsed : ["error-handler"],
        totalSteps: totalSteps + 1,
        qualityScore: 0.3,
        metadata: {
          error: error instanceof Error ? error.message : "Unknown error",
          processingTime: Date.now() - startTime,
        },
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  private formatAgentResponse(messageType: string, agentData: any): string {
    switch (messageType) {
      case "event":
        if (agentData?.advice && agentData?.parsedEvent) {
          return `–ó–∞–ø–∏—Å–∞–ª —Å–æ–±—ã—Ç–∏–µ: "${agentData.parsedEvent.object || '—Å–æ–±—ã—Ç–∏–µ'}". ${agentData.advice}`;
        }
        if (agentData?.parsedEvent) {
          return `–ó–∞–ø–∏—Å–∞–ª: "${agentData.parsedEvent.object || '—Å–æ–±—ã—Ç–∏–µ'}".`;
        }
        return "–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.";

      case "question":
        return agentData || "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.";

      case "complex_task":
        if (agentData?.finalSummary) {
          return agentData.finalSummary;
        }
        return "–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.";

      case "chat":
        return agentData || "–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!";

      default:
        return typeof agentData === "string" ? agentData : "–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.";
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
   */
  getAvailableAgents(): Array<{ key: string; name: string; description: string; capabilities: any[] }> {
    const result = [];
    
    for (const [key, agent] of this.agents) {
      result.push({
        key,
        name: agent.name,
        description: agent.description,
        capabilities: agent.capabilities,
      });
    }

    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
   */
  getAgentStats(): { totalAgents: number; agentList: string[] } {
    return {
      totalAgents: this.agents.size,
      agentList: Array.from(this.agents.keys()),
    };
  }
}
