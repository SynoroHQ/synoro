import type {
  AgentCapability,
  AgentContext,
  AgentTask,
  AgentTelemetry,
  BaseAgent,
  OrchestrationResult,
} from "./types";
import { DataAnalystAgent } from "./data-analyst-agent";
import { EventProcessorAgent } from "./event-processor-agent";
import { GeneralAssistantAgent } from "./general-assistant-agent";
import { QASpecialistAgent } from "./qa-specialist-agent";
import { QualityEvaluatorAgent } from "./quality-evaluator-agent";
// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
import { RouterAgent } from "./router-agent";
import { TaskManagerAgent } from "./task-manager-agent";
import { TaskOrchestratorAgent } from "./task-orchestrator-agent";
import { TelegramFormatterAgent } from "./telegram-formatter-agent";
import { globalAgentRegistry } from "./agent-registry";

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã orchestration –∏ routing –∏–∑ AI SDK
 */
export class AgentManager {
  private router: RouterAgent;
  private qualityEvaluator: QualityEvaluatorAgent;

  constructor() {
    this.initializeAgents();
    this.router = new RouterAgent();
    this.qualityEvaluator = new QualityEvaluatorAgent();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
   */
  private initializeAgents() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    if (globalAgentRegistry.getAll().size === 0) {
      const agentInstances = [
        new QASpecialistAgent(),
        new EventProcessorAgent(),
        new TaskOrchestratorAgent(),
        new GeneralAssistantAgent(),
        new DataAnalystAgent(),
        new TaskManagerAgent(),
        new TelegramFormatterAgent(),
      ];

      agentInstances.forEach((agent) => {
        globalAgentRegistry.register(agent);
      });

      console.log(
        `Initialized ${globalAgentRegistry.getAll().size} agents:`,
        Array.from(globalAgentRegistry.getAll().keys()),
      );
    } else {
      console.log(
        `Using existing ${globalAgentRegistry.getAll().size} agents from registry:`,
        Array.from(globalAgentRegistry.getAll().keys()),
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É
   */
  getAgent(agentKey: string): BaseAgent | undefined {
    return globalAgentRegistry.get(agentKey);
  }


  /**
   * –£–∑–∫–∏–π type guard –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
   */
  private isRecord(value: unknown): value is Record<string, unknown> {
    return typeof value === "object" && value !== null;
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  private extractStringResponse(data: unknown): string | null {
    if (typeof data === "string") return data;
    if (this.isRecord(data)) {
      const maybeResponse = data.response;
      if (typeof maybeResponse === "string") return maybeResponse;

      const maybeFinal = data.finalSummary;
      if (typeof maybeFinal === "string") return maybeFinal;
    }
    return null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
   */
  private createAgentTask(
    input: string,
    type: string,
    context: AgentContext,
    priority = 1,
  ): AgentTask {
    return {
      id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      input,
      context,
      priority,
      createdAt: new Date(),
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  async processMessage(
    input: string,
    context: AgentContext,
    options: {
      useQualityControl?: boolean;
      maxQualityIterations?: number;
      targetQuality?: number;
    } = {},
    telemetry?: AgentTelemetry,
  ): Promise<OrchestrationResult> {
    const startTime = Date.now();
    const agentsUsed: string[] = [];
    let totalSteps = 0;

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
      const routingTask = this.createAgentTask(input, "routing", context);

      // 2. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log("ü§ñ Starting message routing...");
      const routingResult = await this.router.process(routingTask, telemetry);
      agentsUsed.push(this.router.name);
      totalSteps++;

      if (!routingResult.success || !routingResult.data) {
        throw new Error("Failed to route message");
      }

      const { classification, routing } = routingResult.data;
      console.log(
        `üìã Classification: ${classification.messageType} (${classification.complexity})`,
      );
      console.log(`üéØ Routed to: ${routing.targetAgent}`);

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const targetAgent = this.getAgent(routing.targetAgent);
      if (!targetAgent) {
        throw new Error(`Target agent not found: ${routing.targetAgent}`);
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
      const processingTask = this.createAgentTask(
        input,
        classification.messageType,
        context,
      );

      const canHandle = await targetAgent.canHandle(processingTask);
      if (!canHandle) {
        console.warn(
          `‚ö†Ô∏è Agent ${routing.targetAgent} cannot handle task, using fallback`,
        );
        // Fallback –∫ QA –∞–≥–µ–Ω—Ç—É
        const fallbackAgent = this.getAgent("qa-specialist");
        if (fallbackAgent) {
          const fallbackResult = await fallbackAgent.process(
            processingTask,
            telemetry,
          );
          agentsUsed.push(fallbackAgent.name);
          totalSteps++;

          return {
            finalResponse:
              this.extractStringResponse(fallbackResult.data) ??
              "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            agentsUsed,
            totalSteps,
            qualityScore: fallbackResult.confidence ?? 0.5,
            metadata: {
              classification,
              routing,
              fallbackUsed: true,
              processingTime: Date.now() - startTime,
            },
          };
        }
      }

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—Å–Ω–æ–≤–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
      console.log(`‚öôÔ∏è Processing with ${targetAgent.name}...`);
      const processingResult = await targetAgent.process(
        processingTask,
        telemetry,
      );
      agentsUsed.push(targetAgent.name);
      totalSteps++;

      if (!processingResult.success) {
        throw new Error(`Agent processing failed: ${processingResult.error}`);
      }

      let finalResponse = "";
      let qualityScore = processingResult.confidence ?? 0.7;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
      const extracted = this.extractStringResponse(processingResult.data);
      if (extracted !== null) {
        finalResponse = extracted;
      } else {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        finalResponse = this.formatAgentResponse(
          classification.messageType,
          processingResult.data,
        );
      }

      // 6. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
      if (options.useQualityControl && finalResponse) {
        console.log("üîç Running quality control...");

        const {
          iterationsUsed,
          finalResponse: improvedResponse,
          finalQuality,
        } = await this.qualityEvaluator.evaluateAndImprove(
          input,
          finalResponse,
          options.maxQualityIterations ?? 2,
          options.targetQuality ?? 0.8,
          processingTask,
          context,
          telemetry,
        );

        agentsUsed.push(this.qualityEvaluator.name);
        totalSteps += iterationsUsed;
        finalResponse = improvedResponse;
        qualityScore = finalQuality;

        console.log(
          `‚ú® Quality improved: ${qualityScore.toFixed(2)} (${iterationsUsed} iterations)`,
        );
      }

      // 7. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result: OrchestrationResult = {
        finalResponse,
        agentsUsed,
        totalSteps,
        qualityScore,
        metadata: {
          classification,
          routing,
          processingTime: Date.now() - startTime,
          agentData: this.isRecord(processingResult.data)
            ? processingResult.data
            : undefined,
          qualityControlUsed: options.useQualityControl ?? false,
        },
      };

      console.log(
        `‚úÖ Processing completed in ${result.metadata.processingTime}ms`,
      );
      console.log(`üìä Agents used: ${agentsUsed.join(" ‚Üí ")}`);
      console.log(`‚≠ê Quality score: ${qualityScore.toFixed(2)}`);

      return result;
    } catch (error) {
      console.error("‚ùå Error in agent orchestration:", error);

      // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É
      return {
        finalResponse:
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        agentsUsed: agentsUsed.length > 0 ? agentsUsed : ["error-handler"],
        totalSteps: totalSteps + 1,
        qualityScore: 0.3,
        metadata: {
          error: error instanceof Error ? error.message : "Unknown error",
          processingTime: Date.now() - startTime,
        },
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  private formatAgentResponse(messageType: string, agentData: unknown): string {
    switch (messageType) {
      case "event":
        if (this.isRecord(agentData)) {
          const adv = agentData.advice;
          const parsed = agentData.parsedEvent;
          let objectName = "—Å–æ–±—ã—Ç–∏–µ";
          if (this.isRecord(parsed)) {
            const objVal = (parsed as { object?: unknown }).object;
            if (typeof objVal === "string") objectName = objVal;
            const adviceStr = typeof adv === "string" ? adv : null;
            if (adviceStr) {
              return `–ó–∞–ø–∏—Å–∞–ª —Å–æ–±—ã—Ç–∏–µ: "${objectName}". ${adviceStr}`;
            }
            return `–ó–∞–ø–∏—Å–∞–ª: "${objectName}".`;
          }
        }
        return "–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.";

      case "question":
        return typeof agentData === "string" ? agentData : "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.";

      case "complex_task":
        if (this.isRecord(agentData)) {
          const final = agentData.finalSummary;
          if (typeof final === "string") return final;
        }
        return "–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.";

      case "chat":
        return typeof agentData === "string"
          ? agentData
          : "–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!";

      default:
        return typeof agentData === "string" ? agentData : "–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.";
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
   */
  getAvailableAgents(): {
    key: string;
    name: string;
    description: string;
    capabilities: AgentCapability[];
  }[] {
    const result = [];
    const agents = globalAgentRegistry.getAll();

    for (const [key, agent] of agents) {
      result.push({
        key,
        name: agent.name,
        description: agent.description,
        capabilities: agent.capabilities,
      });
    }

    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
   */
  getAgentStats(): { totalAgents: number; agentList: string[] } {
    const agents = globalAgentRegistry.getAll();
    return {
      totalAgents: agents.size,
      agentList: Array.from(agents.keys()),
    };
  }
}
