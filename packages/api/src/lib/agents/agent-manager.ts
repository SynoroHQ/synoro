import { randomUUID } from "crypto";
import { z } from "zod";

import type { AgentContext } from "./agent-context";
import type {
  AgentCapability,
  AgentResult,
  AgentTask,
  AgentTelemetry,
  BaseAgent,
  MessageHistoryItem,
  OrchestrationResult,
} from "./types";
import { globalAgentRegistry } from "./agent-registry";
import { conversationManager } from "./conversation-manager";
import { DataAnalystAgent } from "./data-analyst-agent";
import { EventProcessorAgent } from "./event-processor-agent";
import { GeneralAssistantAgent } from "./general-assistant-agent";
import { QASpecialistAgent } from "./qa-specialist-agent";
import { QualityEvaluatorAgent } from "./quality-evaluator-agent";
// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
import { RouterAgent } from "./router-agent";
import { TaskManagerAgent } from "./task-manager-agent";
import { TaskOrchestratorAgent } from "./task-orchestrator-agent";
import { TelegramFormatterAgent } from "./telegram-formatter-agent";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
interface ParallelTask {
  id: string;
  agent: BaseAgent;
  task: AgentTask;
  priority: number;
}

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã orchestration, routing, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export class AgentManager {
  private router: RouterAgent;
  private qualityEvaluator: QualityEvaluatorAgent;

  // –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  private taskQueue: ParallelTask[] = [];
  private processingTasks = new Set<string>();
  private maxConcurrentTasks = 3;

  // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private performanceMetrics = {
    totalRequests: 0,
    averageResponseTime: 0,
    errorRate: 0,
    parallelTasksProcessed: 0,
  };

  constructor() {
    this.initializeAgents();
    this.router = new RouterAgent();
    this.qualityEvaluator = new QualityEvaluatorAgent();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    this.startBackgroundTasks();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
   */
  private initializeAgents() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    if (globalAgentRegistry.getAll().size === 0) {
      const agentInstances = [
        new QASpecialistAgent(),
        new EventProcessorAgent(),
        new TaskOrchestratorAgent(),
        new GeneralAssistantAgent(),
        new DataAnalystAgent(),
        new TaskManagerAgent(),
        new TelegramFormatterAgent(),
      ];

      agentInstances.forEach((agent) => {
        globalAgentRegistry.register(agent);
      });

      console.log(
        `Initialized ${globalAgentRegistry.getAll().size} agents:`,
        Array.from(globalAgentRegistry.getAll().keys()),
      );
    } else {
      console.log(
        `Using existing ${globalAgentRegistry.getAll().size} agents from registry:`,
        Array.from(globalAgentRegistry.getAll().keys()),
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É
   */
  getAgent(agentKey: string): BaseAgent | undefined {
    return globalAgentRegistry.get(agentKey);
  }

  /**
   * –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private startBackgroundTasks(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    setInterval(() => {
      void this.processTaskQueue();
    }, 100);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  private async processTaskQueue(): Promise<void> {
    if (
      this.taskQueue.length === 0 ||
      this.processingTasks.size >= this.maxConcurrentTasks
    ) {
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    this.taskQueue.sort((a, b) => b.priority - a.priority);

    const task = this.taskQueue.shift();
    if (!task) return;

    this.processingTasks.add(task.id);

    try {
      await task.agent.process(task.task);
      this.performanceMetrics.parallelTasksProcessed++;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ ${task.id}:`, error);
    } finally {
      this.processingTasks.delete(task.id);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private addToTaskQueue(
    agent: BaseAgent,
    task: AgentTask,
    priority = 1,
  ): void {
    this.taskQueue.push({
      id: `parallel-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      agent,
      task,
      priority,
    });
  }

  /**
   * –£–∑–∫–∏–π type guard –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
   */
  private isRecord(value: unknown): value is Record<string, unknown> {
    return typeof value === "object" && value !== null;
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
   */
  private extractStringResponse(data: unknown): string | null {
    if (typeof data === "string") return data;
    if (this.isRecord(data)) {
      const maybeResponse = data.response;
      if (typeof maybeResponse === "string") return maybeResponse;

      const maybeFinal = data.finalSummary;
      if (typeof maybeFinal === "string") return maybeFinal;
    }
    return null;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
   */
  private createAgentTask(
    input: string,
    type: string,
    context: AgentContext,
    priority = 1,
    messageHistory?: MessageHistoryItem[],
  ): AgentTask {
    return {
      id: `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      type,
      input,
      context,
      priority,
      createdAt: new Date(),
      messageHistory,
    };
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async processMessage(
    input: string,
    context: AgentContext,
    options: {
      useQualityControl?: boolean;
      maxQualityIterations?: number;
      targetQuality?: number;
      enableParallelProcessing?: boolean;
      messageHistory?: MessageHistoryItem[];
    } = {},
    telemetry?: AgentTelemetry,
  ): Promise<OrchestrationResult> {
    const startTime = Date.now();
    const agentsUsed: string[] = [];
    let totalSteps = 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    this.performanceMetrics.totalRequests++;

    try {
      // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞
      const routingTask = this.createAgentTask(
        input,
        "routing",
        context,
        1,
        options.messageHistory,
      );

      // 2. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log("ü§ñ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏...");
      const routingResult = await this.router.process(routingTask, telemetry);
      agentsUsed.push(this.router.name);
      totalSteps++;

      if (!routingResult.success || !routingResult.data) {
        throw new Error("Failed to route message");
      }

      const { classification, routing } = routingResult.data;
      console.log(
        `üìã Classification: ${classification.messageType} (${classification.complexity})`,
      );
      console.log(`üéØ Routed to: ${routing.targetAgent}`);

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const targetAgent = this.getAgent(routing.targetAgent);
      if (!targetAgent) {
        throw new Error(`Target agent not found: ${routing.targetAgent}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const canUseParallel =
        options.enableParallelProcessing &&
        classification.complexity === "complex" &&
        routing.shouldParallel;

      if (canUseParallel && routing.followUpAgents?.length) {
        console.log("‚ö° –í–∫–ª—é—á–µ–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏");
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å
        routing.followUpAgents.forEach((agentKey) => {
          const agent = this.getAgent(agentKey);
          if (agent) {
            const parallelTask = this.createAgentTask(
              input,
              classification.messageType,
              context,
              2,
              options.messageHistory,
            );
            this.addToTaskQueue(agent, parallelTask, 2);
          }
        });
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
      const processingTask = this.createAgentTask(
        input,
        classification.messageType,
        context,
        1,
        options.messageHistory,
      );

      const canHandle = await targetAgent.canHandle(processingTask);
      if (!canHandle) {
        console.warn(
          `‚ö†Ô∏è Agent ${routing.targetAgent} cannot handle task, using fallback`,
        );
        // Fallback –∫ QA –∞–≥–µ–Ω—Ç—É
        const fallbackAgent = this.getAgent("qa-specialist");
        if (fallbackAgent) {
          const fallbackResult = await fallbackAgent.process(
            processingTask,
            telemetry,
          );
          agentsUsed.push(fallbackAgent.name);
          totalSteps++;

          return {
            finalResponse:
              this.extractStringResponse(fallbackResult.data) ??
              "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            agentsUsed,
            totalSteps,
            qualityScore: fallbackResult.confidence ?? 0.5,
            metadata: {
              classification,
              routing,
              fallbackUsed: true,
              processingTime: Date.now() - startTime,
            },
          };
        }
      }

      // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—Å–Ω–æ–≤–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      console.log(`‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é ${targetAgent.name}...`);
      let processingResult: AgentResult<unknown>;

      try {
        processingResult = (await Promise.race([
          targetAgent.process(processingTask, telemetry),
          new Promise(
            (_, reject) =>
              setTimeout(() => reject(new Error("Timeout")), 30000), // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
          ),
        ])) as any;
      } catch (error) {
        if (error instanceof Error && error.message === "Timeout") {
          console.warn(
            `‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ${targetAgent.name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`,
          );
          const fallbackAgent = this.getAgent("general-assistant");
          if (fallbackAgent) {
            processingResult = await fallbackAgent.process(
              processingTask,
              telemetry,
            );
            agentsUsed.push(`${fallbackAgent.name} (fallback)`);
          } else {
            throw new Error("Fallback agent not available");
          }
        } else {
          throw error;
        }
      }

      agentsUsed.push(targetAgent.name);
      totalSteps++;

      if (!processingResult?.success) {
        throw new Error(
          `Agent processing failed: ${processingResult?.error ?? "Unknown error"}`,
        );
      }

      let finalResponse = "";
      const qualityScore = processingResult?.confidence ?? 0.7;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
      const extracted = this.extractStringResponse(processingResult?.data);
      if (extracted !== null) {
        finalResponse = extracted;
      } else {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        finalResponse = this.formatAgentResponse(
          classification.messageType,
          processingResult?.data,
        );
      }

      // 6. –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω
      // Quality control is disabled for better performance

      // 7. –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
      const processingTime = Date.now() - startTime;

      const result: OrchestrationResult = {
        finalResponse,
        agentsUsed,
        totalSteps,
        qualityScore: 1.0, // Fixed quality score since evaluation is disabled
        metadata: {
          classification,
          routing,
          processingTime,
          agentData: this.isRecord(processingResult?.data)
            ? processingResult.data
            : undefined,
          qualityControlUsed: false, // Always disabled
          shouldLogEvent: classification.needsLogging,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          parallelProcessingUsed: canUseParallel,
          responseTimeCategory:
            processingTime < 1000
              ? "fast"
              : processingTime < 3000
                ? "medium"
                : "slow",
          agentEfficiency: qualityScore / (processingTime / 1000), // –∫–∞—á–µ—Å—Ç–≤–æ/—Å–µ–∫—É–Ω–¥–∞
        },
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      this.updatePerformanceMetrics(processingTime, true);

      // 8. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram, –µ—Å–ª–∏ —ç—Ç–æ Telegram –∫–∞–Ω–∞–ª
      if (context.channel === "telegram" && finalResponse) {
        console.log("üì± Formatting response for Telegram...");

        const telegramFormatter = this.getAgent("telegram-formatter");
        if (telegramFormatter) {
          const formattingTask = this.createAgentTask(
            finalResponse,
            "telegram-formatting",
            context,
            1,
            options.messageHistory,
          );

          try {
            const formattingResult = await telegramFormatter.process(
              formattingTask,
              telemetry,
            );
            if (formattingResult.success && formattingResult.data) {
              result.finalResponse = formattingResult.data as string;
              agentsUsed.push(telegramFormatter.name);
              totalSteps++;
              console.log("‚úÖ Response formatted for Telegram");
            }
          } catch (error) {
            console.warn(
              "‚ö†Ô∏è Telegram formatting failed, using original response:",
              error,
            );
          }
        }
      }

      console.log(
        `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}ms —Å ${totalSteps} —à–∞–≥–∞–º–∏`,
      );
      console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: ${agentsUsed.join(" ‚Üí ")}`);
      console.log(`‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${qualityScore.toFixed(2)}`);
      console.log(
        `üöÄ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${(result.metadata.agentEfficiency as number)?.toFixed(2) ?? "N/A"} –∫–∞—á–µ—Å—Ç–≤–æ/—Å–µ–∫`,
      );

      return result;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤:", error);

      const processingTime = Date.now() - startTime;
      this.updatePerformanceMetrics(processingTime, false);

      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã—à–µ
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private updatePerformanceMetrics(
    processingTime: number,
    success: boolean,
  ): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    this.performanceMetrics.averageResponseTime =
      (this.performanceMetrics.averageResponseTime *
        (this.performanceMetrics.totalRequests - 1) +
        processingTime) /
      this.performanceMetrics.totalRequests;

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫
    if (!success) {
      this.performanceMetrics.errorRate =
        (this.performanceMetrics.errorRate *
          (this.performanceMetrics.totalRequests - 1) +
          1) /
        this.performanceMetrics.totalRequests;
    } else {
      this.performanceMetrics.errorRate =
        (this.performanceMetrics.errorRate *
          (this.performanceMetrics.totalRequests - 1)) /
        this.performanceMetrics.totalRequests;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  private formatAgentResponse(messageType: string, agentData: unknown): string {
    switch (messageType) {
      case "event":
        if (this.isRecord(agentData)) {
          const adv = agentData.advice;
          const parsed = agentData.parsedEvent;
          let objectName = "—Å–æ–±—ã—Ç–∏–µ";
          if (this.isRecord(parsed)) {
            const objVal = (parsed as { object?: unknown }).object;
            if (typeof objVal === "string") objectName = objVal;
            const adviceStr = typeof adv === "string" ? adv : null;
            if (adviceStr) {
              return `–ó–∞–ø–∏—Å–∞–ª —Å–æ–±—ã—Ç–∏–µ: "${objectName}". ${adviceStr}`;
            }
            return `–ó–∞–ø–∏—Å–∞–ª: "${objectName}".`;
          }
        }
        return "–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.";

      case "question":
        return typeof agentData === "string" ? agentData : "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.";

      case "complex_task":
        if (this.isRecord(agentData)) {
          const final = agentData.finalSummary;
          if (typeof final === "string") return final;
        }
        return "–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.";

      case "chat":
        return typeof agentData === "string"
          ? agentData
          : "–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!";

      default:
        return typeof agentData === "string" ? agentData : "–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.";
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö
   */
  getAvailableAgents(): {
    key: string;
    name: string;
    description: string;
    capabilities: AgentCapability[];
  }[] {
    const result = [];
    const agents = globalAgentRegistry.getAll();

    for (const [key, agent] of agents) {
      result.push({
        key,
        name: agent.name,
        description: agent.description,
        capabilities: agent.capabilities,
      });
    }

    return result;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
   */
  getAgentStats(): {
    totalAgents: number;
    agentList: string[];
    performance: {
      totalRequests: number;
      averageResponseTime: number;
      errorRate: number;
      parallelTasksProcessed: number;
    };
    queueStats: {
      pendingTasks: number;
      processingTasks: number;
      maxConcurrency: number;
    };
  } {
    const agents = globalAgentRegistry.getAll();

    return {
      totalAgents: agents.size,
      agentList: Array.from(agents.keys()),
      performance: { ...this.performanceMetrics },
      queueStats: {
        pendingTasks: this.taskQueue.length,
        processingTasks: this.processingTasks.size,
        maxConcurrency: this.maxConcurrentTasks,
      },
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
   */
  resetPerformanceData(): void {
    this.taskQueue.length = 0;
    this.processingTasks.clear();

    this.performanceMetrics = {
      totalRequests: 0,
      averageResponseTime: 0,
      errorRate: 0,
      parallelTasksProcessed: 0,
    };

    console.log("üîÑ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  configurePerformance(config: { maxConcurrentTasks?: number }): void {
    if (config.maxConcurrentTasks !== undefined) {
      this.maxConcurrentTasks = config.maxConcurrentTasks;
    }

    console.log("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", config);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   * @param conversationId - ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ —Å ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  async processMessageWithConversation(
    message: string,
    context: AgentContext,
    conversationId?: string,
  ): Promise<OrchestrationResult & { conversationId: string }> {
    // –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const MessageSchema = z.string().min(1).max(4000);
    const AgentContextSchema = z.object({
      userId: z.string().optional(),
      channel: z.string().optional(),
      metadata: z.record(z.string(), z.unknown()).optional(),
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedMessage = MessageSchema.parse(message);
    const validatedContext = AgentContextSchema.parse(context);

    const startTime = Date.now();

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    let currentConversationId = conversationId;
    if (
      !currentConversationId ||
      !conversationManager.getConversation(currentConversationId)
    ) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
      const userId =
        validatedContext.userId ??
        (typeof validatedContext.metadata?.userId === "string"
          ? validatedContext.metadata.userId
          : undefined) ??
        "unknown";
      const channel =
        validatedContext.channel ??
        (typeof validatedContext.metadata?.channel === "string"
          ? validatedContext.metadata.channel
          : undefined) ??
        "default";
      currentConversationId = conversationManager.createConversation(
        userId,
        channel,
      );
      console.log(
        `üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä ${currentConversationId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    const userMessage: MessageHistoryItem = {
      id: `msg-${Date.now()}-${randomUUID()}`,
      role: "user",
      content: validatedMessage,
      timestamp: new Date(),
      metadata: {
        userId:
          validatedContext.userId ??
          (typeof validatedContext.metadata?.userId === "string"
            ? validatedContext.metadata.userId
            : undefined),
        channel:
          validatedContext.channel ??
          (typeof validatedContext.metadata?.channel === "string"
            ? validatedContext.metadata.channel
            : undefined),
      },
    };

    conversationManager.updateConversation(currentConversationId, userMessage);

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
    const messageHistory = conversationManager.getMessagesForAgent(
      currentConversationId,
      20,
    );

    console.log(
      `üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π (${messageHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π) –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ${currentConversationId}`,
    );

    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
      const result = await this.processMessage(
        validatedMessage,
        validatedContext,
        {
          messageHistory,
        },
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
      if (result.finalResponse) {
        const agentMessage: MessageHistoryItem = {
          id: `msg-${Date.now()}-${randomUUID()}`,
          role: "assistant",
          content: result.finalResponse,
          timestamp: new Date(),
          metadata: {
            agentsUsed: result.agentsUsed,
            executionTime: Date.now() - startTime,
            qualityScore: result.qualityScore,
          },
        };

        conversationManager.updateConversation(
          currentConversationId,
          agentMessage,
        );
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      return {
        ...result,
        conversationId: currentConversationId,
      };
    } catch (error) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ${currentConversationId}:`,
        error,
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const errorMessage: MessageHistoryItem = {
        id: `msg-${Date.now()}-${randomUUID()}`,
        role: "system",
        content: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
        timestamp: new Date(),
        metadata: {
          error: true,
          executionTime: Date.now() - startTime,
        },
      };

      conversationManager.updateConversation(
        currentConversationId,
        errorMessage,
      );

      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param maxMessages - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
   * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ null –µ—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  getConversationHistory(
    conversationId: string,
    maxMessages = 50,
  ): MessageHistoryItem[] | null {
    const conversation = conversationManager.getConversation(conversationId);
    if (!conversation) {
      return null;
    }

    return conversationManager.getMessagesForAgent(conversationId, maxMessages);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   * @param conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
   */
  clearConversationHistory(conversationId: string): void {
    conversationManager.clearConversation(conversationId);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é
   * @param conversationId - ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  deleteConversation(conversationId: string): void {
    conversationManager.deleteConversation(conversationId);
  }
}
