import { generateObject, generateText } from "ai";
import { z } from "zod";

import { getPrompt, PROMPT_KEYS } from "@synoro/prompts";

import type {
  AgentCapability,
  AgentResult,
  AgentTask,
  AgentTelemetry,
  ClassificationResult,
  RoutingDecision,
} from "./types";
import { AbstractAgent } from "./base-agent";

// –°—Ö–µ–º–∞ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const classificationSchema = z.object({
  messageType: z.enum([
    "question",
    "event",
    "chat",
    "complex_task",
    "irrelevant",
  ]),
  subtype: z.string().optional(),
  confidence: z.number().min(0).max(1),
  needsLogging: z.boolean(),
  complexity: z.enum(["simple", "medium", "complex"]),
  reasoning: z.string(),
  suggestedAgents: z.array(z.string()),
});

// –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
const routingDecisionSchema = z.object({
  targetAgent: z.string(),
  confidence: z.number().min(0).max(1),
  reasoning: z.string(),
  shouldParallel: z.boolean().optional(),
  followUpAgents: z.array(z.string()).optional(),
});

/**
 * –ê–≥–µ–Ω—Ç-—Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∞–≥–µ–Ω—Ç–∞–º
 */
export class RouterAgent extends AbstractAgent {
  name = "Message Router";
  description =
    "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º";

  capabilities: AgentCapability[] = [
    {
      name: "Message Classification",
      description: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
      category: "routing",
      confidence: 0.95,
    },
    {
      name: "Agent Selection",
      description: "–í—ã–±–æ—Ä –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      category: "routing",
      confidence: 0.9,
    },
    {
      name: "Task Orchestration",
      description:
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      category: "routing",
      confidence: 0.85,
    },
  ];

  private availableAgents = new Map<string, string[]>([
    ["question", ["qa-specialist", "general-assistant", "data-analyst"]],
    ["event", ["event-processor", "task-manager"]],
    ["chat", ["general-assistant", "qa-specialist"]],
    ["complex_task", ["task-orchestrator", "data-analyst", "qa-specialist"]],
    ["irrelevant", ["general-assistant"]],
  ]);

  // –ö—ç—à –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  private classificationCache = new Map<
    string,
    { result: ClassificationResult; timestamp: number }
  >();
  protected cacheTimeout = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π

  constructor() {
    super("gpt-5-mini"); // Temperature removed
  }

  canHandle(_task: AgentTask): Promise<boolean> {
    // –†–æ—É—Ç–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return Promise.resolve(true);
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  private quickClassify(input: string): Partial<ClassificationResult> | null {
    const lowerInput = input.toLowerCase().trim();

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const patterns: Record<string, RegExp[]> = {
      event: [
        /–∫—É–ø–∏–ª|–ø–æ—Ç—Ä–∞—Ç–∏–ª|–∑–∞—Ä–∞–±–æ—Ç–∞–ª|–ø–æ–ª—É—á–∏–ª|–æ–ø–ª–∞—Ç–∏–ª|–ø—Ä–æ–¥–∞–ª/,
        /–≤—Å—Ç—Ä–µ—á–∞|–∑–∞–¥–∞—á–∞|–¥–µ–ª–æ|–Ω–∞–ø–æ–º–Ω–∏|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª/,
        /–ø–æ–µ–∑–¥–∫–∞|—Ä–µ–º–æ–Ω—Ç|–ª–µ—á–µ–Ω–∏–µ|–≤—Ä–∞—á|–±–æ–ª—å–Ω–∏—Ü–∞/,
        /—Å–¥–µ–ª–∞–ª|–≤—ã–ø–æ–ª–Ω–∏–ª|–∑–∞–∫–æ–Ω—á–∏–ª|–Ω–∞—á–∞–ª/,
      ],
      question: [
        /—á—Ç–æ|–∫–∞–∫|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫–æ–π|—Å–∫–æ–ª—å–∫–æ/,
        /–º–æ–∂–µ—à—å|—É–º–µ–µ—à—å|–∑–Ω–∞–µ—à—å|—Ä–∞—Å—Å–∫–∞–∂–∏|–æ–±—ä—è—Å–Ω–∏/,
        /–ø–æ–º–æ–≥–∏|–ø–æ–¥—Å–∫–∞–∂–∏|–ø–æ—Å–æ–≤–µ—Ç—É–π|—Ä–µ–∫–æ–º–µ–Ω–¥—É–π/,
      ],
      chat: [
        /–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π|–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è/,
        /—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|–æ—Ç–ª–∏—á–Ω–æ|—Ö–æ—Ä–æ—à–æ|–ø–æ–Ω—è—Ç–Ω–æ/,
        /–¥–∞|–Ω–µ—Ç|–æ–∫|–æ–∫–µ–π|–ª–∞–¥–Ω–æ|—Å–æ–≥–ª–∞—Å–µ–Ω/,
      ],
      complex_task: [
        /–∞–Ω–∞–ª–∏–∑|–æ—Ç—á–µ—Ç|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|—Å—Ä–∞–≤–Ω–∏|–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π/,
        /–ø–ª–∞–Ω|—Å—Ç—Ä–∞—Ç–µ–≥–∏—è|–∞–ª–≥–æ—Ä–∏—Ç–º|—Å—Ö–µ–º–∞|—Å—Ç—Ä—É–∫—Ç—É—Ä–∞/,
      ],
    };

    for (const [type, typePatterns] of Object.entries(patterns)) {
      if (typePatterns.some((pattern) => pattern.test(lowerInput))) {
        return {
          messageType: type as ClassificationResult["messageType"],
          confidence: 0.8,
          needsLogging: type === "event",
          complexity: type === "complex_task" ? "complex" : "simple",
        };
      }
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private getCachedClassification(input: string): ClassificationResult | null {
    // –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const hash = this.createInputHash(input);
    const cached = this.classificationCache.get(hash);

    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.result;
    }

    this.classificationCache.delete(hash);
    return null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫—ç—à
   */
  private setCachedClassification(
    input: string,
    result: ClassificationResult,
  ): void {
    const hash = this.createInputHash(input);
    this.classificationCache.set(hash, { result, timestamp: Date.now() });
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  async classifyMessage(
    task: AgentTask,
    _telemetry?: AgentTelemetry,
  ): Promise<ClassificationResult> {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = this.getCachedClassification(task.input);
    if (cached) {
      console.log("üöÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è");
      return cached;
    }

    // 2. –ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    const quickResult = this.quickClassify(task.input);
    if (
      quickResult?.confidence &&
      quickResult.confidence > 0.7 &&
      quickResult.messageType
    ) {
      const result: ClassificationResult = {
        messageType: quickResult.messageType,
        confidence: quickResult.confidence,
        needsLogging: quickResult.needsLogging ?? false,
        complexity: quickResult.complexity ?? "simple",
        suggestedAgents: this.availableAgents.get(quickResult.messageType) ?? [
          "general-assistant",
        ],
        reasoning: "–ë—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º",
      };

      this.setCachedClassification(task.input, result);
      console.log("‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è");
      return result;
    }
    const systemPrompt = await getPrompt(PROMPT_KEYS.ROUTER_CLASSIFICATION);

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${task.input}"

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –∫–∞–Ω–∞–ª ${task.context.channel ?? "unknown"}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${task.context.userId ?? "anonymous"}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ (–ø–æ–∫—É–ø–∫–∞, –∑–∞–¥–∞—á–∞, –≤—Å—Ç—Ä–µ—á–∞, –∑–∞–º–µ—Ç–∫–∞ –∏ —Ç.–¥.) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–æ–≤–∏ needsLogging: true. –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏.

–í–µ—Ä–Ω–∏ JSON —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.`;

    // 3. –ü–æ–ª–Ω–∞—è –ò–ò –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    try {
      const { object } = await generateObject({
        model: this.getModel(),
        schema: classificationSchema,
        system: systemPrompt,
        prompt,
        experimental_telemetry: {
          isEnabled: true,
          ...this.createTelemetry("classify", task),
        },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.setCachedClassification(task.input, object);
      console.log("üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –ò–ò –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è");
      return object;
    } catch (error) {
      console.error("Error in message classification:", error);

      // Fallback –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é AI
      try {
        const telemetryData = this.createTelemetry(
          "fallback-classification",
          task,
        );

        const { text: fallbackClassification } = await generateText({
          model: this.getModel(),
          system: await getPrompt(PROMPT_KEYS.ROUTER_FALLBACK),
          prompt: `–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π: "${task.input}"`,
          experimental_telemetry: {
            isEnabled: true,
            ...telemetryData,
            metadata: { ...(telemetryData.metadata ?? {}), fallback: true },
          },
        });

        const messageType = fallbackClassification.trim().toLowerCase();
        const validTypes = [
          "question",
          "event",
          "chat",
          "complex_task",
          "irrelevant",
        ];
        const validatedType = validTypes.includes(messageType)
          ? messageType
          : "chat";

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        const needsLogging = validatedType === "event";

        return {
          messageType: validatedType as
            | "question"
            | "event"
            | "chat"
            | "complex_task"
            | "irrelevant",
          confidence: 0.4,
          needsLogging,
          complexity: messageType === "complex_task" ? "complex" : "simple",
          suggestedAgents:
            messageType === "question"
              ? ["qa-specialist"]
              : messageType === "event"
                ? ["event-processor"]
                : ["general-assistant"],
        };
      } catch (fallbackError) {
        console.error("Fallback classification also failed:", fallbackError);
        return {
          messageType: "chat",
          confidence: 0.3,
          needsLogging: false,
          complexity: "simple",
          suggestedAgents: ["qa-specialist"],
        };
      }
    }
  }

  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async routeMessage(
    classification: ClassificationResult,
    task: AgentTask,
    _telemetry?: AgentTelemetry,
  ): Promise<RoutingDecision> {
    const systemPrompt = await getPrompt(PROMPT_KEYS.ROUTER_ROUTING);

    const prompt = `–í—ã–±–µ—Ä–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: "${task.input}"

–£—á—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –í–µ—Ä–Ω–∏ JSON —Å —Ä–µ—à–µ–Ω–∏–µ–º –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏.`;

    try {
      const { object } = await generateObject({
        model: this.getModel(),
        schema: routingDecisionSchema,
        system: systemPrompt,
        prompt,
        temperature: this.defaultTemperature,
        experimental_telemetry: {
          isEnabled: true,
          ...this.createTelemetry("route", task),
          metadata: {
            operation: "route",
            classification: classification.messageType,
            complexity: classification.complexity,
          },
        },
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
      const availableForType =
        this.availableAgents.get(classification.messageType) ?? [];
      if (!availableForType.includes(object.targetAgent)) {
        console.warn(
          `–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç ${object.targetAgent} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–∏–ø–∞ ${classification.messageType}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`,
        );
        object.targetAgent = availableForType[0] ?? "general-assistant";
        object.confidence = Math.max(0.3, object.confidence - 0.2);
        object.reasoning += " (—Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–∞)";
      }

      return object;
    } catch (error) {
      console.error("Error in routing decision:", error);
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏");
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async process(
    task: AgentTask,
    telemetry?: AgentTelemetry,
  ): Promise<
    AgentResult<{
      classification: ClassificationResult;
      routing: RoutingDecision;
    }>
  > {
    try {
      // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const classification = await this.classifyMessage(task, telemetry);

      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
      const routing = await this.routeMessage(classification, task, telemetry);

      return this.createSuccessResult(
        { classification, routing },
        Math.min(classification.confidence, routing.confidence),
        `Classified as ${classification.messageType} (${classification.complexity}), routed to ${routing.targetAgent}`,
      );
    } catch (error) {
      console.error("Error in router agent processing:", error);
      return this.createErrorResult("Failed to classify and route message");
    }
  }
}
