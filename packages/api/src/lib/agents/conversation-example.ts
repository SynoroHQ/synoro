/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
 */

import { AgentManager } from "./agent-manager";
import type { AgentContext } from "./agent-context";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
const agentManager = new AgentManager();

/**
 * –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞–≥–µ–Ω—Ç–æ–º
 */
async function simpleConversationExample() {
  console.log("üöÄ –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –∞–≥–µ–Ω—Ç–æ–º");

  const context: AgentContext = {
    userId: "user123",
    channel: "telegram",
    metadata: {
      userId: "user123",
      channel: "telegram",
    },
  };

  try {
    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
    const result1 = await agentManager.processMessageWithConversation(
      "–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–æ–≥–∏ –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è TypeScript",
      context
    );

    console.log("üìù –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç:", result1.finalResponse);
    console.log("üÜî ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:", result1.conversationId);

    // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä
    const result2 = await agentManager.processMessageWithConversation(
      "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ –∑–∞–π–º–µ—Ç?",
      context,
      result1.conversationId // –ü–µ—Ä–µ–¥–∞–µ–º ID —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    );

    console.log("üìù –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç:", result2.finalResponse);

    // –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –µ—â–µ –æ–¥–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    const result3 = await agentManager.processMessageWithConversation(
      "–ê –∫–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å?",
      context,
      result1.conversationId
    );

    console.log("üìù –¢—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç:", result3.finalResponse);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const history = agentManager.getConversationHistory(result1.conversationId);
    console.log("üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:", history);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ:", error);
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
async function multiUserConversationExample() {
  console.log("üë• –ü—Ä–∏–º–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏");

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user1Context: AgentContext = {
    userId: "alice",
    channel: "web",
    metadata: { userId: "alice", channel: "web" },
  };

  // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user2Context: AgentContext = {
    userId: "bob",
    channel: "telegram",
    metadata: { userId: "bob", channel: "telegram" },
  };

  try {
    // –†–∞–∑–≥–æ–≤–æ—Ä —Å –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const aliceResult = await agentManager.processMessageWithConversation(
      "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Docker –¥–ª—è Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
      user1Context
    );

    console.log("üë© Alice –ø–æ–ª—É—á–∏–ª–∞ –æ—Ç–≤–µ—Ç:", aliceResult.finalResponse);

    // –†–∞–∑–≥–æ–≤–æ—Ä —Å–æ –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è)
    const bobResult = await agentManager.processMessageWithConversation(
      "–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã",
      user2Context
    );

    console.log("üë® Bob –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç:", bobResult.finalResponse);

    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å Alice
    const aliceFollowUp = await agentManager.processMessageWithConversation(
      "–ê –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Docker Compose?",
      user1Context,
      aliceResult.conversationId
    );

    console.log("üë© Alice –ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:", aliceFollowUp.finalResponse);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º—É–ª—å—Ç–∏–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ:", error);
  }
}

/**
 * –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */
async function conversationHistoryExample() {
  console.log("üìö –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞");

  const context: AgentContext = {
    userId: "developer",
    channel: "api",
    metadata: { userId: "developer", channel: "api" },
  };

  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    const result = await agentManager.processMessageWithConversation(
      "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ React hooks",
      context
    );

    const conversationId = result.conversationId;

    // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    await agentManager.processMessageWithConversation(
      "–ß—Ç–æ —Ç–∞–∫–æ–µ useEffect?",
      context,
      conversationId
    );

    await agentManager.processMessageWithConversation(
      "–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useState",
      context,
      conversationId
    );

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const fullHistory = agentManager.getConversationHistory(conversationId);
    console.log("üìñ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:", fullHistory?.length, "—Å–æ–æ–±—â–µ–Ω–∏–π");

    // –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    const limitedHistory = agentManager.getConversationHistory(conversationId, 3);
    console.log("üìÑ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:", limitedHistory?.length, "—Å–æ–æ–±—â–µ–Ω–∏–π");

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    agentManager.clearConversationHistory(conversationId);
    console.log("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞");

    const clearedHistory = agentManager.getConversationHistory(conversationId);
    console.log("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:", clearedHistory?.length, "—Å–æ–æ–±—â–µ–Ω–∏–π");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π:", error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export {
  simpleConversationExample,
  multiUserConversationExample,
  conversationHistoryExample,
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
if (require.main === module) {
  async function runExamples() {
    console.log("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n");

    await simpleConversationExample();
    console.log("\n" + "=".repeat(50) + "\n");

    await multiUserConversationExample();
    console.log("\n" + "=".repeat(50) + "\n");

    await conversationHistoryExample();
    console.log("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
  }

  runExamples().catch(console.error);
}
