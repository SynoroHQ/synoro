import type { MessageHistoryItem } from "./types";

interface ConversationHistory {
  conversationId: string;
  messages: MessageHistoryItem[];
  userId: string;
  channel: string;
  createdAt: Date;
  updatedAt: Date;
}

interface ConversationManager {
  getConversation(conversationId: string): ConversationHistory | null;
  updateConversation(conversationId: string, message: MessageHistoryItem): void;
  createConversation(userId: string, channel: string): string;
  getMessagesForAgent(conversationId: string, maxMessages?: number): MessageHistoryItem[];
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 * –•—Ä–∞–Ω–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–µ—Å–µ–¥ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
 */
export class SimpleConversationManager implements ConversationManager {
  private conversations = new Map<string, ConversationHistory>();
  private readonly maxMessagesPerConversation = 50; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ ID
   */
  getConversation(conversationId: string): ConversationHistory | null {
    return this.conversations.get(conversationId) || null;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  createConversation(userId: string, channel: string): string {
    const conversationId = `conv-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

    const conversation: ConversationHistory = {
      conversationId,
      messages: [],
      userId,
      channel,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    this.conversations.set(conversationId, conversation);
    console.log(`üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä: ${conversationId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    return conversationId;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  updateConversation(conversationId: string, message: MessageHistoryItem): void {
    const conversation = this.conversations.get(conversationId);

    if (!conversation) {
      console.warn(`‚ö†Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä ${conversationId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    conversation.messages.push(message);
    conversation.updatedAt = new Date();

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (conversation.messages.length > this.maxMessagesPerConversation) {
      conversation.messages = conversation.messages.slice(-this.maxMessagesPerConversation);
    }

    console.log(`üí¨ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä ${conversationId}: ${message.role} - ${message.content.substring(0, 50)}...`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
   */
  getMessagesForAgent(conversationId: string, maxMessages = 20): MessageHistoryItem[] {
    const conversation = this.conversations.get(conversationId);

    if (!conversation) {
      console.warn(`‚ö†Ô∏è –†–∞–∑–≥–æ–≤–æ—Ä ${conversationId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤`);
      return [];
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = conversation.messages.slice(-maxMessages);

    console.log(`üìö –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ${conversationId} –¥–ª—è –∞–≥–µ–Ω—Ç–∞`);

    return messages;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
   */
  cleanupOldConversations(): void {
    const cutoffTime = Date.now() - 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    let cleaned = 0;

    for (const [conversationId, conversation] of this.conversations.entries()) {
      if (conversation.updatedAt.getTime() < cutoffTime) {
        this.conversations.delete(conversationId);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
   */
  getStats(): { totalConversations: number; totalMessages: number } {
    let totalMessages = 0;

    for (const conversation of this.conversations.values()) {
      totalMessages += conversation.messages.length;
    }

    return {
      totalConversations: this.conversations.size,
      totalMessages,
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const conversationManager = new SimpleConversationManager();

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
  conversationManager.cleanupOldConversations();
}, 30 * 60 * 1000);
