import { TRPCError } from "@trpc/server";

import type { TRPCContext } from "../../trpc";
import { classifyMessage } from "../ai";
import { MESSAGE_PROCESSING_CONFIG } from "../constants/message-processing";
import {
  getConversationContext,
  saveMessageToConversation,
  trimContextByTokens,
} from "../context-manager";
import { processClassifiedMessage } from "../message-processor";
import {
  createCommonMetadata,
  determineMaxTokens,
  formatExecutionTime,
  safeTruncateForLogging,
} from "../utils/message-utils";

export interface ProcessMessageParams {
  text: string;
  channel: "telegram" | "web" | "mobile";
  userId: string;
  ctx: TRPCContext;
  chatId?: string;
  messageId?: string;
  metadata?: Record<string, unknown>;
}

export interface ProcessMessageResult {
  success: true;
  response: string;
  messageType: {
    type: string;
    subtype: string;
    confidence: number;
    need_logging: boolean;
  };
  relevance: {
    relevant: boolean;
    score: number;
    category: string;
  };
  parsed: any;
}

/**
 * –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function processMessageInternal(
  params: ProcessMessageParams,
): Promise<ProcessMessageResult> {
  const { text, channel, userId, ctx, chatId, messageId, metadata } = params;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!text.trim()) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
    });
  }

  if (!userId) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
    });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
    const conversationContext = await getConversationContext(
      ctx,
      userId,
      channel,
      chatId,
      {
        maxMessages: MESSAGE_PROCESSING_CONFIG.CONTEXT.MAX_MESSAGES,
        includeSystemMessages:
          MESSAGE_PROCESSING_CONFIG.CONTEXT.INCLUDE_SYSTEM_MESSAGES,
        maxAgeHours: MESSAGE_PROCESSING_CONFIG.CONTEXT.MAX_AGE_HOURS,
      },
    );

    // –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Ç–∏–ª–∏—Ç—ã
    const maxTokens = determineMaxTokens(text);
    const trimmedContext = trimContextByTokens(
      conversationContext.messages,
      maxTokens,
    );

    console.log(
      `üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã: ${trimmedContext.length} —Å–æ–æ–±—â–µ–Ω–∏–π (ID: ${conversationContext.conversationId})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
    await saveMessageToConversation(
      ctx,
      conversationContext.conversationId,
      "user",
      { text },
    );

    // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É—Ç–∏–ª–∏—Ç—ã
    const commonMetadata = createCommonMetadata({
      channel,
      userId,
      conversationId: conversationContext.conversationId,
      context: JSON.stringify(trimmedContext),
      chatId,
      messageId,
      metadata,
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    const classificationStartTime = Date.now();

    console.log(
      "üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
    );
    const classification = await classifyMessage(text, {
      functionId: MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.CLASSIFIER,
      metadata: commonMetadata,
    });

    const { messageType, relevance } = classification;

    const classificationTime = formatExecutionTime(classificationStartTime);
    console.log(`‚è±Ô∏è Classification took ${classificationTime}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const result = await processClassifiedMessage(
      text,
      messageType,
      {
        channel,
        userId,
        chatId,
        messageId,
        metadata: commonMetadata,
        conversationId: conversationContext.conversationId,
        context: trimmedContext,
      },
      {
        questionFunctionId: MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.QUESTION,
        chatFunctionId: MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.CHAT,
        parseFunctionId: MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.PARSE,
        adviseFunctionId: MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.ADVISE,
        fallbackParseFunctionId:
          MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.FALLBACK_PARSE,
        fallbackAdviseFunctionId:
          MESSAGE_PROCESSING_CONFIG.FUNCTION_IDS.FALLBACK_ADVISE,
      },
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –±–µ—Å–µ–¥—É
    await saveMessageToConversation(
      ctx,
      conversationContext.conversationId,
      "assistant",
      { text: result.response },
      result.model, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    );

    return {
      success: true as const,
      response: result.response,
      messageType: {
        type: messageType.type,
        subtype: messageType.subtype ?? "",
        confidence: messageType.confidence,
        need_logging: messageType.need_logging,
      },
      relevance: {
        relevant: relevance.relevant,
        score: relevance.score ?? 0,
        category: relevance.category ?? "",
      },
      parsed: result.parsed,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", {
      error,
      text: safeTruncateForLogging(text),
      channel,
      userId,
      chatId,
      messageId,
    });

    if (error instanceof TRPCError) {
      throw error;
    }

    throw new TRPCError({
      code: "INTERNAL_SERVER_ERROR",
      message: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      cause: error,
    });
  }
}
