import { TRPCError } from "@trpc/server";

import type { TRPCContext } from "../../trpc";
import { AgentMessageProcessor } from "../agents/agent-processor";
import { MESSAGE_PROCESSING_CONFIG } from "../constants/message-processing";
import {
  getConversationContext,
  saveMessageToConversation,
  trimContextByTokens,
} from "../context-manager";
import {
  createCommonMetadata,
  determineMaxTokens,
  formatExecutionTime,
  safeTruncateForLogging,
} from "../utils/message-utils";
import { AgentContext } from "../agents/agent-context";

export interface ProcessAgentMessageParams {
  text: string;
  channel: "telegram" | "web" | "mobile";
  userId: string | null;
  ctx: TRPCContext;
  chatId?: string;
  messageId?: string;
  metadata?: Record<string, unknown>;
  options?: {
    forceAgentMode?: boolean;
    useQualityControl?: boolean;
    maxQualityIterations?: number;
    targetQuality?: number;
  };
}

export interface ProcessAgentMessageResult {
  success: true;
  response: string;
  messageType: {
    type: string;
    subtype: string;
    confidence: number;
    need_logging: boolean;
  };
  relevance: {
    relevant: boolean;
    score: number;
    category: string;
  };
  parsed: any;
  agentMetadata?: {
    agentsUsed: string[];
    totalSteps: number;
    qualityScore: number;
    processingTime: number;
    processingMode: "agents";
    shouldLogEvent: boolean;
  };
}

// Singleton instance –∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
let agentProcessor: AgentMessageProcessor | null = null;

function getAgentProcessor(): AgentMessageProcessor {
  if (!agentProcessor) {
    agentProcessor = new AgentMessageProcessor();
  }
  return agentProcessor;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function processMessageWithAgents(
  params: ProcessAgentMessageParams,
): Promise<ProcessAgentMessageResult> {
  const {
    text,
    channel,
    userId,
    ctx,
    chatId,
    messageId,
    metadata,
    options = {},
  } = params;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!text.trim()) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
    });
  }

  if (channel !== "telegram" && !userId) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
    });
  }

  try {
    const processingStartTime = Date.now();

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
    const conversationContext = await getConversationContext(
      ctx,
      userId,
      channel,
      chatId,
      {
        maxMessages: MESSAGE_PROCESSING_CONFIG.CONTEXT.MAX_MESSAGES,
        includeSystemMessages:
          MESSAGE_PROCESSING_CONFIG.CONTEXT.INCLUDE_SYSTEM_MESSAGES,
        maxAgeHours: MESSAGE_PROCESSING_CONFIG.CONTEXT.MAX_AGE_HOURS,
      },
    );

    // –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const maxTokens = determineMaxTokens(text);
    const trimmedContext = trimContextByTokens(
      conversationContext.messages,
      maxTokens,
    );

    console.log(
      `ü§ñ [AGENTS] –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã: ${trimmedContext.length} —Å–æ–æ–±—â–µ–Ω–∏–π (ID: ${conversationContext.conversationId})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await saveMessageToConversation(
      ctx,
      conversationContext.conversationId,
      "user",
      { text },
    );

    // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const commonMetadata = createCommonMetadata({
      channel,
      userId,
      conversationId: conversationContext.conversationId,
      chatId,
      messageId,
      metadata: {
        ...metadata,
        contextMessageCount: trimmedContext.length,
        agentMode: true,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã
    const agentContext: AgentContext = {
      userId: userId ?? undefined,
      chatId,
      messageId,
      channel,
      metadata: {
        ...commonMetadata,
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
        conversationContext: {
          conversationId: conversationContext.conversationId,
          totalMessages: conversationContext.totalMessages,
          contextMessages: trimmedContext.length,
          hasMoreMessages: conversationContext.hasMoreMessages,
        },
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
        conversationHistory: trimmedContext.map(msg => ({
          id: msg.id,
          role: msg.role,
          content: msg.content.text,
          createdAt: msg.createdAt,
        })),
      },
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const agentProcessingStartTime = Date.now();
    const processor = getAgentProcessor();

    const result = await processor.processMessage(
      text,
      agentContext,
      {
        useQualityControl: options.useQualityControl ?? true,
        maxQualityIterations: options.maxQualityIterations ?? 2,
        targetQuality: options.targetQuality ?? 0.8,
      },
    );

    const agentProcessingTime = formatExecutionTime(agentProcessingStartTime);
    console.log(`üöÄ [AGENTS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞–º–∏: ${agentProcessingTime}`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–∞—Ö
    if (result.agentMetadata) {
      console.log(
        `ü§ñ [AGENTS] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∞–≥–µ–Ω—Ç—ã: ${result.agentMetadata.agentsUsed.join(" ‚Üí ")}`,
      );
      console.log(
        `üìä [AGENTS] –ö–∞—á–µ—Å—Ç–≤–æ: ${result.agentMetadata.qualityScore.toFixed(2)}, —à–∞–≥–æ–≤: ${result.agentMetadata.totalSteps}`,
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await saveMessageToConversation(
      ctx,
      conversationContext.conversationId,
      "assistant",
      { text: result.response },
      result.model,
    );

    const totalProcessingTime = Date.now() - processingStartTime;

    return {
      success: true as const,
      response: result.response,
      messageType: {
        type: "processed",
        subtype: "",
        confidence: 0.9,
        need_logging: false,
      },
      relevance: {
        relevant: true,
        score: 0.9,
        category: "agent-processed",
      },
      parsed: result.parsed,
      agentMetadata: result.agentMetadata
        ? {
            ...result.agentMetadata,
            processingMode: "agents",
          }
        : {
            agentsUsed: ["agent-processor"],
            totalSteps: 1,
            qualityScore: 0.7,
            processingTime: totalProcessingTime,
            processingMode: "agents",
            shouldLogEvent: false,
          },
    };
  } catch (error) {
    console.error("‚ùå [AGENTS] –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:", {
      error,
      text: safeTruncateForLogging(text),
      channel,
      userId,
      chatId,
      messageId,
    });

    if (error instanceof TRPCError) {
      throw error;
    }

    throw new TRPCError({
      code: "INTERNAL_SERVER_ERROR",
      message:
        error instanceof Error
          ? error.message
          : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ",
      cause: error,
    });
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export function getAgentSystemStats() {
  const processor = getAgentProcessor();
  return {
    agents: processor.getAgentStats(),
    availableAgents: processor.getAvailableAgents(),
  };
}
