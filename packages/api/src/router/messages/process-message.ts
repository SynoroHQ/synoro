import { TRPCError } from "@trpc/server";

import {
  ProcessMessageInput,
  ProcessMessageResponse,
} from "@synoro/validators";

import type { TRPCContext } from "../../trpc";
import { classifyMessage } from "../../lib/ai";
import {
  getConversationContext,
  saveMessageToConversation,
  trimContextByTokens,
} from "../../lib/context-manager";
import { processClassifiedMessage } from "../../lib/message-processor";
import { botProcedure, protectedProcedure } from "../../trpc";

/**
 * –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
async function processMessageInternal(
  text: string,
  channel: "telegram" | "web" | "mobile",
  userId: string,
  ctx: TRPCContext,
  chatId?: string,
  messageId?: string,
  metadata?: Record<string, unknown>,
) {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!text.trim()) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
    });
  }

  if (!userId) {
    throw new TRPCError({
      code: "BAD_REQUEST",
      message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω",
    });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
    const conversationContext = await getConversationContext(
      ctx,
      userId,
      channel,
      chatId,
      {
        maxMessages: 20, // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        includeSystemMessages: false,
        maxAgeHours: 48, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
      },
    );

    // –£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
    // - –î–æ 2000 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —á–∞—Ç–∞ (–±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    // - –î–æ 1000 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–º–µ–Ω—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω—É–∂–µ–Ω)
    const maxTokens = text.includes("?") || text.length < 50 ? 2000 : 1000;
    const trimmedContext = trimContextByTokens(
      conversationContext.messages,
      maxTokens,
    );

    console.log(
      `üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã: ${trimmedContext.length} —Å–æ–æ–±—â–µ–Ω–∏–π (ID: ${conversationContext.conversationId})`,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
    await saveMessageToConversation(
      ctx,
      conversationContext.conversationId,
      "user",
      { text },
    );

    const commonMetadata = {
      channel,
      userId,
      conversationId: conversationContext.conversationId,
      context: JSON.stringify(trimmedContext),
      ...(chatId && { chatId }),
      ...(messageId && { messageId }),
      ...metadata,
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    const classificationStartTime = Date.now();

    console.log("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º");
    const classification = await classifyMessage(text, {
      functionId: "api-message-classifier",
      metadata: commonMetadata,
    });

    const { messageType, relevance } = classification;

    const classificationTime = Date.now() - classificationStartTime;
    console.log(`‚è±Ô∏è Classification took ${classificationTime}ms`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const result = await processClassifiedMessage(
      text,
      messageType,
      {
        channel,
        userId,
        chatId,
        messageId,
        metadata: commonMetadata,
        conversationId: conversationContext.conversationId,
        context: trimmedContext,
      },
      {
        questionFunctionId: "api-answer-question",
        chatFunctionId: "api-chat-response",
        parseFunctionId: "api-parse-text",
        adviseFunctionId: "api-advise",
        fallbackParseFunctionId: "api-parse-text-fallback",
        fallbackAdviseFunctionId: "api-advise-fallback",
      },
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –±–µ—Å–µ–¥—É
    await saveMessageToConversation(
      ctx,
      conversationContext.conversationId,
      "assistant",
      { text: result.response },
      result.model, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–º–µ—Å—Ç–æ —Ö–∞—Ä–¥–∫–æ–¥–∞
    );

    return {
      success: true as const,
      response: result.response,
      messageType: {
        type: messageType.type,
        subtype: messageType.subtype,
        confidence: messageType.confidence,
        need_logging: messageType.need_logging,
      },
      relevance: {
        relevant: relevance.relevant,
        score: relevance.score,
        category: relevance.category,
      },
      parsed: result.parsed,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", {
      error,
      text: text.substring(0, 100), // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      channel,
      userId,
      chatId,
      messageId,
    });

    if (error instanceof TRPCError) {
      throw error;
    }

    throw new TRPCError({
      code: "INTERNAL_SERVER_ERROR",
      message: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      cause: error,
    });
  }
}

export const processMessageRouter = {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–µ–±/–º–æ–±–∞–π–ª –∫–ª–∏–µ–Ω—Ç–æ–≤)
  processMessage: protectedProcedure
    .input(ProcessMessageInput)
    .output(ProcessMessageResponse)
    .mutation(async ({ ctx, input }) => {
      const userId = ctx.session.user.id;

      return processMessageInternal(
        input.text,
        input.channel,
        userId,
        ctx,
        input.chatId,
        input.messageId,
        input.metadata,
      );
    }),

  // –ü—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞
  processMessageFromTelegram: botProcedure
    .input(ProcessMessageInput)
    .output(ProcessMessageResponse)
    .mutation(async ({ ctx, input }) => {
      // –î–ª—è bot –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º botUserId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const userId = ctx.botUserId;
      if (!userId) {
        throw new TRPCError({
          code: "BAD_REQUEST",
          message: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
        });
      }

      return processMessageInternal(
        input.text,
        input.channel,
        userId,
        ctx,
        input.chatId,
        input.messageId,
        input.metadata,
      );
    }),
};
