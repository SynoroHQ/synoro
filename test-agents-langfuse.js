// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∞–≥–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–æ–º–ø—Ç—ã –∏–∑ Langfuse
import { AgentManager } from "./packages/api/src/lib/agents/index.js";

async function testAgentsLangfuse() {
  console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏–∑ Langfuse...\n");

  const agentManager = new AgentManager();

  // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
  const testCases = [
    {
      name: "Event Processor Agent",
      input: "–ö—É–ø–∏–ª —Ö–ª–µ–± –∑–∞ 50 —Ä—É–±–ª–µ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
      expectedAgent: "event-processor",
    },
    {
      name: "Event Analyzer Agent",
      input: "–ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü",
      expectedAgent: "event-analyzer",
    },
    {
      name: "General Assistant Agent",
      input: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
      expectedAgent: "general-assistant",
    },
  ];

  for (const testCase of testCases) {
    try {
      console.log(`üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
      console.log(`   –ó–∞–ø—Ä–æ—Å: "${testCase.input}"`);

      const result = await agentManager.processRequest(testCase.input, {
        userId: "test-user",
        householdId: "test-household",
      });

      if (result.success) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
        console.log(`   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence || "N/A"}`);
        console.log(`   üí¨ –û—Ç–≤–µ—Ç: ${result.data?.substring(0, 100)}...`);
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    }

    console.log("");
  }

  console.log("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAgentsLangfuse().catch(console.error);
